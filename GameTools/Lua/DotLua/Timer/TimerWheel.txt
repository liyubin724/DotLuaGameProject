local oop = require('DotLua/OOP/oop')

local mfloor = math.floor
local tclear = table.clear
local tcopyto = table.copyto
local tisempty = table.isempty

----internal----
-- 时间轮
local TimerWheel =
    oop.class(
    'DotLua.Timer.TimerWheel',
    function(self, index, tickInMS, slotSize)
        self.index = index
        self.tickInMS = tickInMS
        self.slotSize = slotSize

        self.currentSlotIndex = 1
        self.allTasks = {}
        for i = 1, self.slotSize do
            self.allTasks[i] = {}
        end

        self.completeDelegate = nil
        self.soltTriggerDelegate = nil

        self.taskCache = {}
    end
)

function TimerWheel:GetIndex()
    return self.index
end

function TimerWheel:GetTickInMS()
    return self.tickInMS
end

function TimerWheel:GetSlotSize()
    return self.slotSize
end

function TimerWheel:GetTotalTickInMS()
    return self.tickInMS * self.slotSize
end

function TimerWheel:AddTask(task)
    local taskLeftTime = task:GetTriggerLeftInMS()
    local solt = mfloor(taskLeftTime / self.tickInMS)
    task:SetTriggerLeftInMS(taskLeftTime % self.tickInMS)

    local slotIndex = self.currentSlotIndex + solt
    slotIndex = slotIndex % self.slotSize
    if slotIndex == 0 then
        slotIndex = self.slotSize
    end
    self.allTasks[slotIndex][task:GetIndex()] = task

    return slotIndex
end

function TimerWheel:RemoveTask(task)
    local taskIndex = task:GetIndex()
    local wheelSoltIndex = task:GetWheelSoltIndex()
    self.allTasks[wheelSoltIndex][taskIndex] = nil
end

function TimerWheel:DoPushWheel(pushNum)
    for _ = 1, pushNum do
        self.currentSlotIndex = self.currentSlotIndex + 1

        if self.currentSlotIndex > self.slotSize then
            self.currentSlotIndex = 1
            self.completeDelegate:ActionInvoke(self.index)
        end

        local tasks = self.allTasks[self.currentSlotIndex]
        if not tisempty(tasks) then
            tcopyto(tasks, self.taskCache)

            tclear(tasks)
            self.soltTriggerDelegate:ActionInvoke(self.taskCache)
            tclear(self.taskCache)
        end
    end
end

function TimerWheel:ToString()
    local str =
        string.format(
        'TimerWheel:{index = %d,tickInMS = %d,slotSize = %d,currentSlotIndex = %d,tasks = {',
        self.index,
        self.tickInMS,
        self.slotSize,
        self.currentSlotIndex
    )
    for _, v in pairs(self.allTasks) do
        str = str .. '{'
        for _, v2 in pairs(v) do
            str = str .. string.format('{%s},', v2:ToString())
        end
        str = str .. '},'
    end
    str = str .. '}'
    return str
end

return TimerWheel
