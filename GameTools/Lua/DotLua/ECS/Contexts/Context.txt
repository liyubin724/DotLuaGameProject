local oop = require('DotLua/OOP/oop')
local ObjectPool = require('DotLua/Pool/ObjectPool')
local Entity = require('DotLua/ECS/Entities/Entity')
local Component = require('DotLua/ECS/Components/Component')
local GUIDComponent = require('DotLua/ECS/Components/Basic/GUIDComponent')

local tinsert = table.insert

local LogTag = 'Context'

local Context =
    oop.class(
    'DotLua.ECS.Contexts.Context',
    function(self)
        self.guidToEntityDic = {}

        self.componentClassPoolDic = {}
        self.entityPool = ObjectPool(Entity)
    end
)

function Context:DoCreate()
end

function Context:HasEntity(guid)
    return self.guidToEntityDic[guid] ~= nil
end

function Context:GetEntity(guid)
    return self.guidToEntityDic[guid]
end

function Context:GetEntities(guidList)
    local entities = {}
    for _, guid in ipairs(guidList) do
        local entity = self.guidToEntityDic[guid]
        if not entity then
            oop.error(LogTag, 'the entity of guid(' .. tostring(guid) .. ') is not found')
            return nil
        end

        tinsert(entities, entity)
    end
    return entities
end

function Context:CreateEntity(guid)
    local entity = self.entityPool:GetItem(self, guid)

    local guidComponent = self:getComponent(GUIDComponent, guid)
end

function Context:CreateEntityWithComponents(guid, componentClassList)
end

function Context:DoDestroy()
end

function Context:getComponent(componentClass, ...)
    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.iskindof(componentClass, Component) then
            oop.error(LogTag, 'the class is not a clas or is not a subclass of Component')
            return nil
        end
    end

    local pool = self.componentClassPoolDic[componentClass]
    if not pool then
        pool = ObjectPool(componentClass)

        self.componentClassPoolDic[componentClass] = pool
    end

    return pool:GetItemWithParams(...)
end

function Context:releaseComponent(component, ...)
    if oop.isDebug then
        if not oop.isinstanceof(component, Component) then
            oop.error(LogTag, 'the component is not a instance of Component')
            return
        end
    end

    local componentClass = component:GetClass()
    if componentClass then
        local pool = self.componentClassPoolDic[componentClass]
        if pool then
            pool:ReleaseItemWithParams(component, ...)
        end
    end
end

return Context
