local oop = require('DotLua/OOP/oop')

local tkeys = table.keys

local LogTag = 'ServicerMgr'

local ServicerManager =
    oop.class(
    'DotLua.ECS.Servicers.ServicerManager',
    function(self)
        self.servicerDic = {}
    end
)

function ServicerManager:HasServicer(name)
    return self.servicerDic[name] ~= nil
end

function ServicerManager:CreateServicer(name,servicerClass)
    if self:HasServicer(name) then
        oop.error(LogTag, 'the servicer has been added')
        return
    end

    local servicer = servicerClass(name)
    self.servicerDic[name] = servicer
    servicer:DoRegister()

    return servicer
end

function ServicerManager:DestroyServicer(name)
    self:UnregisterServicer(name)
end

function ServicerManager:RegisterServicer(name, servicer)
    if self:HasServicer(name) then
        oop.error(LogTag, 'the servicer has been added')
        return
    end

    self.servicerDic[name] = servicer
    servicer:DoRegister()

    return servicer
end

function ServicerManager:UnregisterServicer(name)
    local servicer = self.servicerDic[name]
    if not servicer then
        oop.warning(LogTag, 'the servicer is not found')
        return nil
    end

    self.servicerDic[name] = nil
    servicer:DoUnregister()

    return servicer
end

function ServicerManager:GetServicer(name)
    return self.servicerDic[name]
end

function ServicerManager:Dispose()
    local keys = tkeys(self.servicerDic)
    if keys and #keys > 0 then
        for _, key in ipairs(keys) do
            self:UnregisterServicer(key)
        end
    end
end

return ServicerManager
