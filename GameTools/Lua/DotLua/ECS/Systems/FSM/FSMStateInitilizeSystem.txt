local oop = require('DotLua/ECS/OOP/oop')
local ReactiveTimeSystem = require('DotLua/ECS/Systems/Components/ReactiveTimeSystem')
local HaveComponentMatcher = require('DotLua/ECS/Mathcers/Components/HaveComponentMatcher')
local FSMStateInitilizeComponent = require('DotLua/ECS/Components/FSM/FSMStateInitilizeComponent')
local FSMStateComponent = require('DotLua/ECS/Components/FSM/FSMStateComponent')
local Collector = require('DotLua/ECS/Collectors/Collector')
local GroupEvent = require 'DotLua.ECS.Groups.GroupEvent'

local FSMStateInitilizeSystem =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMStateInitilizeSystem',
    function(self, context, frequencyInTime)
    end,
    ReactiveTimeSystem
)

function FSMStateInitilizeSystem:GetTrigger(context)
    local matcher = HaveComponentMatcher(FSMStateInitilizeComponent)
    local group = context:CreateGroup(matcher)
    return Collector(group, GroupEvent.Added)
end

function FSMStateInitilizeSystem:Filter(entity)
    return true
end

function FSMStateInitilizeSystem:onEntityUpdate(entity)
    local initilizeComponent = entity:GetComponentByClass(FSMStateInitilizeComponent)
    local initStateName = initilizeComponent:GetInitStateName()

    entity:RemoveComponentByClass(FSMStateInitilizeComponent)
    local stateComponent = entity:AddComponentByClass(FSMStateComponent)
    stateComponent:SetNextStateName(initStateName)
end

return FSMStateInitilizeSystem
