local oop = require('DotLua/ECS/OOP/oop')
local Delegate = require('DotLua/OOP/Delegate')

local LogTag = 'FSMStatePlugin'

local FSMStatePlugin =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMStatePlugin',
    function(self, stateName)
        self.stateName = stateName

        self.nameToActionDic = {}

        self.matchine = nil
    end
)

function FSMStatePlugin:GetStateName()
    return self.stateName
end

function FSMStatePlugin:DoInitilize(matchine)
    self.matchine = matchine

    local func = self['onInitilize']
    if func then
        func(self)
    end
end

function FSMStatePlugin:DoEnter(fromStateName, ...)
end

function FSMStatePlugin:DoExecute(deltaTime, unscaleDeltaTime)
end

function FSMStatePlugin:DoExit(toStateName, ...)
end

function FSMStatePlugin:DoChange(stateName, ...)
    if self.stateName ~= stateName then
        self.matchine:PerformTransitionTo(stateName, ...)
    end
end

function FSMStatePlugin:RegisterAction(actionName, receiver, handleFunc)
    if self.nameToActionDic[actionName] then
        oop.error(LogTag, 'the action has been registered')
        return
    end

    self.nameToActionDic[actionName] = Delegate(receiver, handleFunc)
end

function FSMStatePlugin:UnregisterAction(actionName)
    self.nameToActionDic[actionName] = nil
end

function FSMStatePlugin:ExecuteAction(actionName, ...)
    local delegete = self.nameToActionDic[actionName]
    if delegete then
        delegete:ActionInvoke(...)
    end
end

return FSMStatePlugin
