local oop = require('DotLua/ECS/OOP/oop')
local FSMStatePlugin = require('DotLua/ECS/Systems/FSM/FSMStatePlugin')
local MacroSystem = require('DotLua/ECS/Systems/MacroSystem')

local LogTag = "FSMMatchineSystem"

local FSMMatchineSystem =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMMatchineSystem',
    function(self)
        self.nameToStatePluginDic = {}
    end,
    MacroSystem
)

function FSMMatchineSystem:onInitilize()
end

function FSMMatchineSystem:AddSubSystem(subSystem)
    subSystem:SetMatchine(self)
    self:GetBaseClass().AddSubSystem(self, subSystem)
end

function FSMMatchineSystem:GetState(stateName)
    return self.nameToStateDic[stateName]
end

function FSMMatchineSystem:RegisterState(statePlugin)
    if not statePlugin or oop.isclassof(statePlugin, FSMStatePlugin) then
        oop.error(LogTag, 'the state is nil or is not a instance of FSMStatePlugin')
        return
    end

    local stateName = statePlugin:GetStateName()
    if self.nameToStateDic[stateName] ~= nil then
        oop.error(LogTag, 'the state has been register')
        return
    end

    self.nameToStateDic[stateName] = statePlugin
    statePlugin:DoInitilize(self)
end


function FSMMatchineSystem:UnregisterState(stateName)
    self.nameToStateDic[stateName] = nil
end

function FSMMatchineSystem:PerformTransitionTo(entity, toStateName, ...)
end

return FSMMatchineSystem
