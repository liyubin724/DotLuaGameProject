local oop = require('DotLua/ECS/OOP/oop')
local FSMStatePlugin = require('DotLua/ECS/Systems/FSM/FSMStatePlugin')
local MacroSystem = require('DotLua/ECS/Systems/MacroSystem')


local HaveComponentMatcher = require('DotLua/ECS/Mathcers/Components/HaveComponentMatcher')
local FSMStateComponent = require('DotLua/ECS/Components/FSM/FSMStateComponent')
local Collector = require('DotLua/ECS/Collectors/Collector')
local GroupEvent = require 'DotLua.ECS.Groups.GroupEvent'

local LogTag = 'FSMMatchineSystem'

local FSMMatchineSystem =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMMatchineSystem',
    function(self)
        self.nameToStatePluginDic = {}
    end,
    MacroSystem
)

function FSMMatchineSystem:onInitilize()
end









function FSMMatchineSystem:RegisterState(statePlugin)
    if not statePlugin or oop.isclassof(statePlugin, FSMStatePlugin) then
        oop.error(LogTag, 'the state is nil or is not a instance of FSMStatePlugin')
        return
    end

    local stateName = statePlugin:GetStateName()
    if self.nameToStateDic[stateName] ~= nil then
        oop.error(LogTag, 'the state has been register')
        return
    end

    self.nameToStateDic[stateName] = statePlugin
    statePlugin:DoInitilize(self)
end

function FSMMatchineSystem:UnregisterState(stateName)
    self.nameToStateDic[stateName] = nil
end

function FSMMatchineSystem:GetGroup()
    local matcher = HaveComponentMatcher(FSMStateComponent)
    return self.context:CreateGroup(matcher)
end

function FSMMatchineSystem:onEntityUpdate(entity)
    local stateComponent = entity:GetComponentByClass(FSMStateComponent)
    
    local currentStateName = stateComponent:GetCurrentStateName()
    local nextStateName = stateComponent:GetNextStateName();


end

function FSMMatchineSystem:PerformTransitionTo(entity)

end

return FSMMatchineSystem
