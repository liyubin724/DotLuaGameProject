local oop = require('DotLua/OOP/oop')
local System = require('DotLua/ECS/Systems/System')
local SystemFuncNames = oop.using('DotLua/ECS/Systems/SystemFuncNames')

local CycleTime = require('DotLua/CycleTime')

local tinsert = table.insert
local tremovevalue = table.removevalue
local tclear = table.clear
local tforeach = table.foreach

local LogTag = 'SystemMgr'

local SystemManager =
    oop.class(
    'DotLua.ECS.Systems.System',
    function(self)
        self.isRunning = false

        self.systems = {}

        self.updateSystems = {}
        self.lateUpdateSystems = {}
        self.frameUpdateSystems = {}
    end
)

function SystemManager:GetSystemByClass(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'the param is not a subclass of System')
            return
        end
    end

    for _, system in ipairs(self.systems) do
        if system:GetClass() == systemClass then
            return system
        end
    end

    return nil
end

function SystemManager:AddSystemByClass(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'the param is not a subclass of System')
            return
        end
    end

    local system = systemClass()
    tinsert(self.systems, system)

    if system[SystemFuncNames.FUNC_UPDATE] then
        tinsert(self.updateSystems, system)
    end

    if system[SystemFuncNames.FUNC_LATEUPDATE] then
        tinsert(self.lateUpdateSystems, system)
    end

    if system[SystemFuncNames.FUNC_FRAMEUPDATE] then
        tinsert(self.frameUpdateSystems, system)
    end

    if self.isRunning then
        system:DoActivate()
    end
end

function SystemManager:RemoveSystemByClass(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'the param is not a subclass of System')
            return
        end
    end

    local system = self:GetSystemByClass(systemClass)
    if not system then
        oop.error(LogTag, 'the system is not found by the class')
        return
    end

    tremovevalue(self.systems, system)
    if system[SystemFuncNames.FUNC_UPDATE] then
        tremovevalue(self.updateSystems, system)
    end

    if system[SystemFuncNames.FUNC_LATEUPDATE] then
        tremovevalue(self.lateUpdateSystems, system)
    end

    if system[SystemFuncNames.FUNC_FRAMEUPDATE] then
        tremovevalue(self.frameUpdateSystems, system)
    end

    if self.isRunning then
        system:DoDeactivate()
    end
end

function SystemManager:Startup()
    self.isRunning = true

    tforeach(
        self.systems,
        function(system)
            system:DoActivate()
        end
    )
end

function SystemManager:Update(deltaTime, unscaleDeltaTime)
    if self.isRunning then
        tforeach(
            self.updateSystems,
            function(system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function SystemManager:LateUpdate(deltaTime, unscaleDeltaTime)
    if self.isRunning then
        tforeach(
            self.lateUpdateSystems,
            function(system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function SystemManager:FrameUpdate(deltaTime)
    if self.isRunning then
        tforeach(
            self.frameUpdateSystems,
            function(system)
                system:DoUpdate(deltaTime)
            end
        )
    end
end

function SystemManager:Teardown()
    self.isRunning = false

    tforeach(
        self.systems,
        function(system)
            system:DoDeactivate()
        end
    )
end

return SystemManager
