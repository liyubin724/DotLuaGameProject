local oop = require('DotLua/OOP/oop')
local System = require('DotLua/ECS/Systems/System')
local SystemFuncNames = oop.using('DotLua/ECS/Systems/SystemFuncNames')

local tinsert = table.insert
local tremove = table.remove
local tremovevalue = table.removevalue
local tforeach = table.foreach
local tclear = table.clear

local LogTag = 'SystemMgr'

local SystemManager =
    oop.class(
    'DotLua.ECS.Systems.System',
    function(self)
        self.isRunning = false

        self.systems = {}
        self.systemClassToIndexDic = {}

        self.updateSystems = {}
        self.lateUpdateSystems = {}
        self.frameUpdateSystems = {}
    end
)

function SystemManager:HasSystemByClass(systemClass)
    return self.systemClassToIndexDic[systemClass] ~= nil
end

function SystemManager:GetSystemByClass(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'the param is not a subclass of System')
            return
        end
    end

    local systemIndex = self.systemClassToIndexDic[systemClass]
    if not systemIndex or type(systemIndex) ~= 'number' then
        oop.warning(LogTag, 'the system is not found by the class')
        return nil
    end

    if systemIndex <= 0 or systemIndex > #self.systems then
        oop.warning(LogTag, 'the system is not found by the class')
        return nil
    end

    return self.systems[systemIndex]
end

function SystemManager:AddSystemByClass(systemClass)
    local system = self:GetSystemByClass(systemClass)
    if system then
        oop.warning(LogTag, 'the system has been added')
        return system
    end

    system = systemClass()

    tinsert(self.systems, system)
    self.systemClassToIndexDic[systemClass] = #self.systems

    if system[SystemFuncNames.FUNC_UPDATE] then
        tinsert(self.updateSystems, system)
    end

    if system[SystemFuncNames.FUNC_LATEUPDATE] then
        tinsert(self.lateUpdateSystems, system)
    end

    if system[SystemFuncNames.FUNC_FRAMEUPDATE] then
        tinsert(self.frameUpdateSystems, system)
    end

    if self.isRunning then
        system:DoActivate()
    end
end

function SystemManager:RemoveSystemByClass(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'the param is not a subclass of System')
            return
        end
    end

    local systemIndex = self.systemClassToIndexDic[systemClass]
    if not systemIndex or type(systemIndex) ~= 'number' then
        oop.warning(LogTag, 'the system is not found by the class')
        return nil
    end

    if systemIndex <= 0 or systemIndex > #self.systems then
        oop.error(LogTag, 'the index of system is error')
        return nil
    end

    local system = self.systems[systemIndex]
    tremove(self.systems, systemIndex)

    if system[SystemFuncNames.FUNC_UPDATE] then
        tremovevalue(self.updateSystems, system)
    end

    if system[SystemFuncNames.FUNC_LATEUPDATE] then
        tremovevalue(self.lateUpdateSystems, system)
    end

    if system[SystemFuncNames.FUNC_FRAMEUPDATE] then
        tremovevalue(self.frameUpdateSystems, system)
    end

    if self.isRunning then
        system:DoDeactivate()
    end
end

function SystemManager:Startup()
    self.isRunning = true

    tforeach(
        self.systems,
        function(_, system)
            system:DoActivate()
        end
    )
end

function SystemManager:Update(deltaTime, unscaleDeltaTime)
    if self.isRunning then
        tforeach(
            self.updateSystems,
            function(_, system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function SystemManager:LateUpdate(deltaTime, unscaleDeltaTime)
    if self.isRunning then
        tforeach(
            self.lateUpdateSystems,
            function(_, system)
                system:DoLateUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function SystemManager:FrameUpdate(deltaTime)
    if self.isRunning then
        tforeach(
            self.frameUpdateSystems,
            function(_, system)
                system:DoFrameUpdate(deltaTime)
            end
        )
    end
end

function SystemManager:Teardown()
    if self.isRunning then
        self.isRunning = false

        tforeach(
            self.systems,
            function(_, system)
                system:DoDeactivate()
            end
        )
    end
end

function SystemManager:Destroy()
    if self.isRunning then
        self:Teardown()
    end

    self.isRunning = false

    tclear(self.systems)
    tclear(self.updateSystems)
    tclear(self.lateUpdateSystems)
    tclear(self.frameUpdateSystems)
    tclear(self.systemClassToIndexDic)
end

return SystemManager
