local oop = require('DotLua/ECS/OOP/oop')
local TimeUpdateSystem = require('DotLua/ECS/Systems/Update/TimeUpdateSystem')

local LogTag = 'GroupTimeUpdateSystem'
local tinsert = table.insert
local tclear = table.clear

local GroupTimeUpdateSystem =
    oop.class(
    'DotLua.ECS.Systems.Groups.GroupTimeUpdateSystem',
    function(self, frequencyInTime, context)
        self.context = context
        self.group = self:GetGroup()

        self.cachedEntities = {}
    end,
    TimeUpdateSystem
)

function GroupTimeUpdateSystem:onTimeUpdate(deltaTime)
    if not self.group then
        return
    end

    local entities = self.group:GetEntities()
    if entities and #entities > 0 then
        for _, entity in ipairs(entities) do
            if self:Filter(entity) then
                tinsert(self.cachedEntities, entity)
            end
        end

        for _, entity in ipairs(self.cachedEntities) do
            self:onEntityUpdate(entity)
        end
        tclear(self.cachedEntities)
    end
end

function GroupTimeUpdateSystem:GetGroup()
    return nil
end

function GroupTimeUpdateSystem:Filter(entity)
    return true
end

function GroupTimeUpdateSystem:onEntityUpdate(entity)
    oop.error(LogTag, 'this is a abstract class')
end

return GroupTimeUpdateSystem
