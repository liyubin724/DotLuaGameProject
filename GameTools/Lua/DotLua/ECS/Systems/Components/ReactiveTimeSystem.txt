local oop = require('DotLua/OOP/oop')
local TimeUpdateSystem = require('Dotlua/ECS/Systems/Update/TimeUpdateSystem')

local LogTag = 'ReactiveTimeSystem'

local tinsert = table.insert
local tclear = table.clear

local ReactiveTimeSystem =
    oop.class(
    'DotLua.ECS.Systems.Components.ReactiveTimeSystem',
function(self, frequencyInTime, context)
        self.collector = self:GetTrigger(context)

        self.cachedEntities = {}
    end,
    TimeUpdateSystem
)

function ReactiveTimeSystem:onActivate()
    if self.collector then
        self.collector:Activate()
    end
end

function ReactiveTimeSystem:onDeactivate()
    if self.collector then
        self.collector:Deactivate()
    end
end

function ReactiveTimeSystem:onTimeUpdate(deltaTime)
    if not self.collector then
        return
    end

    local collectedEnities = self.collector:GetCollectedEntities()
    if collectedEnities and #collectedEnities > 0 then
        for _, entity in ipairs(collectedEnities) do
            if self:Filter(entity) then
                tinsert(self.cachedEntities,entity)
            end
        end
        self.collector:ClearCollectedEnities()

        for _, entity in ipairs(self.cachedEntities) do
            self:onEntityUpdate(entity)
        end
        tclear(self.cachedEntities)
    end
end

function ReactiveTimeSystem:GetTrigger(context)
    return nil
end

function ReactiveTimeSystem:Filter(entity)
    return true
end

function ReactiveTimeSystem:onEntityUpdate(entity)
    oop.error(LogTag, 'this is a abstract class')
end

return ReactiveTimeSystem
