local oop = require('DotLua/OOP/oop')
local TimeUpdateSystem = oop.using('Dotlua/ECS/Systems/Update/TimeUpdateSystem')

local LogTag = 'ReactiveTimeSystem'

local ReactiveTimeSystem =
    oop.class(
    'DotLua.ECS.Systems.Components.ReactiveTimeSystem',
    function(self, context, frequencyInTime)
        self.collector = self:GetTrigger(context)

        self:SetFrequency(frequencyInTime)
    end,
    TimeUpdateSystem
)

function ReactiveTimeSystem:onActivate()
    if self.collector then
        self.collector:Activate()
    end
end

function ReactiveTimeSystem:onDeactivate()
    if self.collector then
        self.collector:Deactivate()
    end
end

function ReactiveTimeSystem:onTimeUpdate(deltaTime)
    if not self.collector then
        return
    end

    local addedEntities = self.collector:GetCollecteAddedDatas()
    if addedEntities and #addedEntities > 0 then
        for _, entity in ipairs(addedEntities) do
            if self:Filter(entity) then
                self:onEntityAddedUpdate(deltaTime, entity)
            end
        end
    end

    local removedEntities = self.collector:GetCollecteRemovedDatas()
    if removedEntities and #removedEntities > 0 then
        for _, entity in ipairs(removedEntities) do
            if self:Filter(entity) then
                self:onEntityRemovedUpdate(deltaTime, entity)
            end
        end
    end

    self.collector:ClearCollecteDatas()
end

function ReactiveTimeSystem:GetTrigger(context)
    return nil
end

function ReactiveTimeSystem:Filter(entity)
    return true
end

function ReactiveTimeSystem:onEntityAddedUpdate(deltaTime, entity)
    oop.error(LogTag, 'this is a abstract class')
end

function ReactiveTimeSystem:onEntityRemovedUpdate(deltaTime, entity)
    oop.error(LogTag, 'this is a abstract class')
end

return ReactiveTimeSystem
