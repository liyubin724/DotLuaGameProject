local oop = require('DotLua/OOP/oop')
local FrameUpdateSystem = oop.using('Dotlua/ECS/Systems/Update/FrameUpdateSystem')
local Collector = oop.using('DotLua/ECS/Collectors/Collector')

local LogTag = 'ReactiveFrameSystem'

local ReactiveFrameSystem =
    oop.class(
    'DotLua.ECS.Systems.Components.ReactiveFrameSystem',
    function(self, group, groupEvents, frequencyInFrame)
        self.collector = Collector(group, groupEvents)

        self:SetFrequency(frequencyInFrame)
    end,
    FrameUpdateSystem
)

function ReactiveFrameSystem:onActivate()
    self.collector:Activate()
end

function ReactiveFrameSystem:onDeactivate()
    self.collector:Deactivate()
end

function ReactiveFrameSystem:onFrameUpdate(deltaTime)
    local entities = self.collector:GetCollectedEntities()

    if entities and #entities > 0 then
        for _, entity in ipairs(entities) do
            self:onEntityUpdate(entity, deltaTime)
        end
    end

    self.collector:ClearCollectedEntities()
end

function ReactiveFrameSystem:onEntityUpdate(entity, deltaTime)
    oop.error(LogTag, 'this is a abstract class')
end

return ReactiveFrameSystem
