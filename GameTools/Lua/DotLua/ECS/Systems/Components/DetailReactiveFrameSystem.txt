local oop = require('DotLua/OOP/oop')
local FrameUpdateSystem = oop.using('Dotlua/ECS/Systems/Update/FrameUpdateSystem')
local DetailCollector = oop.using('DotLua/ECS/Collectors/DetailCollector')

local LogTag = 'ReactiveFrameSystem'

local DetailReactiveFrameSystem =
    oop.class(
    'DotLua.ECS.Systems.Components.DetailReactiveFrameSystem',
    function(self, group, groupEvents, frequencyInFrame)
        self.detailCollector = DetailCollector(group, groupEvents)

        self:SetFrequency(frequencyInFrame)
    end,
    FrameUpdateSystem
)

function DetailReactiveFrameSystem:onActivate()
    self.collector:Activate()
end

function DetailReactiveFrameSystem:onDeactivate()
    self.collector:Deactivate()
end

function DetailReactiveFrameSystem:onFrameUpdate(deltaTime)
    local addedEntities = self.detailCollector:GetAddedEntities()
    if addedEntities and #(addedEntities) > 0 then
        for _, data in ipairs(addedEntities) do
            self:onEntityAdded(data, deltaTime)
        end
    end

    local removedEntities = self.detailCollector:GetRemovedEntities()
    if removedEntities and #(removedEntities) > 0 then
        for _, data in ipairs(removedEntities) do
            self:onEntityRemoved(data, deltaTime)
        end
    end

    local modifiedEntities = self.detailCollector:GetModifiedEntities()
    if modifiedEntities and #(modifiedEntities) > 0 then
        for _, data in ipairs(modifiedEntities) do
            self:onEnityModified(data, deltaTime)
        end
    end
end

function DetailReactiveFrameSystem:onEntityAdded(detailData, deltaTime)
    oop.error(LogTag, 'this is a abstract class')
end

function DetailReactiveFrameSystem:onEntityRemoved(detailData, deltaTime)
    oop.error(LogTag, 'this is a abstract class')
end

function DetailReactiveFrameSystem:onEnityModified(detailData, deltaTime)
    oop.error(LogTag, 'this is a abstract class')
end

return DetailReactiveFrameSystem
