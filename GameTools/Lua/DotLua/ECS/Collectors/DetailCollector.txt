local oop = require('DotLua/OOP/oop')
local GroupEvent = oop.using('DotLua/ECS/Groups/GroupEvent')
local ObjectPool = oop.using('DotLua/Pool/ObjectPool')
local DetailCollectorData = oop.using('DotLua/ECS/Collectors/DetailCollectorData')

local tinsert = table.insert
local tremove = table.remove

local DetailCollector =
    oop.class(
    'DotLua.ECS.Collectors.DetailCollector',
    function(self, group, groupEvents)
        self.isEnable = false

        self.group = group
        self.groupEventEnableDic = {}
        if not groupEvents then
            for _, groupEvent in ipairs(groupEvents) do
                self.groupEventEnableDic[groupEvent] = true
            end
        else
            self.groupEventEnableDic[GroupEvent.EntityAdded] = true
            self.groupEventEnableDic[GroupEvent.EntityRemoved] = false
        end

        self.collectedAddedDetails = {}
        self.collectedRemovedDetails = {}

        self.detailDataPool = ObjectPool(DetailCollectorData)
    end
)

function DetailCollector:IsEnable()
    return self.isEnable
end

function DetailCollector:GetCollecteAddedDataCount()
    return #(self.collectedAddedDetails)
end

function DetailCollector:GetCollecteAddedDatas()
    return self.collectedAddedDetails
end

function DetailCollector:ClearCollecteAddedDatas()
    for i = #(self.collectedAddedDetails), 1, -1 do
        self.detailDataPool:Release(self.collectedAddedDetails[i])
        tremove(self.collectedAddedDetails, i)
    end
end

function DetailCollector:GetCollecteRemovedDataCount()
    return #(self.collectedRemovedDetails)
end


function DetailCollector:GetCollecteRemovedDatas()
    return self.collectedRemovedDetails
end


function DetailCollector:ClearCollecteRemovedDatas()
    for i = #(self.collectedRemovedDetails), 1, -1 do
        self.detailDataPool:Release(self.collectedRemovedDetails[i])
        tremove(self.collectedRemovedDetails, i)
    end
end

function DetailCollector:ClearCollecteDatas()
    self:ClearCollecteAddedDatas()
    self:ClearCollecteRemovedDatas()
end

function DetailCollector:Activate()
    if self.group and not self.isEnable then
        self.isEnable = true
        self.group:BindEvent(self, self.onGroupChanged)
    end
end

function DetailCollector:Deactivate()
    if self.group and self.isEnable then
        self.isEnable = false
        self.group:UnbindEvent(self, self.onGroupChanged)
    end
end

function DetailCollector:onGroupChanged(groupEvent, entity, contextEvent, entityEvent, param1, param2)
    if self.groupEventEnableDic[groupEvent] then
        local list
        if groupEvent == GroupEvent.EntityAdded then
            list = self.collectedAddedDetails
        elseif groupEvent == GroupEvent.EntityRemoved then
            list = self.collectedRemovedDetails
        end
        if not list then
            for _, d in ipairs(list) do
                if d:GetEntity() == entity then
                    return
                end
            end

            local data =
                self.detailEntityDataPool:GetItemWithParams(
                groupEvent,
                entity,
                contextEvent,
                entityEvent,
                param1,
                param2
            )
            tinsert(list, data)
        end
    end
end

return DetailCollector
