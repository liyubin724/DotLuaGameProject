// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gperf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gperf {

  /// <summary>Holder for reflection information generated from gperf.proto</summary>
  public static partial class GperfReflection {

    #region Descriptor
    /// <summary>File descriptor for gperf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GperfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtncGVyZi5wcm90bxIFZ3BlcmYifwoLR1BlcmZEZXZpY2USCgoCaWQYASAB",
            "KAkSDgoGdmVuZG9yGAIgASgJEg0KBW1vZGVsGAMgASgJEgoKAm9zGAQgASgJ",
            "EgsKA2NwdRgFIAEoCRILCgNncHUYBiABKAkSDgoGbWVtb3J5GAcgASgFEg8K",
            "B3Byb2ZpbGUYCCABKAkiTwoIR1BlcmZBcHASCgoCaWQYASABKAkSDwoHdmVy",
            "c2lvbhgCIAEoCRIOCgZlbmdpbmUYAyABKAkSFgoOZW5naW5lX3ZlcnNpb24Y",
            "BCABKAkiOwoMR1BlcmZOZXR3b3JrEhQKDHVlNF9pbl9ieXRlcxgBIAEoBxIV",
            "Cg11ZTRfb3V0X2J5dGVzGAIgASgHIjkKCVRyYW5zZm9ybRIJCgF4GAEgASgF",
            "EgkKAXkYAiABKAUSCQoBehgDIAEoBRILCgN5YXcYBCABKAUiPwoHQmF0dGVy",
            "eRINCgVwb3dlchgBIAEoBRIQCghjaGFyZ2luZxgCIAEoBRITCgt0ZW1wZXJh",
            "dHVyZRgDIAEoAiKDAwoLR1BlcmZTYW1wbGUSEQoJdGltZXN0YW1wGAEgASgH",
            "EgsKA2ZwcxgCIAEoAhITCgtjcHVfcGVyY2VudBgDIAEoAhIPCgdjcHVfbWh6",
            "GAQgASgCEhgKEGNwdV9taHpfcGVyX2NvcmUYCCADKAISEgoKbWVtX3Bzc19r",
            "YhgFIAEoAhIjCgl0cmFuc2Zvcm0YBiABKAsyEC5ncGVyZi5UcmFuc2Zvcm0S",
            "FQoNZnJhbWVfdGltZV9tcxgJIAEoAhIUCgxnYW1lX3RpbWVfbXMYCiABKAIS",
            "FAoMZHJhd190aW1lX21zGAsgASgCEhQKDHJoaXRfdGltZV9tcxgMIAEoAhIR",
            "CglkcmF3X2NhbGwYDSABKAISEQoJdHJpYW5nbGVzGA4gASgCEhIKCmV4dGVu",
            "c2lvbnMYDyADKAISEAoIbG9jYXRpb24YECABKAkSHwoHYmF0dGVyeRgHIAEo",
            "CzIOLmdwZXJmLkJhdHRlcnkSFQoNZnJhbWVfY291bnRlchgRIAEoBSL1AQoM",
            "R1BlcmZTZXNzaW9uEiIKBmRldmljZRgBIAEoCzISLmdwZXJmLkdQZXJmRGV2",
            "aWNlEhwKA2FwcBgCIAEoCzIPLmdwZXJmLkdQZXJmQXBwEiQKB25ldHdvcmsY",
            "BSABKAsyEy5ncGVyZi5HUGVyZk5ldHdvcmsSIwoHc2FtcGxlcxgDIAMoCzIS",
            "LmdwZXJmLkdQZXJmU2FtcGxlEisKBHRhZ3MYBCADKAsyHS5ncGVyZi5HUGVy",
            "ZlNlc3Npb24uVGFnc0VudHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBImIKDFNlcnZlckRldmljZRIKCgJpZBgBIAEo",
            "CRIOCgZ2ZW5kb3IYAiABKAkSDQoFbW9kZWwYAyABKAkSCgoCb3MYBCABKAkS",
            "CwoDY3B1GAUgASgJEg4KBm1lbW9yeRgGIAEoBSJkCglTZXJ2ZXJBcHASCgoC",
            "aWQYASABKAkSDwoHdmVyc2lvbhgCIAEoCRIOCgZlbmdpbmUYAyABKAkSFgoO",
            "ZW5naW5lX3ZlcnNpb24YBCABKAkSEgoKcHJvY2Vzc19pZBgFIAEoBSI8Cg1T",
            "ZXJ2ZXJOZXR3b3JrEhQKDHVlNF9pbl9ieXRlcxgBIAEoBxIVCg11ZTRfb3V0",
            "X2J5dGVzGAIgASgHItMBCgxTZXJ2ZXJTYW1wbGUSEQoJdGltZXN0YW1wGAEg",
            "ASgHEgsKA2ZwcxgIIAEoAhITCgtjcHVfcGVyY2VudBgCIAEoAhISCgptZW1f",
            "cHNzX2tiGAMgASgCEhUKDWZyYW1lX3RpbWVfbXMYBCABKAISFgoOcGxheWVy",
            "c19hY3RpdmUYBSABKAUSEgoKcGxheWVyc19vYhgGIAEoBRIMCgRib3RzGAcg",
            "ASgFEhIKCmV4dGVuc2lvbnMYDyADKAISFQoNZnJhbWVfY291bnRlchgJIAEo",
            "BSL7AQoNU2VydmVyU2Vzc2lvbhIjCgZkZXZpY2UYASABKAsyEy5ncGVyZi5T",
            "ZXJ2ZXJEZXZpY2USHQoDYXBwGAIgASgLMhAuZ3BlcmYuU2VydmVyQXBwEiUK",
            "B25ldHdvcmsYBSABKAsyFC5ncGVyZi5TZXJ2ZXJOZXR3b3JrEiQKB3NhbXBs",
            "ZXMYAyADKAsyEy5ncGVyZi5TZXJ2ZXJTYW1wbGUSLAoEdGFncxgEIAMoCzIe",
            "LmdwZXJmLlNlcnZlclNlc3Npb24uVGFnc0VudHJ5GisKCVRhZ3NFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBQi4KGGNvbS5zZWFzdW5n",
            "YW1lcy5ncGVyZi5wYkILR1BlcmZQcm90b3NIAVAA+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.GPerfDevice), global::Gperf.GPerfDevice.Parser, new[]{ "Id", "Vendor", "Model", "Os", "Cpu", "Gpu", "Memory", "Profile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.GPerfApp), global::Gperf.GPerfApp.Parser, new[]{ "Id", "Version", "Engine", "EngineVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.GPerfNetwork), global::Gperf.GPerfNetwork.Parser, new[]{ "Ue4InBytes", "Ue4OutBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.Transform), global::Gperf.Transform.Parser, new[]{ "X", "Y", "Z", "Yaw" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.Battery), global::Gperf.Battery.Parser, new[]{ "Power", "Charging", "Temperature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.GPerfSample), global::Gperf.GPerfSample.Parser, new[]{ "Timestamp", "Fps", "CpuPercent", "CpuMhz", "CpuMhzPerCore", "MemPssKb", "Transform", "FrameTimeMs", "GameTimeMs", "DrawTimeMs", "RhitTimeMs", "DrawCall", "Triangles", "Extensions", "Location", "Battery", "FrameCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.GPerfSession), global::Gperf.GPerfSession.Parser, new[]{ "Device", "App", "Network", "Samples", "Tags" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.ServerDevice), global::Gperf.ServerDevice.Parser, new[]{ "Id", "Vendor", "Model", "Os", "Cpu", "Memory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.ServerApp), global::Gperf.ServerApp.Parser, new[]{ "Id", "Version", "Engine", "EngineVersion", "ProcessId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.ServerNetwork), global::Gperf.ServerNetwork.Parser, new[]{ "Ue4InBytes", "Ue4OutBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.ServerSample), global::Gperf.ServerSample.Parser, new[]{ "Timestamp", "Fps", "CpuPercent", "MemPssKb", "FrameTimeMs", "PlayersActive", "PlayersOb", "Bots", "Extensions", "FrameCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.ServerSession), global::Gperf.ServerSession.Parser, new[]{ "Device", "App", "Network", "Samples", "Tags" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Informations of a device
  /// </summary>
  public sealed partial class GPerfDevice : pb::IMessage<GPerfDevice> {
    private static readonly pb::MessageParser<GPerfDevice> _parser = new pb::MessageParser<GPerfDevice>(() => new GPerfDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice(GPerfDevice other) : this() {
      id_ = other.id_;
      vendor_ = other.vendor_;
      model_ = other.model_;
      os_ = other.os_;
      cpu_ = other.cpu_;
      gpu_ = other.gpu_;
      memory_ = other.memory_;
      profile_ = other.profile_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice Clone() {
      return new GPerfDevice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// a242e384-908c-49bc-9ca1-a825386672ca
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 2;
    private string vendor_ = "";
    /// <summary>
    /// Apple
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vendor {
      get { return vendor_; }
      set {
        vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 3;
    private string model_ = "";
    /// <summary>
    /// iPhone 6S Plus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 4;
    private string os_ = "";
    /// <summary>
    /// iOS 13.1.3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 5;
    private string cpu_ = "";
    /// <summary>
    /// Apple A9
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cpu {
      get { return cpu_; }
      set {
        cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gpu" field.</summary>
    public const int GpuFieldNumber = 6;
    private string gpu_ = "";
    /// <summary>
    /// PowerVR GT7600
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gpu {
      get { return gpu_; }
      set {
        gpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 7;
    private int memory_;
    /// <summary>
    /// 2048 (MB)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 8;
    private string profile_ = "";
    /// <summary>
    /// DeviceProfile (IOS_High)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Vendor != other.Vendor) return false;
      if (Model != other.Model) return false;
      if (Os != other.Os) return false;
      if (Cpu != other.Cpu) return false;
      if (Gpu != other.Gpu) return false;
      if (Memory != other.Memory) return false;
      if (Profile != other.Profile) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Vendor.Length != 0) hash ^= Vendor.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Os.Length != 0) hash ^= Os.GetHashCode();
      if (Cpu.Length != 0) hash ^= Cpu.GetHashCode();
      if (Gpu.Length != 0) hash ^= Gpu.GetHashCode();
      if (Memory != 0) hash ^= Memory.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Vendor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Vendor);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Model);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Os);
      }
      if (Cpu.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cpu);
      }
      if (Gpu.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Gpu);
      }
      if (Memory != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Memory);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Vendor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Os.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (Cpu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpu);
      }
      if (Gpu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gpu);
      }
      if (Memory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Memory);
      }
      if (Profile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Vendor.Length != 0) {
        Vendor = other.Vendor;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Os.Length != 0) {
        Os = other.Os;
      }
      if (other.Cpu.Length != 0) {
        Cpu = other.Cpu;
      }
      if (other.Gpu.Length != 0) {
        Gpu = other.Gpu;
      }
      if (other.Memory != 0) {
        Memory = other.Memory;
      }
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Vendor = input.ReadString();
            break;
          }
          case 26: {
            Model = input.ReadString();
            break;
          }
          case 34: {
            Os = input.ReadString();
            break;
          }
          case 42: {
            Cpu = input.ReadString();
            break;
          }
          case 50: {
            Gpu = input.ReadString();
            break;
          }
          case 56: {
            Memory = input.ReadInt32();
            break;
          }
          case 66: {
            Profile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of an app from which data are generated
  /// </summary>
  public sealed partial class GPerfApp : pb::IMessage<GPerfApp> {
    private static readonly pb::MessageParser<GPerfApp> _parser = new pb::MessageParser<GPerfApp>(() => new GPerfApp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfApp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp(GPerfApp other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      engine_ = other.engine_;
      engineVersion_ = other.engineVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp Clone() {
      return new GPerfApp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// com.YourCompany.Pirates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// 0.0.5917+5917
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 3;
    private string engine_ = "";
    /// <summary>
    /// UE4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Engine {
      get { return engine_; }
      set {
        engine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine_version" field.</summary>
    public const int EngineVersionFieldNumber = 4;
    private string engineVersion_ = "";
    /// <summary>
    /// 4.21.2-0+++UE4+Release-4.21
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EngineVersion {
      get { return engineVersion_; }
      set {
        engineVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfApp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfApp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Engine != other.Engine) return false;
      if (EngineVersion != other.EngineVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Engine.Length != 0) hash ^= Engine.GetHashCode();
      if (EngineVersion.Length != 0) hash ^= EngineVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Engine.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Engine);
      }
      if (EngineVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EngineVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Engine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Engine);
      }
      if (EngineVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EngineVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfApp other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Engine.Length != 0) {
        Engine = other.Engine;
      }
      if (other.EngineVersion.Length != 0) {
        EngineVersion = other.EngineVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Engine = input.ReadString();
            break;
          }
          case 34: {
            EngineVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of client network: traffic, bandwidth, ISP, ...
  /// </summary>
  public sealed partial class GPerfNetwork : pb::IMessage<GPerfNetwork> {
    private static readonly pb::MessageParser<GPerfNetwork> _parser = new pb::MessageParser<GPerfNetwork>(() => new GPerfNetwork());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfNetwork> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfNetwork() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfNetwork(GPerfNetwork other) : this() {
      ue4InBytes_ = other.ue4InBytes_;
      ue4OutBytes_ = other.ue4OutBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfNetwork Clone() {
      return new GPerfNetwork(this);
    }

    /// <summary>Field number for the "ue4_in_bytes" field.</summary>
    public const int Ue4InBytesFieldNumber = 1;
    private uint ue4InBytes_;
    /// <summary>
    /// Total bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ue4InBytes {
      get { return ue4InBytes_; }
      set {
        ue4InBytes_ = value;
      }
    }

    /// <summary>Field number for the "ue4_out_bytes" field.</summary>
    public const int Ue4OutBytesFieldNumber = 2;
    private uint ue4OutBytes_;
    /// <summary>
    /// Total bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ue4OutBytes {
      get { return ue4OutBytes_; }
      set {
        ue4OutBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfNetwork);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfNetwork other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ue4InBytes != other.Ue4InBytes) return false;
      if (Ue4OutBytes != other.Ue4OutBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ue4InBytes != 0) hash ^= Ue4InBytes.GetHashCode();
      if (Ue4OutBytes != 0) hash ^= Ue4OutBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ue4InBytes != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Ue4InBytes);
      }
      if (Ue4OutBytes != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Ue4OutBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ue4InBytes != 0) {
        size += 1 + 4;
      }
      if (Ue4OutBytes != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfNetwork other) {
      if (other == null) {
        return;
      }
      if (other.Ue4InBytes != 0) {
        Ue4InBytes = other.Ue4InBytes;
      }
      if (other.Ue4OutBytes != 0) {
        Ue4OutBytes = other.Ue4OutBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Ue4InBytes = input.ReadFixed32();
            break;
          }
          case 21: {
            Ue4OutBytes = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of player transform
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private int yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Yaw != other.Yaw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (Yaw != 0) hash ^= Yaw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (Yaw != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (Yaw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Yaw);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.Yaw != 0) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            Yaw = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of phone battery
  /// </summary>
  public sealed partial class Battery : pb::IMessage<Battery> {
    private static readonly pb::MessageParser<Battery> _parser = new pb::MessageParser<Battery>(() => new Battery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Battery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery(Battery other) : this() {
      power_ = other.power_;
      charging_ = other.charging_;
      temperature_ = other.temperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Battery Clone() {
      return new Battery(this);
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "charging" field.</summary>
    public const int ChargingFieldNumber = 2;
    private int charging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Charging {
      get { return charging_; }
      set {
        charging_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 3;
    private float temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Battery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Battery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Power != other.Power) return false;
      if (Charging != other.Charging) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Charging != 0) hash ^= Charging.GetHashCode();
      if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Power);
      }
      if (Charging != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Charging);
      }
      if (Temperature != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Charging != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Charging);
      }
      if (Temperature != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Battery other) {
      if (other == null) {
        return;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Charging != 0) {
        Charging = other.Charging;
      }
      if (other.Temperature != 0F) {
        Temperature = other.Temperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Power = input.ReadInt32();
            break;
          }
          case 16: {
            Charging = input.ReadInt32();
            break;
          }
          case 29: {
            Temperature = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents single sample of a time series
  /// </summary>
  public sealed partial class GPerfSample : pb::IMessage<GPerfSample> {
    private static readonly pb::MessageParser<GPerfSample> _parser = new pb::MessageParser<GPerfSample>(() => new GPerfSample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample(GPerfSample other) : this() {
      timestamp_ = other.timestamp_;
      fps_ = other.fps_;
      cpuPercent_ = other.cpuPercent_;
      cpuMhz_ = other.cpuMhz_;
      cpuMhzPerCore_ = other.cpuMhzPerCore_.Clone();
      memPssKb_ = other.memPssKb_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      frameTimeMs_ = other.frameTimeMs_;
      gameTimeMs_ = other.gameTimeMs_;
      drawTimeMs_ = other.drawTimeMs_;
      rhitTimeMs_ = other.rhitTimeMs_;
      drawCall_ = other.drawCall_;
      triangles_ = other.triangles_;
      extensions_ = other.extensions_.Clone();
      location_ = other.location_;
      battery_ = other.battery_ != null ? other.battery_.Clone() : null;
      frameCounter_ = other.frameCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample Clone() {
      return new GPerfSample(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    /// Unix-time in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 2;
    private float fps_;
    /// <summary>
    /// Frames per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "cpu_percent" field.</summary>
    public const int CpuPercentFieldNumber = 3;
    private float cpuPercent_;
    /// <summary>
    /// CPU utilization in percentage (0-100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpuPercent {
      get { return cpuPercent_; }
      set {
        cpuPercent_ = value;
      }
    }

    /// <summary>Field number for the "cpu_mhz" field.</summary>
    public const int CpuMhzFieldNumber = 4;
    private float cpuMhz_;
    /// <summary>
    /// CPU frequency in MHz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpuMhz {
      get { return cpuMhz_; }
      set {
        cpuMhz_ = value;
      }
    }

    /// <summary>Field number for the "cpu_mhz_per_core" field.</summary>
    public const int CpuMhzPerCoreFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_cpuMhzPerCore_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> cpuMhzPerCore_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Each cpu core frequency in MHz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CpuMhzPerCore {
      get { return cpuMhzPerCore_; }
    }

    /// <summary>Field number for the "mem_pss_kb" field.</summary>
    public const int MemPssKbFieldNumber = 5;
    private float memPssKb_;
    /// <summary>
    /// PSS memory usage in KB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MemPssKb {
      get { return memPssKb_; }
      set {
        memPssKb_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 6;
    private global::Gperf.Transform transform_;
    /// <summary>
    /// Player transform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "frame_time_ms" field.</summary>
    public const int FrameTimeMsFieldNumber = 9;
    private float frameTimeMs_;
    /// <summary>
    /// Total time of a frame in Milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrameTimeMs {
      get { return frameTimeMs_; }
      set {
        frameTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "game_time_ms" field.</summary>
    public const int GameTimeMsFieldNumber = 10;
    private float gameTimeMs_;
    /// <summary>
    /// Game time of a frame in Milliseconds (Game Thread)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTimeMs {
      get { return gameTimeMs_; }
      set {
        gameTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "draw_time_ms" field.</summary>
    public const int DrawTimeMsFieldNumber = 11;
    private float drawTimeMs_;
    /// <summary>
    /// Draw time of a frame in Milliseconds (Render Thread)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DrawTimeMs {
      get { return drawTimeMs_; }
      set {
        drawTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "rhit_time_ms" field.</summary>
    public const int RhitTimeMsFieldNumber = 12;
    private float rhitTimeMs_;
    /// <summary>
    /// RHIT time of a frame in Milliseconds (RHI Thread)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RhitTimeMs {
      get { return rhitTimeMs_; }
      set {
        rhitTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "draw_call" field.</summary>
    public const int DrawCallFieldNumber = 13;
    private float drawCall_;
    /// <summary>
    /// Total number of draw calls of a frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DrawCall {
      get { return drawCall_; }
      set {
        drawCall_ = value;
      }
    }

    /// <summary>Field number for the "triangles" field.</summary>
    public const int TrianglesFieldNumber = 14;
    private float triangles_;
    /// <summary>
    /// Total number of triangles in a frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Triangles {
      get { return triangles_; }
      set {
        triangles_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_extensions_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> extensions_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// User-defined metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 16;
    private string location_ = "";
    /// <summary>
    /// Human-readable string of client location in a map. Example: 皇家港/海军基地/隐秘森林
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 7;
    private global::Gperf.Battery battery_;
    /// <summary>
    /// Phone battery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.Battery Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "frame_counter" field.</summary>
    public const int FrameCounterFieldNumber = 17;
    private int frameCounter_;
    /// <summary>
    /// UE frame counter mod by 1000 (The index number of the user view the logs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameCounter {
      get { return frameCounter_; }
      set {
        frameCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fps, other.Fps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuPercent, other.CpuPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuMhz, other.CpuMhz)) return false;
      if(!cpuMhzPerCore_.Equals(other.cpuMhzPerCore_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemPssKb, other.MemPssKb)) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameTimeMs, other.FrameTimeMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTimeMs, other.GameTimeMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DrawTimeMs, other.DrawTimeMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RhitTimeMs, other.RhitTimeMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DrawCall, other.DrawCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Triangles, other.Triangles)) return false;
      if(!extensions_.Equals(other.extensions_)) return false;
      if (Location != other.Location) return false;
      if (!object.Equals(Battery, other.Battery)) return false;
      if (FrameCounter != other.FrameCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Fps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fps);
      if (CpuPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuPercent);
      if (CpuMhz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuMhz);
      hash ^= cpuMhzPerCore_.GetHashCode();
      if (MemPssKb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemPssKb);
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (FrameTimeMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameTimeMs);
      if (GameTimeMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTimeMs);
      if (DrawTimeMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DrawTimeMs);
      if (RhitTimeMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RhitTimeMs);
      if (DrawCall != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DrawCall);
      if (Triangles != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Triangles);
      hash ^= extensions_.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (battery_ != null) hash ^= Battery.GetHashCode();
      if (FrameCounter != 0) hash ^= FrameCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Timestamp);
      }
      if (Fps != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Fps);
      }
      if (CpuPercent != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CpuPercent);
      }
      if (CpuMhz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CpuMhz);
      }
      if (MemPssKb != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MemPssKb);
      }
      if (transform_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Transform);
      }
      if (battery_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Battery);
      }
      cpuMhzPerCore_.WriteTo(output, _repeated_cpuMhzPerCore_codec);
      if (FrameTimeMs != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FrameTimeMs);
      }
      if (GameTimeMs != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(GameTimeMs);
      }
      if (DrawTimeMs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DrawTimeMs);
      }
      if (RhitTimeMs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(RhitTimeMs);
      }
      if (DrawCall != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DrawCall);
      }
      if (Triangles != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Triangles);
      }
      extensions_.WriteTo(output, _repeated_extensions_codec);
      if (Location.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Location);
      }
      if (FrameCounter != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(FrameCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + 4;
      }
      if (Fps != 0F) {
        size += 1 + 4;
      }
      if (CpuPercent != 0F) {
        size += 1 + 4;
      }
      if (CpuMhz != 0F) {
        size += 1 + 4;
      }
      size += cpuMhzPerCore_.CalculateSize(_repeated_cpuMhzPerCore_codec);
      if (MemPssKb != 0F) {
        size += 1 + 4;
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (FrameTimeMs != 0F) {
        size += 1 + 4;
      }
      if (GameTimeMs != 0F) {
        size += 1 + 4;
      }
      if (DrawTimeMs != 0F) {
        size += 1 + 4;
      }
      if (RhitTimeMs != 0F) {
        size += 1 + 4;
      }
      if (DrawCall != 0F) {
        size += 1 + 4;
      }
      if (Triangles != 0F) {
        size += 1 + 4;
      }
      size += extensions_.CalculateSize(_repeated_extensions_codec);
      if (Location.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (battery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battery);
      }
      if (FrameCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrameCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSample other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Fps != 0F) {
        Fps = other.Fps;
      }
      if (other.CpuPercent != 0F) {
        CpuPercent = other.CpuPercent;
      }
      if (other.CpuMhz != 0F) {
        CpuMhz = other.CpuMhz;
      }
      cpuMhzPerCore_.Add(other.cpuMhzPerCore_);
      if (other.MemPssKb != 0F) {
        MemPssKb = other.MemPssKb;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Gperf.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.FrameTimeMs != 0F) {
        FrameTimeMs = other.FrameTimeMs;
      }
      if (other.GameTimeMs != 0F) {
        GameTimeMs = other.GameTimeMs;
      }
      if (other.DrawTimeMs != 0F) {
        DrawTimeMs = other.DrawTimeMs;
      }
      if (other.RhitTimeMs != 0F) {
        RhitTimeMs = other.RhitTimeMs;
      }
      if (other.DrawCall != 0F) {
        DrawCall = other.DrawCall;
      }
      if (other.Triangles != 0F) {
        Triangles = other.Triangles;
      }
      extensions_.Add(other.extensions_);
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.battery_ != null) {
        if (battery_ == null) {
          Battery = new global::Gperf.Battery();
        }
        Battery.MergeFrom(other.Battery);
      }
      if (other.FrameCounter != 0) {
        FrameCounter = other.FrameCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 21: {
            Fps = input.ReadFloat();
            break;
          }
          case 29: {
            CpuPercent = input.ReadFloat();
            break;
          }
          case 37: {
            CpuMhz = input.ReadFloat();
            break;
          }
          case 45: {
            MemPssKb = input.ReadFloat();
            break;
          }
          case 50: {
            if (transform_ == null) {
              Transform = new global::Gperf.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
          case 58: {
            if (battery_ == null) {
              Battery = new global::Gperf.Battery();
            }
            input.ReadMessage(Battery);
            break;
          }
          case 66:
          case 69: {
            cpuMhzPerCore_.AddEntriesFrom(input, _repeated_cpuMhzPerCore_codec);
            break;
          }
          case 77: {
            FrameTimeMs = input.ReadFloat();
            break;
          }
          case 85: {
            GameTimeMs = input.ReadFloat();
            break;
          }
          case 93: {
            DrawTimeMs = input.ReadFloat();
            break;
          }
          case 101: {
            RhitTimeMs = input.ReadFloat();
            break;
          }
          case 109: {
            DrawCall = input.ReadFloat();
            break;
          }
          case 117: {
            Triangles = input.ReadFloat();
            break;
          }
          case 122:
          case 125: {
            extensions_.AddEntriesFrom(input, _repeated_extensions_codec);
            break;
          }
          case 130: {
            Location = input.ReadString();
            break;
          }
          case 136: {
            FrameCounter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Clients send this via HTTP POST
  /// </summary>
  public sealed partial class GPerfSession : pb::IMessage<GPerfSession> {
    private static readonly pb::MessageParser<GPerfSession> _parser = new pb::MessageParser<GPerfSession>(() => new GPerfSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession(GPerfSession other) : this() {
      device_ = other.device_ != null ? other.device_.Clone() : null;
      app_ = other.app_ != null ? other.app_.Clone() : null;
      network_ = other.network_ != null ? other.network_.Clone() : null;
      samples_ = other.samples_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession Clone() {
      return new GPerfSession(this);
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private global::Gperf.GPerfDevice device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.GPerfDevice Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 2;
    private global::Gperf.GPerfApp app_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.GPerfApp App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 5;
    private global::Gperf.GPerfNetwork network_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.GPerfNetwork Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gperf.GPerfSample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(26, global::Gperf.GPerfSample.Parser);
    private readonly pbc::RepeatedField<global::Gperf.GPerfSample> samples_ = new pbc::RepeatedField<global::Gperf.GPerfSample>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gperf.GPerfSample> Samples {
      get { return samples_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional user-defined metadata, like https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Device, other.Device)) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (device_ != null) hash ^= Device.GetHashCode();
      if (app_ != null) hash ^= App.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      hash ^= samples_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (device_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Device);
      }
      if (app_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(App);
      }
      samples_.WriteTo(output, _repeated_samples_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (network_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      size += samples_.CalculateSize(_repeated_samples_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSession other) {
      if (other == null) {
        return;
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Gperf.GPerfDevice();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Gperf.GPerfApp();
        }
        App.MergeFrom(other.App);
      }
      if (other.network_ != null) {
        if (network_ == null) {
          Network = new global::Gperf.GPerfNetwork();
        }
        Network.MergeFrom(other.Network);
      }
      samples_.Add(other.samples_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (device_ == null) {
              Device = new global::Gperf.GPerfDevice();
            }
            input.ReadMessage(Device);
            break;
          }
          case 18: {
            if (app_ == null) {
              App = new global::Gperf.GPerfApp();
            }
            input.ReadMessage(App);
            break;
          }
          case 26: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 42: {
            if (network_ == null) {
              Network = new global::Gperf.GPerfNetwork();
            }
            input.ReadMessage(Network);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of a device
  /// </summary>
  public sealed partial class ServerDevice : pb::IMessage<ServerDevice> {
    private static readonly pb::MessageParser<ServerDevice> _parser = new pb::MessageParser<ServerDevice>(() => new ServerDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDevice(ServerDevice other) : this() {
      id_ = other.id_;
      vendor_ = other.vendor_;
      model_ = other.model_;
      os_ = other.os_;
      cpu_ = other.cpu_;
      memory_ = other.memory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDevice Clone() {
      return new ServerDevice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// i-075d602f392ad1dad (EC2 Instance ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 2;
    private string vendor_ = "";
    /// <summary>
    /// Amazon EC2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vendor {
      get { return vendor_; }
      set {
        vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 3;
    private string model_ = "";
    /// <summary>
    /// c5d.2xlarge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 4;
    private string os_ = "";
    /// <summary>
    /// ubuntu 18.04
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 5;
    private string cpu_ = "";
    /// <summary>
    /// Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cpu {
      get { return cpu_; }
      set {
        cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 6;
    private int memory_;
    /// <summary>
    /// 15464 (MB)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Vendor != other.Vendor) return false;
      if (Model != other.Model) return false;
      if (Os != other.Os) return false;
      if (Cpu != other.Cpu) return false;
      if (Memory != other.Memory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Vendor.Length != 0) hash ^= Vendor.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Os.Length != 0) hash ^= Os.GetHashCode();
      if (Cpu.Length != 0) hash ^= Cpu.GetHashCode();
      if (Memory != 0) hash ^= Memory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Vendor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Vendor);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Model);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Os);
      }
      if (Cpu.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cpu);
      }
      if (Memory != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Memory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Vendor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Os.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (Cpu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpu);
      }
      if (Memory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Memory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Vendor.Length != 0) {
        Vendor = other.Vendor;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Os.Length != 0) {
        Os = other.Os;
      }
      if (other.Cpu.Length != 0) {
        Cpu = other.Cpu;
      }
      if (other.Memory != 0) {
        Memory = other.Memory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Vendor = input.ReadString();
            break;
          }
          case 26: {
            Model = input.ReadString();
            break;
          }
          case 34: {
            Os = input.ReadString();
            break;
          }
          case 42: {
            Cpu = input.ReadString();
            break;
          }
          case 48: {
            Memory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Informations of an app from which data are generated
  /// </summary>
  public sealed partial class ServerApp : pb::IMessage<ServerApp> {
    private static readonly pb::MessageParser<ServerApp> _parser = new pb::MessageParser<ServerApp>(() => new ServerApp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerApp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerApp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerApp(ServerApp other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      engine_ = other.engine_;
      engineVersion_ = other.engineVersion_;
      processId_ = other.processId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerApp Clone() {
      return new ServerApp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// com.seasungames.pirates.dungeon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// master-b3660-20191231
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 3;
    private string engine_ = "";
    /// <summary>
    /// UE4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Engine {
      get { return engine_; }
      set {
        engine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine_version" field.</summary>
    public const int EngineVersionFieldNumber = 4;
    private string engineVersion_ = "";
    /// <summary>
    /// 4.21.2-0+++UE4+Release-4.21
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EngineVersion {
      get { return engineVersion_; }
      set {
        engineVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_id" field.</summary>
    public const int ProcessIdFieldNumber = 5;
    private int processId_;
    /// <summary>
    /// 23480
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerApp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerApp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Engine != other.Engine) return false;
      if (EngineVersion != other.EngineVersion) return false;
      if (ProcessId != other.ProcessId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Engine.Length != 0) hash ^= Engine.GetHashCode();
      if (EngineVersion.Length != 0) hash ^= EngineVersion.GetHashCode();
      if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Engine.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Engine);
      }
      if (EngineVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EngineVersion);
      }
      if (ProcessId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProcessId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Engine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Engine);
      }
      if (EngineVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EngineVersion);
      }
      if (ProcessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerApp other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Engine.Length != 0) {
        Engine = other.Engine;
      }
      if (other.EngineVersion.Length != 0) {
        EngineVersion = other.EngineVersion;
      }
      if (other.ProcessId != 0) {
        ProcessId = other.ProcessId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Engine = input.ReadString();
            break;
          }
          case 34: {
            EngineVersion = input.ReadString();
            break;
          }
          case 40: {
            ProcessId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information of server network
  /// </summary>
  public sealed partial class ServerNetwork : pb::IMessage<ServerNetwork> {
    private static readonly pb::MessageParser<ServerNetwork> _parser = new pb::MessageParser<ServerNetwork>(() => new ServerNetwork());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerNetwork> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerNetwork() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerNetwork(ServerNetwork other) : this() {
      ue4InBytes_ = other.ue4InBytes_;
      ue4OutBytes_ = other.ue4OutBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerNetwork Clone() {
      return new ServerNetwork(this);
    }

    /// <summary>Field number for the "ue4_in_bytes" field.</summary>
    public const int Ue4InBytesFieldNumber = 1;
    private uint ue4InBytes_;
    /// <summary>
    /// Total bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ue4InBytes {
      get { return ue4InBytes_; }
      set {
        ue4InBytes_ = value;
      }
    }

    /// <summary>Field number for the "ue4_out_bytes" field.</summary>
    public const int Ue4OutBytesFieldNumber = 2;
    private uint ue4OutBytes_;
    /// <summary>
    /// Total bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ue4OutBytes {
      get { return ue4OutBytes_; }
      set {
        ue4OutBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerNetwork);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerNetwork other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ue4InBytes != other.Ue4InBytes) return false;
      if (Ue4OutBytes != other.Ue4OutBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ue4InBytes != 0) hash ^= Ue4InBytes.GetHashCode();
      if (Ue4OutBytes != 0) hash ^= Ue4OutBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ue4InBytes != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Ue4InBytes);
      }
      if (Ue4OutBytes != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Ue4OutBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ue4InBytes != 0) {
        size += 1 + 4;
      }
      if (Ue4OutBytes != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerNetwork other) {
      if (other == null) {
        return;
      }
      if (other.Ue4InBytes != 0) {
        Ue4InBytes = other.Ue4InBytes;
      }
      if (other.Ue4OutBytes != 0) {
        Ue4OutBytes = other.Ue4OutBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Ue4InBytes = input.ReadFixed32();
            break;
          }
          case 21: {
            Ue4OutBytes = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents single sample of a time series
  /// </summary>
  public sealed partial class ServerSample : pb::IMessage<ServerSample> {
    private static readonly pb::MessageParser<ServerSample> _parser = new pb::MessageParser<ServerSample>(() => new ServerSample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSample(ServerSample other) : this() {
      timestamp_ = other.timestamp_;
      fps_ = other.fps_;
      cpuPercent_ = other.cpuPercent_;
      memPssKb_ = other.memPssKb_;
      frameTimeMs_ = other.frameTimeMs_;
      playersActive_ = other.playersActive_;
      playersOb_ = other.playersOb_;
      bots_ = other.bots_;
      extensions_ = other.extensions_.Clone();
      frameCounter_ = other.frameCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSample Clone() {
      return new ServerSample(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    /// Unix-time in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 8;
    private float fps_;
    /// <summary>
    /// Frames per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "cpu_percent" field.</summary>
    public const int CpuPercentFieldNumber = 2;
    private float cpuPercent_;
    /// <summary>
    /// CPU utilization of process, in percentage (0-100 because we run Server single-threaded)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpuPercent {
      get { return cpuPercent_; }
      set {
        cpuPercent_ = value;
      }
    }

    /// <summary>Field number for the "mem_pss_kb" field.</summary>
    public const int MemPssKbFieldNumber = 3;
    private float memPssKb_;
    /// <summary>
    /// PSS memory usage in KB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MemPssKb {
      get { return memPssKb_; }
      set {
        memPssKb_ = value;
      }
    }

    /// <summary>Field number for the "frame_time_ms" field.</summary>
    public const int FrameTimeMsFieldNumber = 4;
    private float frameTimeMs_;
    /// <summary>
    /// Total time of a frame in Milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrameTimeMs {
      get { return frameTimeMs_; }
      set {
        frameTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "players_active" field.</summary>
    public const int PlayersActiveFieldNumber = 5;
    private int playersActive_;
    /// <summary>
    /// Number of active players
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayersActive {
      get { return playersActive_; }
      set {
        playersActive_ = value;
      }
    }

    /// <summary>Field number for the "players_ob" field.</summary>
    public const int PlayersObFieldNumber = 6;
    private int playersOb_;
    /// <summary>
    /// Number of observing players
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayersOb {
      get { return playersOb_; }
      set {
        playersOb_ = value;
      }
    }

    /// <summary>Field number for the "bots" field.</summary>
    public const int BotsFieldNumber = 7;
    private int bots_;
    /// <summary>
    /// Number of active bots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bots {
      get { return bots_; }
      set {
        bots_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_extensions_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> extensions_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// User-defined metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "frame_counter" field.</summary>
    public const int FrameCounterFieldNumber = 9;
    private int frameCounter_;
    /// <summary>
    /// UE frame counter mod by 1000 (The index number of the user view the logs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameCounter {
      get { return frameCounter_; }
      set {
        frameCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fps, other.Fps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuPercent, other.CpuPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemPssKb, other.MemPssKb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameTimeMs, other.FrameTimeMs)) return false;
      if (PlayersActive != other.PlayersActive) return false;
      if (PlayersOb != other.PlayersOb) return false;
      if (Bots != other.Bots) return false;
      if(!extensions_.Equals(other.extensions_)) return false;
      if (FrameCounter != other.FrameCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Fps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fps);
      if (CpuPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuPercent);
      if (MemPssKb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemPssKb);
      if (FrameTimeMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameTimeMs);
      if (PlayersActive != 0) hash ^= PlayersActive.GetHashCode();
      if (PlayersOb != 0) hash ^= PlayersOb.GetHashCode();
      if (Bots != 0) hash ^= Bots.GetHashCode();
      hash ^= extensions_.GetHashCode();
      if (FrameCounter != 0) hash ^= FrameCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Timestamp);
      }
      if (CpuPercent != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CpuPercent);
      }
      if (MemPssKb != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MemPssKb);
      }
      if (FrameTimeMs != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FrameTimeMs);
      }
      if (PlayersActive != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayersActive);
      }
      if (PlayersOb != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayersOb);
      }
      if (Bots != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Bots);
      }
      if (Fps != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Fps);
      }
      if (FrameCounter != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrameCounter);
      }
      extensions_.WriteTo(output, _repeated_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + 4;
      }
      if (Fps != 0F) {
        size += 1 + 4;
      }
      if (CpuPercent != 0F) {
        size += 1 + 4;
      }
      if (MemPssKb != 0F) {
        size += 1 + 4;
      }
      if (FrameTimeMs != 0F) {
        size += 1 + 4;
      }
      if (PlayersActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayersActive);
      }
      if (PlayersOb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayersOb);
      }
      if (Bots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bots);
      }
      size += extensions_.CalculateSize(_repeated_extensions_codec);
      if (FrameCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSample other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Fps != 0F) {
        Fps = other.Fps;
      }
      if (other.CpuPercent != 0F) {
        CpuPercent = other.CpuPercent;
      }
      if (other.MemPssKb != 0F) {
        MemPssKb = other.MemPssKb;
      }
      if (other.FrameTimeMs != 0F) {
        FrameTimeMs = other.FrameTimeMs;
      }
      if (other.PlayersActive != 0) {
        PlayersActive = other.PlayersActive;
      }
      if (other.PlayersOb != 0) {
        PlayersOb = other.PlayersOb;
      }
      if (other.Bots != 0) {
        Bots = other.Bots;
      }
      extensions_.Add(other.extensions_);
      if (other.FrameCounter != 0) {
        FrameCounter = other.FrameCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 21: {
            CpuPercent = input.ReadFloat();
            break;
          }
          case 29: {
            MemPssKb = input.ReadFloat();
            break;
          }
          case 37: {
            FrameTimeMs = input.ReadFloat();
            break;
          }
          case 40: {
            PlayersActive = input.ReadInt32();
            break;
          }
          case 48: {
            PlayersOb = input.ReadInt32();
            break;
          }
          case 56: {
            Bots = input.ReadInt32();
            break;
          }
          case 69: {
            Fps = input.ReadFloat();
            break;
          }
          case 72: {
            FrameCounter = input.ReadInt32();
            break;
          }
          case 122:
          case 125: {
            extensions_.AddEntriesFrom(input, _repeated_extensions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Servers send this via HTTP POST
  /// </summary>
  public sealed partial class ServerSession : pb::IMessage<ServerSession> {
    private static readonly pb::MessageParser<ServerSession> _parser = new pb::MessageParser<ServerSession>(() => new ServerSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.GperfReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSession(ServerSession other) : this() {
      device_ = other.device_ != null ? other.device_.Clone() : null;
      app_ = other.app_ != null ? other.app_.Clone() : null;
      network_ = other.network_ != null ? other.network_.Clone() : null;
      samples_ = other.samples_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSession Clone() {
      return new ServerSession(this);
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private global::Gperf.ServerDevice device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.ServerDevice Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 2;
    private global::Gperf.ServerApp app_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.ServerApp App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 5;
    private global::Gperf.ServerNetwork network_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.ServerNetwork Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gperf.ServerSample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(26, global::Gperf.ServerSample.Parser);
    private readonly pbc::RepeatedField<global::Gperf.ServerSample> samples_ = new pbc::RepeatedField<global::Gperf.ServerSample>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gperf.ServerSample> Samples {
      get { return samples_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional user-defined metadata, like https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Device, other.Device)) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (device_ != null) hash ^= Device.GetHashCode();
      if (app_ != null) hash ^= App.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      hash ^= samples_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (device_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Device);
      }
      if (app_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(App);
      }
      samples_.WriteTo(output, _repeated_samples_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (network_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      size += samples_.CalculateSize(_repeated_samples_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSession other) {
      if (other == null) {
        return;
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Gperf.ServerDevice();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Gperf.ServerApp();
        }
        App.MergeFrom(other.App);
      }
      if (other.network_ != null) {
        if (network_ == null) {
          Network = new global::Gperf.ServerNetwork();
        }
        Network.MergeFrom(other.Network);
      }
      samples_.Add(other.samples_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (device_ == null) {
              Device = new global::Gperf.ServerDevice();
            }
            input.ReadMessage(Device);
            break;
          }
          case 18: {
            if (app_ == null) {
              App = new global::Gperf.ServerApp();
            }
            input.ReadMessage(App);
            break;
          }
          case 26: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 42: {
            if (network_ == null) {
              Network = new global::Gperf.ServerNetwork();
            }
            input.ReadMessage(Network);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
