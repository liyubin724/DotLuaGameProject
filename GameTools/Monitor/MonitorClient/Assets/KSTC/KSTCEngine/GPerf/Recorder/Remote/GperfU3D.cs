// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gperf-u3d.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gperf.U3D {

  /// <summary>Holder for reflection information generated from gperf-u3d.proto</summary>
  public static partial class GperfU3DReflection {

    #region Descriptor
    /// <summary>File descriptor for gperf-u3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GperfU3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ncGVyZi11M2QucHJvdG8SCWdwZXJmLnUzZCJyCghHUGVyZkFwcBISCgpp",
            "ZGVudGlmaWVyGAEgASgJEhQKDGluc3RhbGxfbmFtZRgCIAEoCRIUCgxwcm9k",
            "dWN0X25hbWUYAyABKAkSDwoHdmVyc2lvbhgEIAEoCRIVCg11bml0eV92ZXJz",
            "aW9uGAUgASgJIuIBCgtHUGVyZkRldmljZRINCgVtb2RlbBgBIAEoCRIMCgRu",
            "YW1lGAIgASgJEhkKEXVuaXF1ZV9pZGVudGlmaWVyGAMgASgJEhUKDWdyYXBo",
            "aWNzX25hbWUYBCABKAkSFQoNZ3JhcGhpY3NfdHlwZRgFIAEoCRIXCg9ncmFw",
            "aGljc192ZW5kb3IYBiABKAkSGAoQZ3JhcGhpY3NfdmVyc2lvbhgHIAEoCRId",
            "ChVncmFwaGljc19tZW1vcnlfaW5fbWIYCCABKAUSGwoTc3lzdGVtX21lbW9y",
            "eV9pbl9tYhgJIAEoBSKQAQoRR1BlcmZTeXN0ZW1NZW1vcnkSEwoLdG90YWxf",
            "aW5fa2IYASABKAMSFwoPYXZhaWxhYmxlX2luX2tiGAIgASgDEhcKD3RocmVz",
            "aG9sZF9pbl9rYhgDIAEoAxIOCgZpc19sb3cYBCABKAgSEQoJcHNzX2luX2ti",
            "GAUgASgDEhEKCXJzc19pbl9rYhgGIAEoAyKSAgoTR1BlcmZQcm9maWxlck1l",
            "bW9yeRIcChRtb25vX2hlYXBfc2l6ZV9pbl9rYhgBIAEoAxIcChRtb25vX3Vz",
            "ZWRfc2l6ZV9pbl9rYhgCIAEoAxIhChl0ZW1wX2FsbG9jYXRvcl9zaXplX2lu",
            "X2tiGAMgASgDEiIKGnRvdGFsX2FsbG9jYXRvcl9zaXplX2luX2tiGAQgASgD",
            "EiEKGXRvdGFsX3Jlc2VydmVkX3NpemVfaW5fa2IYBSABKAMSKAogdG90YWxf",
            "dW51c2VkX3Jlc2VydmVkX3NpemVfaW5fa2IYBiABKAMSKwojYWxsb2NhdGVk",
            "X2Zvcl9ncmFwaGljc19kcml2ZXJfaW5fa2IYByABKAMiHwoOR1BlcmZMdWFN",
            "ZW1vcnkSDQoFdG90YWwYASABKAIiVgoMR1BlcmZCYXR0ZXJ5EhMKC3RlbXBl",
            "cmF0dXJlGAEgASgCEg4KBnN0YXR1cxgCIAEoBRITCgtzdGF0dXNfZGVzYxgD",
            "IAEoCRIMCgRyYXRlGAQgASgCIl0KCEdQZXJmQ1BVEhIKCmNvcmVfY291bnQY",
            "ASABKAUSEQoJZnJlcXVlbmN5GAIgASgFEhIKCnVzYWdlX3JhdGUYAyABKAIS",
            "FgoOY29yZV9mcmVxdWVuY3kYBCADKAUiMQoIR1BlcmZGUFMSGAoQZGVsdGFf",
            "dGltZV9pbl9NUxgBIAEoAhILCgNmcHMYAiABKAUiqQEKDkdQZXJmRnJhbWVU",
            "aW1lEhgKEHBsYXllcl9sb29wX3RpbWUYASABKAISFgoOcmVuZGVyaW5nX3Rp",
            "bWUYAiABKAISEwoLc2NyaXB0X3RpbWUYAyABKAISFAoMcGh5c2ljc190aW1l",
            "GAQgASgCEhYKDmFuaW1hdGlvbl90aW1lGAUgASgCEhAKCGNwdV90aW1lGAYg",
            "ASgCEhAKCGdwdV90aW1lGAcgASgCIoABCg1HUGVyZkdhbWVJbmZvEjwKCmV4",
            "dGVuc2lvbnMYASADKAsyKC5ncGVyZi51M2QuR1BlcmZHYW1lSW5mby5FeHRl",
            "bnNpb25zRW50cnkaMQoPRXh0ZW5zaW9uc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEigAEKDUdQZXJmVXNlckluZm8SPAoKZXh0ZW5z",
            "aW9ucxgBIAMoCzIoLmdwZXJmLnUzZC5HUGVyZlVzZXJJbmZvLkV4dGVuc2lv",
            "bnNFbnRyeRoxCg9FeHRlbnNpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4ASKtAwoLR1BlcmZTYW1wbGUSEQoJdGltZXN0YW1wGAEg",
            "ASgHEhMKC2ZyYW1lX2luZGV4GAIgASgFEisKCXVzZXJfaW5mbxgDIAEoCzIY",
            "LmdwZXJmLnUzZC5HUGVyZlVzZXJJbmZvEjMKDXN5c3RlbV9tZW1vcnkYBCAB",
            "KAsyHC5ncGVyZi51M2QuR1BlcmZTeXN0ZW1NZW1vcnkSNwoPcHJvZmlsZXJf",
            "bWVtb3J5GAUgASgLMh4uZ3BlcmYudTNkLkdQZXJmUHJvZmlsZXJNZW1vcnkS",
            "LQoKbHVhX21lbW9yeRgGIAEoCzIZLmdwZXJmLnUzZC5HUGVyZkx1YU1lbW9y",
            "eRIoCgdiYXR0ZXJ5GAcgASgLMhcuZ3BlcmYudTNkLkdQZXJmQmF0dGVyeRIg",
            "CgNjcHUYCCABKAsyEy5ncGVyZi51M2QuR1BlcmZDUFUSIAoDZnBzGAkgASgL",
            "MhMuZ3BlcmYudTNkLkdQZXJmRlBTEi0KCmZyYW1lX3RpbWUYCiABKAsyGS5n",
            "cGVyZi51M2QuR1BlcmZGcmFtZVRpbWUSDwoHc2Vzc2lvbhgLIAEoCSLUAwoM",
            "R1BlcmZTZXNzaW9uEiAKA2FwcBgBIAEoCzITLmdwZXJmLnUzZC5HUGVyZkFw",
            "cBImCgZkZXZpY2UYAiABKAsyFi5ncGVyZi51M2QuR1BlcmZEZXZpY2USKwoJ",
            "Z2FtZV9pbmZvGAMgASgLMhguZ3BlcmYudTNkLkdQZXJmR2FtZUluZm8SJwoH",
            "c2FtcGxlcxgEIAMoCzIWLmdwZXJmLnUzZC5HUGVyZlNhbXBsZRI7CgpleHRl",
            "bnNpb25zGAUgAygLMicuZ3BlcmYudTNkLkdQZXJmU2Vzc2lvbi5FeHRlbnNp",
            "b25zRW50cnkSIQoEbG9ncxgGIAEoCzITLmdwZXJmLnUzZC5HUGVyZkxvZxIV",
            "Cg1yYXdfYmxvYl9zaXplGAcgASgFEhEKCXRpbWVzdGFtcBgIIAEoCRIMCgRm",
            "cm9tGAkgASgDEgoKAnRvGAogASgDEhAKCGR1cmF0aW9uGAsgASgDEg8KB3Nl",
            "c3Npb24YDCABKAkSKgoIb3ZlcnZpZXcYDSABKAsyGC5ncGVyZi51M2QuR1Bl",
            "cmZPdmVydmlldxoxCg9FeHRlbnNpb25zRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4ASKcAQoNR1BlcmZPdmVydmlldxIPCgdhdmdfZnBz",
            "GAEgASgCEhcKD3BlYWtfbWVtX3Bzc19rYhgCIAEoAhIaChJwZWFrX21lbV9w",
            "c3NfYnl0ZXMYAyABKAISFQoNbWF4X2RyYXdfY2FsbBgEIAEoAhIVCg1tYXhf",
            "dHJpYW5nbGVzGAUgASgCEhcKD21heF90ZW1wZXJhdHVyZRgGIAEoAiIXCghH",
            "UGVyZkxvZxILCgN1cmwYASABKAlCOgoiY29tLmtpbmdzb2Z0LnNoaXlvdS5p",
            "bmZyYS5ncGVyZi5wYkIQR1BlcmZVbml0eVByb3Rvc0gBUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfApp), global::Gperf.U3D.GPerfApp.Parser, new[]{ "Identifier", "InstallName", "ProductName", "Version", "UnityVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfDevice), global::Gperf.U3D.GPerfDevice.Parser, new[]{ "Model", "Name", "UniqueIdentifier", "GraphicsName", "GraphicsType", "GraphicsVendor", "GraphicsVersion", "GraphicsMemoryInMb", "SystemMemoryInMb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSystemMemory), global::Gperf.U3D.GPerfSystemMemory.Parser, new[]{ "TotalInKb", "AvailableInKb", "ThresholdInKb", "IsLow", "PssInKb", "RssInKb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfProfilerMemory), global::Gperf.U3D.GPerfProfilerMemory.Parser, new[]{ "MonoHeapSizeInKb", "MonoUsedSizeInKb", "TempAllocatorSizeInKb", "TotalAllocatorSizeInKb", "TotalReservedSizeInKb", "TotalUnusedReservedSizeInKb", "AllocatedForGraphicsDriverInKb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfLuaMemory), global::Gperf.U3D.GPerfLuaMemory.Parser, new[]{ "Total" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfBattery), global::Gperf.U3D.GPerfBattery.Parser, new[]{ "Temperature", "Status", "StatusDesc", "Rate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfCPU), global::Gperf.U3D.GPerfCPU.Parser, new[]{ "CoreCount", "Frequency", "UsageRate", "CoreFrequency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfFPS), global::Gperf.U3D.GPerfFPS.Parser, new[]{ "DeltaTimeInMS", "Fps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfFrameTime), global::Gperf.U3D.GPerfFrameTime.Parser, new[]{ "PlayerLoopTime", "RenderingTime", "ScriptTime", "PhysicsTime", "AnimationTime", "CpuTime", "GpuTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfGameInfo), global::Gperf.U3D.GPerfGameInfo.Parser, new[]{ "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfUserInfo), global::Gperf.U3D.GPerfUserInfo.Parser, new[]{ "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSample), global::Gperf.U3D.GPerfSample.Parser, new[]{ "Timestamp", "FrameIndex", "UserInfo", "SystemMemory", "ProfilerMemory", "LuaMemory", "Battery", "Cpu", "Fps", "FrameTime", "Session" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSession), global::Gperf.U3D.GPerfSession.Parser, new[]{ "App", "Device", "GameInfo", "Samples", "Extensions", "Logs", "RawBlobSize", "Timestamp", "From", "To", "Duration", "Session", "Overview" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfOverview), global::Gperf.U3D.GPerfOverview.Parser, new[]{ "AvgFps", "PeakMemPssKb", "PeakMemPssBytes", "MaxDrawCall", "MaxTriangles", "MaxTemperature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfLog), global::Gperf.U3D.GPerfLog.Parser, new[]{ "Url" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GPerfApp : pb::IMessage<GPerfApp> {
    private static readonly pb::MessageParser<GPerfApp> _parser = new pb::MessageParser<GPerfApp>(() => new GPerfApp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfApp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp(GPerfApp other) : this() {
      identifier_ = other.identifier_;
      installName_ = other.installName_;
      productName_ = other.productName_;
      version_ = other.version_;
      unityVersion_ = other.unityVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp Clone() {
      return new GPerfApp(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "install_name" field.</summary>
    public const int InstallNameFieldNumber = 2;
    private string installName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstallName {
      get { return installName_; }
      set {
        installName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 3;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unity_version" field.</summary>
    public const int UnityVersionFieldNumber = 5;
    private string unityVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnityVersion {
      get { return unityVersion_; }
      set {
        unityVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfApp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfApp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      if (InstallName != other.InstallName) return false;
      if (ProductName != other.ProductName) return false;
      if (Version != other.Version) return false;
      if (UnityVersion != other.UnityVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (InstallName.Length != 0) hash ^= InstallName.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (UnityVersion.Length != 0) hash ^= UnityVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (InstallName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstallName);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductName);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (UnityVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnityVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (InstallName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstallName);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (UnityVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnityVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfApp other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.InstallName.Length != 0) {
        InstallName = other.InstallName;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.UnityVersion.Length != 0) {
        UnityVersion = other.UnityVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 18: {
            InstallName = input.ReadString();
            break;
          }
          case 26: {
            ProductName = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            UnityVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfDevice : pb::IMessage<GPerfDevice> {
    private static readonly pb::MessageParser<GPerfDevice> _parser = new pb::MessageParser<GPerfDevice>(() => new GPerfDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice(GPerfDevice other) : this() {
      model_ = other.model_;
      name_ = other.name_;
      uniqueIdentifier_ = other.uniqueIdentifier_;
      graphicsName_ = other.graphicsName_;
      graphicsType_ = other.graphicsType_;
      graphicsVendor_ = other.graphicsVendor_;
      graphicsVersion_ = other.graphicsVersion_;
      graphicsMemoryInMb_ = other.graphicsMemoryInMb_;
      systemMemoryInMb_ = other.systemMemoryInMb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice Clone() {
      return new GPerfDevice(this);
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 1;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_identifier" field.</summary>
    public const int UniqueIdentifierFieldNumber = 3;
    private string uniqueIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueIdentifier {
      get { return uniqueIdentifier_; }
      set {
        uniqueIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_name" field.</summary>
    public const int GraphicsNameFieldNumber = 4;
    private string graphicsName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsName {
      get { return graphicsName_; }
      set {
        graphicsName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_type" field.</summary>
    public const int GraphicsTypeFieldNumber = 5;
    private string graphicsType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsType {
      get { return graphicsType_; }
      set {
        graphicsType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_vendor" field.</summary>
    public const int GraphicsVendorFieldNumber = 6;
    private string graphicsVendor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsVendor {
      get { return graphicsVendor_; }
      set {
        graphicsVendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_version" field.</summary>
    public const int GraphicsVersionFieldNumber = 7;
    private string graphicsVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsVersion {
      get { return graphicsVersion_; }
      set {
        graphicsVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_memory_in_mb" field.</summary>
    public const int GraphicsMemoryInMbFieldNumber = 8;
    private int graphicsMemoryInMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GraphicsMemoryInMb {
      get { return graphicsMemoryInMb_; }
      set {
        graphicsMemoryInMb_ = value;
      }
    }

    /// <summary>Field number for the "system_memory_in_mb" field.</summary>
    public const int SystemMemoryInMbFieldNumber = 9;
    private int systemMemoryInMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SystemMemoryInMb {
      get { return systemMemoryInMb_; }
      set {
        systemMemoryInMb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Model != other.Model) return false;
      if (Name != other.Name) return false;
      if (UniqueIdentifier != other.UniqueIdentifier) return false;
      if (GraphicsName != other.GraphicsName) return false;
      if (GraphicsType != other.GraphicsType) return false;
      if (GraphicsVendor != other.GraphicsVendor) return false;
      if (GraphicsVersion != other.GraphicsVersion) return false;
      if (GraphicsMemoryInMb != other.GraphicsMemoryInMb) return false;
      if (SystemMemoryInMb != other.SystemMemoryInMb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UniqueIdentifier.Length != 0) hash ^= UniqueIdentifier.GetHashCode();
      if (GraphicsName.Length != 0) hash ^= GraphicsName.GetHashCode();
      if (GraphicsType.Length != 0) hash ^= GraphicsType.GetHashCode();
      if (GraphicsVendor.Length != 0) hash ^= GraphicsVendor.GetHashCode();
      if (GraphicsVersion.Length != 0) hash ^= GraphicsVersion.GetHashCode();
      if (GraphicsMemoryInMb != 0) hash ^= GraphicsMemoryInMb.GetHashCode();
      if (SystemMemoryInMb != 0) hash ^= SystemMemoryInMb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Model.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Model);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UniqueIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueIdentifier);
      }
      if (GraphicsName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GraphicsName);
      }
      if (GraphicsType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GraphicsType);
      }
      if (GraphicsVendor.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GraphicsVendor);
      }
      if (GraphicsVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GraphicsVersion);
      }
      if (GraphicsMemoryInMb != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GraphicsMemoryInMb);
      }
      if (SystemMemoryInMb != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SystemMemoryInMb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UniqueIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueIdentifier);
      }
      if (GraphicsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsName);
      }
      if (GraphicsType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsType);
      }
      if (GraphicsVendor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsVendor);
      }
      if (GraphicsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsVersion);
      }
      if (GraphicsMemoryInMb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GraphicsMemoryInMb);
      }
      if (SystemMemoryInMb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemMemoryInMb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfDevice other) {
      if (other == null) {
        return;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UniqueIdentifier.Length != 0) {
        UniqueIdentifier = other.UniqueIdentifier;
      }
      if (other.GraphicsName.Length != 0) {
        GraphicsName = other.GraphicsName;
      }
      if (other.GraphicsType.Length != 0) {
        GraphicsType = other.GraphicsType;
      }
      if (other.GraphicsVendor.Length != 0) {
        GraphicsVendor = other.GraphicsVendor;
      }
      if (other.GraphicsVersion.Length != 0) {
        GraphicsVersion = other.GraphicsVersion;
      }
      if (other.GraphicsMemoryInMb != 0) {
        GraphicsMemoryInMb = other.GraphicsMemoryInMb;
      }
      if (other.SystemMemoryInMb != 0) {
        SystemMemoryInMb = other.SystemMemoryInMb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Model = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            UniqueIdentifier = input.ReadString();
            break;
          }
          case 34: {
            GraphicsName = input.ReadString();
            break;
          }
          case 42: {
            GraphicsType = input.ReadString();
            break;
          }
          case 50: {
            GraphicsVendor = input.ReadString();
            break;
          }
          case 58: {
            GraphicsVersion = input.ReadString();
            break;
          }
          case 64: {
            GraphicsMemoryInMb = input.ReadInt32();
            break;
          }
          case 72: {
            SystemMemoryInMb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSystemMemory : pb::IMessage<GPerfSystemMemory> {
    private static readonly pb::MessageParser<GPerfSystemMemory> _parser = new pb::MessageParser<GPerfSystemMemory>(() => new GPerfSystemMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSystemMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory(GPerfSystemMemory other) : this() {
      totalInKb_ = other.totalInKb_;
      availableInKb_ = other.availableInKb_;
      thresholdInKb_ = other.thresholdInKb_;
      isLow_ = other.isLow_;
      pssInKb_ = other.pssInKb_;
      rssInKb_ = other.rssInKb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory Clone() {
      return new GPerfSystemMemory(this);
    }

    /// <summary>Field number for the "total_in_kb" field.</summary>
    public const int TotalInKbFieldNumber = 1;
    private long totalInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalInKb {
      get { return totalInKb_; }
      set {
        totalInKb_ = value;
      }
    }

    /// <summary>Field number for the "available_in_kb" field.</summary>
    public const int AvailableInKbFieldNumber = 2;
    private long availableInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvailableInKb {
      get { return availableInKb_; }
      set {
        availableInKb_ = value;
      }
    }

    /// <summary>Field number for the "threshold_in_kb" field.</summary>
    public const int ThresholdInKbFieldNumber = 3;
    private long thresholdInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ThresholdInKb {
      get { return thresholdInKb_; }
      set {
        thresholdInKb_ = value;
      }
    }

    /// <summary>Field number for the "is_low" field.</summary>
    public const int IsLowFieldNumber = 4;
    private bool isLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLow {
      get { return isLow_; }
      set {
        isLow_ = value;
      }
    }

    /// <summary>Field number for the "pss_in_kb" field.</summary>
    public const int PssInKbFieldNumber = 5;
    private long pssInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PssInKb {
      get { return pssInKb_; }
      set {
        pssInKb_ = value;
      }
    }

    /// <summary>Field number for the "rss_in_kb" field.</summary>
    public const int RssInKbFieldNumber = 6;
    private long rssInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RssInKb {
      get { return rssInKb_; }
      set {
        rssInKb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSystemMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSystemMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalInKb != other.TotalInKb) return false;
      if (AvailableInKb != other.AvailableInKb) return false;
      if (ThresholdInKb != other.ThresholdInKb) return false;
      if (IsLow != other.IsLow) return false;
      if (PssInKb != other.PssInKb) return false;
      if (RssInKb != other.RssInKb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalInKb != 0L) hash ^= TotalInKb.GetHashCode();
      if (AvailableInKb != 0L) hash ^= AvailableInKb.GetHashCode();
      if (ThresholdInKb != 0L) hash ^= ThresholdInKb.GetHashCode();
      if (IsLow != false) hash ^= IsLow.GetHashCode();
      if (PssInKb != 0L) hash ^= PssInKb.GetHashCode();
      if (RssInKb != 0L) hash ^= RssInKb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalInKb != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalInKb);
      }
      if (AvailableInKb != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AvailableInKb);
      }
      if (ThresholdInKb != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ThresholdInKb);
      }
      if (IsLow != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLow);
      }
      if (PssInKb != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PssInKb);
      }
      if (RssInKb != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RssInKb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalInKb);
      }
      if (AvailableInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailableInKb);
      }
      if (ThresholdInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThresholdInKb);
      }
      if (IsLow != false) {
        size += 1 + 1;
      }
      if (PssInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PssInKb);
      }
      if (RssInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RssInKb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSystemMemory other) {
      if (other == null) {
        return;
      }
      if (other.TotalInKb != 0L) {
        TotalInKb = other.TotalInKb;
      }
      if (other.AvailableInKb != 0L) {
        AvailableInKb = other.AvailableInKb;
      }
      if (other.ThresholdInKb != 0L) {
        ThresholdInKb = other.ThresholdInKb;
      }
      if (other.IsLow != false) {
        IsLow = other.IsLow;
      }
      if (other.PssInKb != 0L) {
        PssInKb = other.PssInKb;
      }
      if (other.RssInKb != 0L) {
        RssInKb = other.RssInKb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalInKb = input.ReadInt64();
            break;
          }
          case 16: {
            AvailableInKb = input.ReadInt64();
            break;
          }
          case 24: {
            ThresholdInKb = input.ReadInt64();
            break;
          }
          case 32: {
            IsLow = input.ReadBool();
            break;
          }
          case 40: {
            PssInKb = input.ReadInt64();
            break;
          }
          case 48: {
            RssInKb = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfProfilerMemory : pb::IMessage<GPerfProfilerMemory> {
    private static readonly pb::MessageParser<GPerfProfilerMemory> _parser = new pb::MessageParser<GPerfProfilerMemory>(() => new GPerfProfilerMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfProfilerMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory(GPerfProfilerMemory other) : this() {
      monoHeapSizeInKb_ = other.monoHeapSizeInKb_;
      monoUsedSizeInKb_ = other.monoUsedSizeInKb_;
      tempAllocatorSizeInKb_ = other.tempAllocatorSizeInKb_;
      totalAllocatorSizeInKb_ = other.totalAllocatorSizeInKb_;
      totalReservedSizeInKb_ = other.totalReservedSizeInKb_;
      totalUnusedReservedSizeInKb_ = other.totalUnusedReservedSizeInKb_;
      allocatedForGraphicsDriverInKb_ = other.allocatedForGraphicsDriverInKb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory Clone() {
      return new GPerfProfilerMemory(this);
    }

    /// <summary>Field number for the "mono_heap_size_in_kb" field.</summary>
    public const int MonoHeapSizeInKbFieldNumber = 1;
    private long monoHeapSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonoHeapSizeInKb {
      get { return monoHeapSizeInKb_; }
      set {
        monoHeapSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "mono_used_size_in_kb" field.</summary>
    public const int MonoUsedSizeInKbFieldNumber = 2;
    private long monoUsedSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonoUsedSizeInKb {
      get { return monoUsedSizeInKb_; }
      set {
        monoUsedSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "temp_allocator_size_in_kb" field.</summary>
    public const int TempAllocatorSizeInKbFieldNumber = 3;
    private long tempAllocatorSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TempAllocatorSizeInKb {
      get { return tempAllocatorSizeInKb_; }
      set {
        tempAllocatorSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "total_allocator_size_in_kb" field.</summary>
    public const int TotalAllocatorSizeInKbFieldNumber = 4;
    private long totalAllocatorSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAllocatorSizeInKb {
      get { return totalAllocatorSizeInKb_; }
      set {
        totalAllocatorSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "total_reserved_size_in_kb" field.</summary>
    public const int TotalReservedSizeInKbFieldNumber = 5;
    private long totalReservedSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalReservedSizeInKb {
      get { return totalReservedSizeInKb_; }
      set {
        totalReservedSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "total_unused_reserved_size_in_kb" field.</summary>
    public const int TotalUnusedReservedSizeInKbFieldNumber = 6;
    private long totalUnusedReservedSizeInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalUnusedReservedSizeInKb {
      get { return totalUnusedReservedSizeInKb_; }
      set {
        totalUnusedReservedSizeInKb_ = value;
      }
    }

    /// <summary>Field number for the "allocated_for_graphics_driver_in_kb" field.</summary>
    public const int AllocatedForGraphicsDriverInKbFieldNumber = 7;
    private long allocatedForGraphicsDriverInKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocatedForGraphicsDriverInKb {
      get { return allocatedForGraphicsDriverInKb_; }
      set {
        allocatedForGraphicsDriverInKb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfProfilerMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfProfilerMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonoHeapSizeInKb != other.MonoHeapSizeInKb) return false;
      if (MonoUsedSizeInKb != other.MonoUsedSizeInKb) return false;
      if (TempAllocatorSizeInKb != other.TempAllocatorSizeInKb) return false;
      if (TotalAllocatorSizeInKb != other.TotalAllocatorSizeInKb) return false;
      if (TotalReservedSizeInKb != other.TotalReservedSizeInKb) return false;
      if (TotalUnusedReservedSizeInKb != other.TotalUnusedReservedSizeInKb) return false;
      if (AllocatedForGraphicsDriverInKb != other.AllocatedForGraphicsDriverInKb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonoHeapSizeInKb != 0L) hash ^= MonoHeapSizeInKb.GetHashCode();
      if (MonoUsedSizeInKb != 0L) hash ^= MonoUsedSizeInKb.GetHashCode();
      if (TempAllocatorSizeInKb != 0L) hash ^= TempAllocatorSizeInKb.GetHashCode();
      if (TotalAllocatorSizeInKb != 0L) hash ^= TotalAllocatorSizeInKb.GetHashCode();
      if (TotalReservedSizeInKb != 0L) hash ^= TotalReservedSizeInKb.GetHashCode();
      if (TotalUnusedReservedSizeInKb != 0L) hash ^= TotalUnusedReservedSizeInKb.GetHashCode();
      if (AllocatedForGraphicsDriverInKb != 0L) hash ^= AllocatedForGraphicsDriverInKb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonoHeapSizeInKb != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MonoHeapSizeInKb);
      }
      if (MonoUsedSizeInKb != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MonoUsedSizeInKb);
      }
      if (TempAllocatorSizeInKb != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TempAllocatorSizeInKb);
      }
      if (TotalAllocatorSizeInKb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalAllocatorSizeInKb);
      }
      if (TotalReservedSizeInKb != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalReservedSizeInKb);
      }
      if (TotalUnusedReservedSizeInKb != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalUnusedReservedSizeInKb);
      }
      if (AllocatedForGraphicsDriverInKb != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AllocatedForGraphicsDriverInKb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonoHeapSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonoHeapSizeInKb);
      }
      if (MonoUsedSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonoUsedSizeInKb);
      }
      if (TempAllocatorSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TempAllocatorSizeInKb);
      }
      if (TotalAllocatorSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAllocatorSizeInKb);
      }
      if (TotalReservedSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalReservedSizeInKb);
      }
      if (TotalUnusedReservedSizeInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalUnusedReservedSizeInKb);
      }
      if (AllocatedForGraphicsDriverInKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocatedForGraphicsDriverInKb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfProfilerMemory other) {
      if (other == null) {
        return;
      }
      if (other.MonoHeapSizeInKb != 0L) {
        MonoHeapSizeInKb = other.MonoHeapSizeInKb;
      }
      if (other.MonoUsedSizeInKb != 0L) {
        MonoUsedSizeInKb = other.MonoUsedSizeInKb;
      }
      if (other.TempAllocatorSizeInKb != 0L) {
        TempAllocatorSizeInKb = other.TempAllocatorSizeInKb;
      }
      if (other.TotalAllocatorSizeInKb != 0L) {
        TotalAllocatorSizeInKb = other.TotalAllocatorSizeInKb;
      }
      if (other.TotalReservedSizeInKb != 0L) {
        TotalReservedSizeInKb = other.TotalReservedSizeInKb;
      }
      if (other.TotalUnusedReservedSizeInKb != 0L) {
        TotalUnusedReservedSizeInKb = other.TotalUnusedReservedSizeInKb;
      }
      if (other.AllocatedForGraphicsDriverInKb != 0L) {
        AllocatedForGraphicsDriverInKb = other.AllocatedForGraphicsDriverInKb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonoHeapSizeInKb = input.ReadInt64();
            break;
          }
          case 16: {
            MonoUsedSizeInKb = input.ReadInt64();
            break;
          }
          case 24: {
            TempAllocatorSizeInKb = input.ReadInt64();
            break;
          }
          case 32: {
            TotalAllocatorSizeInKb = input.ReadInt64();
            break;
          }
          case 40: {
            TotalReservedSizeInKb = input.ReadInt64();
            break;
          }
          case 48: {
            TotalUnusedReservedSizeInKb = input.ReadInt64();
            break;
          }
          case 56: {
            AllocatedForGraphicsDriverInKb = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfLuaMemory : pb::IMessage<GPerfLuaMemory> {
    private static readonly pb::MessageParser<GPerfLuaMemory> _parser = new pb::MessageParser<GPerfLuaMemory>(() => new GPerfLuaMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfLuaMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory(GPerfLuaMemory other) : this() {
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory Clone() {
      return new GPerfLuaMemory(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private float total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfLuaMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfLuaMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Total, other.Total)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Total);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfLuaMemory other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0F) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Total = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfBattery : pb::IMessage<GPerfBattery> {
    private static readonly pb::MessageParser<GPerfBattery> _parser = new pb::MessageParser<GPerfBattery>(() => new GPerfBattery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfBattery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery(GPerfBattery other) : this() {
      temperature_ = other.temperature_;
      status_ = other.status_;
      statusDesc_ = other.statusDesc_;
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery Clone() {
      return new GPerfBattery(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private float temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "status_desc" field.</summary>
    public const int StatusDescFieldNumber = 3;
    private string statusDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusDesc {
      get { return statusDesc_; }
      set {
        statusDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 4;
    private float rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfBattery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfBattery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      if (Status != other.Status) return false;
      if (StatusDesc != other.StatusDesc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusDesc.Length != 0) hash ^= StatusDesc.GetHashCode();
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Temperature != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (StatusDesc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StatusDesc);
      }
      if (Rate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Temperature != 0F) {
        size += 1 + 4;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (StatusDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusDesc);
      }
      if (Rate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfBattery other) {
      if (other == null) {
        return;
      }
      if (other.Temperature != 0F) {
        Temperature = other.Temperature;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusDesc.Length != 0) {
        StatusDesc = other.StatusDesc;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            StatusDesc = input.ReadString();
            break;
          }
          case 37: {
            Rate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfCPU : pb::IMessage<GPerfCPU> {
    private static readonly pb::MessageParser<GPerfCPU> _parser = new pb::MessageParser<GPerfCPU>(() => new GPerfCPU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfCPU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU(GPerfCPU other) : this() {
      coreCount_ = other.coreCount_;
      frequency_ = other.frequency_;
      usageRate_ = other.usageRate_;
      coreFrequency_ = other.coreFrequency_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU Clone() {
      return new GPerfCPU(this);
    }

    /// <summary>Field number for the "core_count" field.</summary>
    public const int CoreCountFieldNumber = 1;
    private int coreCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoreCount {
      get { return coreCount_; }
      set {
        coreCount_ = value;
      }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 2;
    private int frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "usage_rate" field.</summary>
    public const int UsageRateFieldNumber = 3;
    private float usageRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UsageRate {
      get { return usageRate_; }
      set {
        usageRate_ = value;
      }
    }

    /// <summary>Field number for the "core_frequency" field.</summary>
    public const int CoreFrequencyFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_coreFrequency_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> coreFrequency_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CoreFrequency {
      get { return coreFrequency_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfCPU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfCPU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoreCount != other.CoreCount) return false;
      if (Frequency != other.Frequency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UsageRate, other.UsageRate)) return false;
      if(!coreFrequency_.Equals(other.coreFrequency_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoreCount != 0) hash ^= CoreCount.GetHashCode();
      if (Frequency != 0) hash ^= Frequency.GetHashCode();
      if (UsageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UsageRate);
      hash ^= coreFrequency_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CoreCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CoreCount);
      }
      if (Frequency != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frequency);
      }
      if (UsageRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(UsageRate);
      }
      coreFrequency_.WriteTo(output, _repeated_coreFrequency_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoreCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoreCount);
      }
      if (Frequency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frequency);
      }
      if (UsageRate != 0F) {
        size += 1 + 4;
      }
      size += coreFrequency_.CalculateSize(_repeated_coreFrequency_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfCPU other) {
      if (other == null) {
        return;
      }
      if (other.CoreCount != 0) {
        CoreCount = other.CoreCount;
      }
      if (other.Frequency != 0) {
        Frequency = other.Frequency;
      }
      if (other.UsageRate != 0F) {
        UsageRate = other.UsageRate;
      }
      coreFrequency_.Add(other.coreFrequency_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CoreCount = input.ReadInt32();
            break;
          }
          case 16: {
            Frequency = input.ReadInt32();
            break;
          }
          case 29: {
            UsageRate = input.ReadFloat();
            break;
          }
          case 34:
          case 32: {
            coreFrequency_.AddEntriesFrom(input, _repeated_coreFrequency_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfFPS : pb::IMessage<GPerfFPS> {
    private static readonly pb::MessageParser<GPerfFPS> _parser = new pb::MessageParser<GPerfFPS>(() => new GPerfFPS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfFPS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS(GPerfFPS other) : this() {
      deltaTimeInMS_ = other.deltaTimeInMS_;
      fps_ = other.fps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS Clone() {
      return new GPerfFPS(this);
    }

    /// <summary>Field number for the "delta_time_in_MS" field.</summary>
    public const int DeltaTimeInMSFieldNumber = 1;
    private float deltaTimeInMS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeltaTimeInMS {
      get { return deltaTimeInMS_; }
      set {
        deltaTimeInMS_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 2;
    private int fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfFPS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfFPS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeltaTimeInMS, other.DeltaTimeInMS)) return false;
      if (Fps != other.Fps) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeltaTimeInMS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeltaTimeInMS);
      if (Fps != 0) hash ^= Fps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeltaTimeInMS != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DeltaTimeInMS);
      }
      if (Fps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Fps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeltaTimeInMS != 0F) {
        size += 1 + 4;
      }
      if (Fps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfFPS other) {
      if (other == null) {
        return;
      }
      if (other.DeltaTimeInMS != 0F) {
        DeltaTimeInMS = other.DeltaTimeInMS;
      }
      if (other.Fps != 0) {
        Fps = other.Fps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DeltaTimeInMS = input.ReadFloat();
            break;
          }
          case 16: {
            Fps = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfFrameTime : pb::IMessage<GPerfFrameTime> {
    private static readonly pb::MessageParser<GPerfFrameTime> _parser = new pb::MessageParser<GPerfFrameTime>(() => new GPerfFrameTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfFrameTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime(GPerfFrameTime other) : this() {
      playerLoopTime_ = other.playerLoopTime_;
      renderingTime_ = other.renderingTime_;
      scriptTime_ = other.scriptTime_;
      physicsTime_ = other.physicsTime_;
      animationTime_ = other.animationTime_;
      cpuTime_ = other.cpuTime_;
      gpuTime_ = other.gpuTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime Clone() {
      return new GPerfFrameTime(this);
    }

    /// <summary>Field number for the "player_loop_time" field.</summary>
    public const int PlayerLoopTimeFieldNumber = 1;
    private float playerLoopTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerLoopTime {
      get { return playerLoopTime_; }
      set {
        playerLoopTime_ = value;
      }
    }

    /// <summary>Field number for the "rendering_time" field.</summary>
    public const int RenderingTimeFieldNumber = 2;
    private float renderingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RenderingTime {
      get { return renderingTime_; }
      set {
        renderingTime_ = value;
      }
    }

    /// <summary>Field number for the "script_time" field.</summary>
    public const int ScriptTimeFieldNumber = 3;
    private float scriptTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScriptTime {
      get { return scriptTime_; }
      set {
        scriptTime_ = value;
      }
    }

    /// <summary>Field number for the "physics_time" field.</summary>
    public const int PhysicsTimeFieldNumber = 4;
    private float physicsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PhysicsTime {
      get { return physicsTime_; }
      set {
        physicsTime_ = value;
      }
    }

    /// <summary>Field number for the "animation_time" field.</summary>
    public const int AnimationTimeFieldNumber = 5;
    private float animationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AnimationTime {
      get { return animationTime_; }
      set {
        animationTime_ = value;
      }
    }

    /// <summary>Field number for the "cpu_time" field.</summary>
    public const int CpuTimeFieldNumber = 6;
    private float cpuTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpuTime {
      get { return cpuTime_; }
      set {
        cpuTime_ = value;
      }
    }

    /// <summary>Field number for the "gpu_time" field.</summary>
    public const int GpuTimeFieldNumber = 7;
    private float gpuTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GpuTime {
      get { return gpuTime_; }
      set {
        gpuTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfFrameTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfFrameTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerLoopTime, other.PlayerLoopTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RenderingTime, other.RenderingTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScriptTime, other.ScriptTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicsTime, other.PhysicsTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnimationTime, other.AnimationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuTime, other.CpuTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GpuTime, other.GpuTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerLoopTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerLoopTime);
      if (RenderingTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RenderingTime);
      if (ScriptTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScriptTime);
      if (PhysicsTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicsTime);
      if (AnimationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnimationTime);
      if (CpuTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuTime);
      if (GpuTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GpuTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerLoopTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PlayerLoopTime);
      }
      if (RenderingTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RenderingTime);
      }
      if (ScriptTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ScriptTime);
      }
      if (PhysicsTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PhysicsTime);
      }
      if (AnimationTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AnimationTime);
      }
      if (CpuTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CpuTime);
      }
      if (GpuTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(GpuTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerLoopTime != 0F) {
        size += 1 + 4;
      }
      if (RenderingTime != 0F) {
        size += 1 + 4;
      }
      if (ScriptTime != 0F) {
        size += 1 + 4;
      }
      if (PhysicsTime != 0F) {
        size += 1 + 4;
      }
      if (AnimationTime != 0F) {
        size += 1 + 4;
      }
      if (CpuTime != 0F) {
        size += 1 + 4;
      }
      if (GpuTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfFrameTime other) {
      if (other == null) {
        return;
      }
      if (other.PlayerLoopTime != 0F) {
        PlayerLoopTime = other.PlayerLoopTime;
      }
      if (other.RenderingTime != 0F) {
        RenderingTime = other.RenderingTime;
      }
      if (other.ScriptTime != 0F) {
        ScriptTime = other.ScriptTime;
      }
      if (other.PhysicsTime != 0F) {
        PhysicsTime = other.PhysicsTime;
      }
      if (other.AnimationTime != 0F) {
        AnimationTime = other.AnimationTime;
      }
      if (other.CpuTime != 0F) {
        CpuTime = other.CpuTime;
      }
      if (other.GpuTime != 0F) {
        GpuTime = other.GpuTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PlayerLoopTime = input.ReadFloat();
            break;
          }
          case 21: {
            RenderingTime = input.ReadFloat();
            break;
          }
          case 29: {
            ScriptTime = input.ReadFloat();
            break;
          }
          case 37: {
            PhysicsTime = input.ReadFloat();
            break;
          }
          case 45: {
            AnimationTime = input.ReadFloat();
            break;
          }
          case 53: {
            CpuTime = input.ReadFloat();
            break;
          }
          case 61: {
            GpuTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfGameInfo : pb::IMessage<GPerfGameInfo> {
    private static readonly pb::MessageParser<GPerfGameInfo> _parser = new pb::MessageParser<GPerfGameInfo>(() => new GPerfGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo(GPerfGameInfo other) : this() {
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo Clone() {
      return new GPerfGameInfo(this);
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_extensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> extensions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfGameInfo other) {
      if (other == null) {
        return;
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfUserInfo : pb::IMessage<GPerfUserInfo> {
    private static readonly pb::MessageParser<GPerfUserInfo> _parser = new pb::MessageParser<GPerfUserInfo>(() => new GPerfUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo(GPerfUserInfo other) : this() {
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo Clone() {
      return new GPerfUserInfo(this);
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_extensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> extensions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfUserInfo other) {
      if (other == null) {
        return;
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSample : pb::IMessage<GPerfSample> {
    private static readonly pb::MessageParser<GPerfSample> _parser = new pb::MessageParser<GPerfSample>(() => new GPerfSample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample(GPerfSample other) : this() {
      timestamp_ = other.timestamp_;
      frameIndex_ = other.frameIndex_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      systemMemory_ = other.systemMemory_ != null ? other.systemMemory_.Clone() : null;
      profilerMemory_ = other.profilerMemory_ != null ? other.profilerMemory_.Clone() : null;
      luaMemory_ = other.luaMemory_ != null ? other.luaMemory_.Clone() : null;
      battery_ = other.battery_ != null ? other.battery_.Clone() : null;
      cpu_ = other.cpu_ != null ? other.cpu_.Clone() : null;
      fps_ = other.fps_ != null ? other.fps_.Clone() : null;
      frameTime_ = other.frameTime_ != null ? other.frameTime_.Clone() : null;
      session_ = other.session_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample Clone() {
      return new GPerfSample(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "frame_index" field.</summary>
    public const int FrameIndexFieldNumber = 2;
    private int frameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameIndex {
      get { return frameIndex_; }
      set {
        frameIndex_ = value;
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 3;
    private global::Gperf.U3D.GPerfUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "system_memory" field.</summary>
    public const int SystemMemoryFieldNumber = 4;
    private global::Gperf.U3D.GPerfSystemMemory systemMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfSystemMemory SystemMemory {
      get { return systemMemory_; }
      set {
        systemMemory_ = value;
      }
    }

    /// <summary>Field number for the "profiler_memory" field.</summary>
    public const int ProfilerMemoryFieldNumber = 5;
    private global::Gperf.U3D.GPerfProfilerMemory profilerMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfProfilerMemory ProfilerMemory {
      get { return profilerMemory_; }
      set {
        profilerMemory_ = value;
      }
    }

    /// <summary>Field number for the "lua_memory" field.</summary>
    public const int LuaMemoryFieldNumber = 6;
    private global::Gperf.U3D.GPerfLuaMemory luaMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfLuaMemory LuaMemory {
      get { return luaMemory_; }
      set {
        luaMemory_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 7;
    private global::Gperf.U3D.GPerfBattery battery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfBattery Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 8;
    private global::Gperf.U3D.GPerfCPU cpu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfCPU Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 9;
    private global::Gperf.U3D.GPerfFPS fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfFPS Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "frame_time" field.</summary>
    public const int FrameTimeFieldNumber = 10;
    private global::Gperf.U3D.GPerfFrameTime frameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfFrameTime FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 11;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (FrameIndex != other.FrameIndex) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (!object.Equals(SystemMemory, other.SystemMemory)) return false;
      if (!object.Equals(ProfilerMemory, other.ProfilerMemory)) return false;
      if (!object.Equals(LuaMemory, other.LuaMemory)) return false;
      if (!object.Equals(Battery, other.Battery)) return false;
      if (!object.Equals(Cpu, other.Cpu)) return false;
      if (!object.Equals(Fps, other.Fps)) return false;
      if (!object.Equals(FrameTime, other.FrameTime)) return false;
      if (Session != other.Session) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (systemMemory_ != null) hash ^= SystemMemory.GetHashCode();
      if (profilerMemory_ != null) hash ^= ProfilerMemory.GetHashCode();
      if (luaMemory_ != null) hash ^= LuaMemory.GetHashCode();
      if (battery_ != null) hash ^= Battery.GetHashCode();
      if (cpu_ != null) hash ^= Cpu.GetHashCode();
      if (fps_ != null) hash ^= Fps.GetHashCode();
      if (frameTime_ != null) hash ^= FrameTime.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Timestamp);
      }
      if (FrameIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIndex);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInfo);
      }
      if (systemMemory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SystemMemory);
      }
      if (profilerMemory_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ProfilerMemory);
      }
      if (luaMemory_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LuaMemory);
      }
      if (battery_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Battery);
      }
      if (cpu_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Cpu);
      }
      if (fps_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Fps);
      }
      if (frameTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FrameTime);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Session);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + 4;
      }
      if (FrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (systemMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemMemory);
      }
      if (profilerMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfilerMemory);
      }
      if (luaMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LuaMemory);
      }
      if (battery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battery);
      }
      if (cpu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cpu);
      }
      if (fps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fps);
      }
      if (frameTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameTime);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSample other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.FrameIndex != 0) {
        FrameIndex = other.FrameIndex;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::Gperf.U3D.GPerfUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.systemMemory_ != null) {
        if (systemMemory_ == null) {
          SystemMemory = new global::Gperf.U3D.GPerfSystemMemory();
        }
        SystemMemory.MergeFrom(other.SystemMemory);
      }
      if (other.profilerMemory_ != null) {
        if (profilerMemory_ == null) {
          ProfilerMemory = new global::Gperf.U3D.GPerfProfilerMemory();
        }
        ProfilerMemory.MergeFrom(other.ProfilerMemory);
      }
      if (other.luaMemory_ != null) {
        if (luaMemory_ == null) {
          LuaMemory = new global::Gperf.U3D.GPerfLuaMemory();
        }
        LuaMemory.MergeFrom(other.LuaMemory);
      }
      if (other.battery_ != null) {
        if (battery_ == null) {
          Battery = new global::Gperf.U3D.GPerfBattery();
        }
        Battery.MergeFrom(other.Battery);
      }
      if (other.cpu_ != null) {
        if (cpu_ == null) {
          Cpu = new global::Gperf.U3D.GPerfCPU();
        }
        Cpu.MergeFrom(other.Cpu);
      }
      if (other.fps_ != null) {
        if (fps_ == null) {
          Fps = new global::Gperf.U3D.GPerfFPS();
        }
        Fps.MergeFrom(other.Fps);
      }
      if (other.frameTime_ != null) {
        if (frameTime_ == null) {
          FrameTime = new global::Gperf.U3D.GPerfFrameTime();
        }
        FrameTime.MergeFrom(other.FrameTime);
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 16: {
            FrameIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (userInfo_ == null) {
              UserInfo = new global::Gperf.U3D.GPerfUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 34: {
            if (systemMemory_ == null) {
              SystemMemory = new global::Gperf.U3D.GPerfSystemMemory();
            }
            input.ReadMessage(SystemMemory);
            break;
          }
          case 42: {
            if (profilerMemory_ == null) {
              ProfilerMemory = new global::Gperf.U3D.GPerfProfilerMemory();
            }
            input.ReadMessage(ProfilerMemory);
            break;
          }
          case 50: {
            if (luaMemory_ == null) {
              LuaMemory = new global::Gperf.U3D.GPerfLuaMemory();
            }
            input.ReadMessage(LuaMemory);
            break;
          }
          case 58: {
            if (battery_ == null) {
              Battery = new global::Gperf.U3D.GPerfBattery();
            }
            input.ReadMessage(Battery);
            break;
          }
          case 66: {
            if (cpu_ == null) {
              Cpu = new global::Gperf.U3D.GPerfCPU();
            }
            input.ReadMessage(Cpu);
            break;
          }
          case 74: {
            if (fps_ == null) {
              Fps = new global::Gperf.U3D.GPerfFPS();
            }
            input.ReadMessage(Fps);
            break;
          }
          case 82: {
            if (frameTime_ == null) {
              FrameTime = new global::Gperf.U3D.GPerfFrameTime();
            }
            input.ReadMessage(FrameTime);
            break;
          }
          case 90: {
            Session = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSession : pb::IMessage<GPerfSession> {
    private static readonly pb::MessageParser<GPerfSession> _parser = new pb::MessageParser<GPerfSession>(() => new GPerfSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession(GPerfSession other) : this() {
      app_ = other.app_ != null ? other.app_.Clone() : null;
      device_ = other.device_ != null ? other.device_.Clone() : null;
      gameInfo_ = other.gameInfo_ != null ? other.gameInfo_.Clone() : null;
      samples_ = other.samples_.Clone();
      extensions_ = other.extensions_.Clone();
      logs_ = other.logs_ != null ? other.logs_.Clone() : null;
      rawBlobSize_ = other.rawBlobSize_;
      timestamp_ = other.timestamp_;
      from_ = other.from_;
      to_ = other.to_;
      duration_ = other.duration_;
      session_ = other.session_;
      overview_ = other.overview_ != null ? other.overview_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession Clone() {
      return new GPerfSession(this);
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 1;
    private global::Gperf.U3D.GPerfApp app_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfApp App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 2;
    private global::Gperf.U3D.GPerfDevice device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfDevice Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 3;
    private global::Gperf.U3D.GPerfGameInfo gameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfGameInfo GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Gperf.U3D.GPerfSample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(34, global::Gperf.U3D.GPerfSample.Parser);
    private readonly pbc::RepeatedField<global::Gperf.U3D.GPerfSample> samples_ = new pbc::RepeatedField<global::Gperf.U3D.GPerfSample>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gperf.U3D.GPerfSample> Samples {
      get { return samples_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_extensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> extensions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 6;
    private global::Gperf.U3D.GPerfLog logs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfLog Logs {
      get { return logs_; }
      set {
        logs_ = value;
      }
    }

    /// <summary>Field number for the "raw_blob_size" field.</summary>
    public const int RawBlobSizeFieldNumber = 7;
    private int rawBlobSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RawBlobSize {
      get { return rawBlobSize_; }
      set {
        rawBlobSize_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 8;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 9;
    private long from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 10;
    private long to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 11;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 12;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overview" field.</summary>
    public const int OverviewFieldNumber = 13;
    private global::Gperf.U3D.GPerfOverview overview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfOverview Overview {
      get { return overview_; }
      set {
        overview_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(Device, other.Device)) return false;
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      if (!object.Equals(Logs, other.Logs)) return false;
      if (RawBlobSize != other.RawBlobSize) return false;
      if (Timestamp != other.Timestamp) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Duration != other.Duration) return false;
      if (Session != other.Session) return false;
      if (!object.Equals(Overview, other.Overview)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (app_ != null) hash ^= App.GetHashCode();
      if (device_ != null) hash ^= Device.GetHashCode();
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      hash ^= samples_.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (logs_ != null) hash ^= Logs.GetHashCode();
      if (RawBlobSize != 0) hash ^= RawBlobSize.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (From != 0L) hash ^= From.GetHashCode();
      if (To != 0L) hash ^= To.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (overview_ != null) hash ^= Overview.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (app_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(App);
      }
      if (device_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Device);
      }
      if (gameInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameInfo);
      }
      samples_.WriteTo(output, _repeated_samples_codec);
      extensions_.WriteTo(output, _map_extensions_codec);
      if (logs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Logs);
      }
      if (RawBlobSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RawBlobSize);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Timestamp);
      }
      if (From != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(From);
      }
      if (To != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(To);
      }
      if (Duration != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Duration);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Session);
      }
      if (overview_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Overview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      size += samples_.CalculateSize(_repeated_samples_codec);
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (logs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logs);
      }
      if (RawBlobSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RawBlobSize);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (From != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(From);
      }
      if (To != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(To);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (overview_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overview);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSession other) {
      if (other == null) {
        return;
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Gperf.U3D.GPerfApp();
        }
        App.MergeFrom(other.App);
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Gperf.U3D.GPerfDevice();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          GameInfo = new global::Gperf.U3D.GPerfGameInfo();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
      samples_.Add(other.samples_);
      extensions_.Add(other.extensions_);
      if (other.logs_ != null) {
        if (logs_ == null) {
          Logs = new global::Gperf.U3D.GPerfLog();
        }
        Logs.MergeFrom(other.Logs);
      }
      if (other.RawBlobSize != 0) {
        RawBlobSize = other.RawBlobSize;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.From != 0L) {
        From = other.From;
      }
      if (other.To != 0L) {
        To = other.To;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.overview_ != null) {
        if (overview_ == null) {
          Overview = new global::Gperf.U3D.GPerfOverview();
        }
        Overview.MergeFrom(other.Overview);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (app_ == null) {
              App = new global::Gperf.U3D.GPerfApp();
            }
            input.ReadMessage(App);
            break;
          }
          case 18: {
            if (device_ == null) {
              Device = new global::Gperf.U3D.GPerfDevice();
            }
            input.ReadMessage(Device);
            break;
          }
          case 26: {
            if (gameInfo_ == null) {
              GameInfo = new global::Gperf.U3D.GPerfGameInfo();
            }
            input.ReadMessage(GameInfo);
            break;
          }
          case 34: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
          case 50: {
            if (logs_ == null) {
              Logs = new global::Gperf.U3D.GPerfLog();
            }
            input.ReadMessage(Logs);
            break;
          }
          case 56: {
            RawBlobSize = input.ReadInt32();
            break;
          }
          case 66: {
            Timestamp = input.ReadString();
            break;
          }
          case 72: {
            From = input.ReadInt64();
            break;
          }
          case 80: {
            To = input.ReadInt64();
            break;
          }
          case 88: {
            Duration = input.ReadInt64();
            break;
          }
          case 98: {
            Session = input.ReadString();
            break;
          }
          case 106: {
            if (overview_ == null) {
              Overview = new global::Gperf.U3D.GPerfOverview();
            }
            input.ReadMessage(Overview);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfOverview : pb::IMessage<GPerfOverview> {
    private static readonly pb::MessageParser<GPerfOverview> _parser = new pb::MessageParser<GPerfOverview>(() => new GPerfOverview());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfOverview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfOverview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfOverview(GPerfOverview other) : this() {
      avgFps_ = other.avgFps_;
      peakMemPssKb_ = other.peakMemPssKb_;
      peakMemPssBytes_ = other.peakMemPssBytes_;
      maxDrawCall_ = other.maxDrawCall_;
      maxTriangles_ = other.maxTriangles_;
      maxTemperature_ = other.maxTemperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfOverview Clone() {
      return new GPerfOverview(this);
    }

    /// <summary>Field number for the "avg_fps" field.</summary>
    public const int AvgFpsFieldNumber = 1;
    private float avgFps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AvgFps {
      get { return avgFps_; }
      set {
        avgFps_ = value;
      }
    }

    /// <summary>Field number for the "peak_mem_pss_kb" field.</summary>
    public const int PeakMemPssKbFieldNumber = 2;
    private float peakMemPssKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PeakMemPssKb {
      get { return peakMemPssKb_; }
      set {
        peakMemPssKb_ = value;
      }
    }

    /// <summary>Field number for the "peak_mem_pss_bytes" field.</summary>
    public const int PeakMemPssBytesFieldNumber = 3;
    private float peakMemPssBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PeakMemPssBytes {
      get { return peakMemPssBytes_; }
      set {
        peakMemPssBytes_ = value;
      }
    }

    /// <summary>Field number for the "max_draw_call" field.</summary>
    public const int MaxDrawCallFieldNumber = 4;
    private float maxDrawCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDrawCall {
      get { return maxDrawCall_; }
      set {
        maxDrawCall_ = value;
      }
    }

    /// <summary>Field number for the "max_triangles" field.</summary>
    public const int MaxTrianglesFieldNumber = 5;
    private float maxTriangles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxTriangles {
      get { return maxTriangles_; }
      set {
        maxTriangles_ = value;
      }
    }

    /// <summary>Field number for the "max_temperature" field.</summary>
    public const int MaxTemperatureFieldNumber = 6;
    private float maxTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxTemperature {
      get { return maxTemperature_; }
      set {
        maxTemperature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfOverview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfOverview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgFps, other.AvgFps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PeakMemPssKb, other.PeakMemPssKb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PeakMemPssBytes, other.PeakMemPssBytes)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDrawCall, other.MaxDrawCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTriangles, other.MaxTriangles)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTemperature, other.MaxTemperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvgFps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgFps);
      if (PeakMemPssKb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PeakMemPssKb);
      if (PeakMemPssBytes != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PeakMemPssBytes);
      if (MaxDrawCall != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDrawCall);
      if (MaxTriangles != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTriangles);
      if (MaxTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTemperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvgFps != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AvgFps);
      }
      if (PeakMemPssKb != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PeakMemPssKb);
      }
      if (PeakMemPssBytes != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PeakMemPssBytes);
      }
      if (MaxDrawCall != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxDrawCall);
      }
      if (MaxTriangles != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxTriangles);
      }
      if (MaxTemperature != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MaxTemperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvgFps != 0F) {
        size += 1 + 4;
      }
      if (PeakMemPssKb != 0F) {
        size += 1 + 4;
      }
      if (PeakMemPssBytes != 0F) {
        size += 1 + 4;
      }
      if (MaxDrawCall != 0F) {
        size += 1 + 4;
      }
      if (MaxTriangles != 0F) {
        size += 1 + 4;
      }
      if (MaxTemperature != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfOverview other) {
      if (other == null) {
        return;
      }
      if (other.AvgFps != 0F) {
        AvgFps = other.AvgFps;
      }
      if (other.PeakMemPssKb != 0F) {
        PeakMemPssKb = other.PeakMemPssKb;
      }
      if (other.PeakMemPssBytes != 0F) {
        PeakMemPssBytes = other.PeakMemPssBytes;
      }
      if (other.MaxDrawCall != 0F) {
        MaxDrawCall = other.MaxDrawCall;
      }
      if (other.MaxTriangles != 0F) {
        MaxTriangles = other.MaxTriangles;
      }
      if (other.MaxTemperature != 0F) {
        MaxTemperature = other.MaxTemperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AvgFps = input.ReadFloat();
            break;
          }
          case 21: {
            PeakMemPssKb = input.ReadFloat();
            break;
          }
          case 29: {
            PeakMemPssBytes = input.ReadFloat();
            break;
          }
          case 37: {
            MaxDrawCall = input.ReadFloat();
            break;
          }
          case 45: {
            MaxTriangles = input.ReadFloat();
            break;
          }
          case 53: {
            MaxTemperature = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfLog : pb::IMessage<GPerfLog> {
    private static readonly pb::MessageParser<GPerfLog> _parser = new pb::MessageParser<GPerfLog>(() => new GPerfLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLog(GPerfLog other) : this() {
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLog Clone() {
      return new GPerfLog(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfLog other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
