/*The file was created by tool.
-----------------------------------------------
Please don't change it manually!!!
Please don't change it manually!!!
Please don't change it manually!!!
-----------------------------------------------
*/
using DotEngine.Net.Message;
using System;
using System.Collections.Generic;
using Google.Protobuf;
using DotEngine.Crypto;
using SnappySharp = Snappy.Sharp.Snappy;
using Game.Net.Protos;
<%+using DotTool.PBConfig;%>
<%string spaceName = context.Get<string>("spaceName");%>
<%string platform = context.Get<string>("platform");%>
<%ProtoGroup encodeProtoGroup = context.Get<ProtoGroup>("encodeProtoGroup");%>
<%ProtoGroup decodeProtoGroup = context.Get<ProtoGroup>("decodeProtoGroup");%>
namespace <%=spaceName%>
{
    public class <%=platform%>MessageParser : IMessageParser
    {
        public string SecretKey { get; set; }
        public string SecretVector{get;set;}

        private Dictionary<int,Func<object,byte[]>> encodeParserDic = new Dictionary<int,Func<object,byte[]>>();
        private Dictionary<int,Func<byte[],object>> decodeParserDic = new Dictionary<int,Func<byte[],object>>();

        public <%=platform%>MessageParser()
        {
<%foreach(var message in encodeProtoGroup.Messages){%>
            encodeParserDic.Add(<%=message.Id%>,<%=message.ClassName%>EncodeParser);<%-
%><%}%>
<%foreach(var message in decodeProtoGroup.Messages){%>
            decodeParserDic.Add(<%=message.Id%>,<%=message.ClassName%>DecodeParser);<%-
%><%}%>
        }

        public byte[] EncodeMessage(int messageID, object message)
        {
            if(encodeParserDic.TryGetValue(messageID,out Func<object,byte[]> parser))
            {
                return parser(message);
            }
            return null;
        }

        public object DecodeMessage(int messageID, byte[] bytes)
        {
            if(decodeParserDic.TryGetValue(messageID,out Func<byte[],object> parser))
            {
                return parser(bytes);
            }
            return null;
        }

<%foreach(var message in encodeProtoGroup.Messages){%>
        private byte[] <%=message.ClassName%>EncodeParser(object message)
        {
            IMessage m = (IMessage)message;
            byte[] messageBytes = m.ToByteArray();
<%if(message.IsCrypto){%>
            messageBytes = AESCrypto.Encrypt(messageBytes, SecretKey, SecretVector);
<%}%>
<%if(message.IsCompress){%>
            messageBytes = SnappySharp.Compress(messageBytes);
<%}%>
            return messageBytes;
        }
<%}%>

<%foreach(var message in decodeProtoGroup.Messages){%>
        private object <%=message.ClassName%>DecodeParser(byte[] bytes)
        {
            byte[] messageBytes = bytes;
<%if(message.IsCompress){%>
            messageBytes = SnappySharp.Uncompress(messageBytes);
<%}%>
<%if(message.IsCrypto){%>
            messageBytes = AESCrypto.Decrypt(messageBytes, SecretKey, SecretVector);
<%}%>
            return <%=message.ClassName%>.Parser.ParseFrom(messageBytes);
        }
<%}%>
    }
}