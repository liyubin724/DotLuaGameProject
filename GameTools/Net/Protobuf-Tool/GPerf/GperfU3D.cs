// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gperf-u3d.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gperf.U3D {

  /// <summary>Holder for reflection information generated from gperf-u3d.proto</summary>
  public static partial class GperfU3DReflection {

    #region Descriptor
    /// <summary>File descriptor for gperf-u3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GperfU3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ncGVyZi11M2QucHJvdG8SCWdwZXJmLnUzZCJcCghHUGVyZkFwcBISCgpp",
            "ZGVudGlmaWVyGAEgASgJEhQKDHByb2R1Y3RfbmFtZRgCIAEoCRIPCgd2ZXJz",
            "aW9uGAMgASgJEhUKDXVuaXR5X3ZlcnNpb24YBCABKAkiRQoLR1BlcmZEZXZp",
            "Y2USDQoFbW9kZWwYASABKAkSDAoEbmFtZRgCIAEoCRIZChF1bmlxdWVfaWRl",
            "bnRpZmllchgDIAEoCSJxChFHUGVyZlN5c3RlbU1lbW9yeRINCgV0b3RhbBgB",
            "IAEoAxIQCghhdmFpbGJsZRgCIAEoAxIRCgl0aHJlc2hvbGQYAyABKAMSDgoG",
            "aXNfbG93GAQgASgIEgsKA3BzcxgFIAEoAxILCgNyc3MYBiABKAMi6AEKE0dQ",
            "ZXJmUHJvZmlsZXJNZW1vcnkSFgoObW9ub19oZWFwX3NpemUYASABKAMSFgoO",
            "bW9ub191c2VkX3NpemUYAiABKAMSGwoTdGVtcF9hbGxvY2F0b3Jfc2l6ZRgD",
            "IAEoAxIcChR0b3RhbF9hbGxvY2F0b3Jfc2l6ZRgEIAEoAxIbChN0b3RhbF9y",
            "ZXNlcnZlZF9zaXplGAUgASgDEiIKGnRvdGFsX3VudXNlZF9yZXNlcnZlZF9z",
            "aXplGAYgASgDEiUKHWFsbG9jYXRlZF9mb3JfZ3JhcGhpY3NfZHJpdmVyGAcg",
            "ASgDIh8KDkdQZXJmTHVhTWVtb3J5Eg0KBXRvdGFsGAEgASgCIkEKDEdQZXJm",
            "QmF0dGVyeRITCgt0ZW1wZXJhdHVyZRgBIAEoAhIOCgZzdGF0dXMYAiABKAUS",
            "DAoEcmF0ZRgDIAEoAiJdCghHUGVyZkNQVRISCgpjb3JlX2NvdW50GAEgASgF",
            "EhEKCWZyZXF1ZW5jeRgCIAEoBRISCgp1c2FnZV9yYXRlGAMgASgCEhYKDmNv",
            "cmVfZnJlcXVlbmN5GAQgAygFIhcKCEdQZXJmRlBTEgsKA2ZwcxgBIAEoBSKp",
            "AQoOR1BlcmZGcmFtZVRpbWUSGAoQcGxheWVyX2xvb3BfdGltZRgBIAEoBRIW",
            "Cg5yZW5kZXJpbmdfdGltZRgCIAEoBRITCgtzY3JpcHRfdGltZRgDIAEoBRIU",
            "CgxwaHlzaWNzX3RpbWUYBCABKAUSFgoOYW5pbWF0aW9uX3RpbWUYBSABKAUS",
            "EAoIY3B1X3RpbWUYBiABKAISEAoIZ3B1X3RpbWUYByABKAIigAEKDUdQZXJm",
            "R2FtZUluZm8SPAoKZXh0ZW5zaW9ucxgBIAMoCzIoLmdwZXJmLnUzZC5HUGVy",
            "ZkdhbWVJbmZvLkV4dGVuc2lvbnNFbnRyeRoxCg9FeHRlbnNpb25zRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKAAQoNR1BlcmZVc2Vy",
            "SW5mbxI8CgpleHRlbnNpb25zGAEgAygLMiguZ3BlcmYudTNkLkdQZXJmVXNl",
            "ckluZm8uRXh0ZW5zaW9uc0VudHJ5GjEKD0V4dGVuc2lvbnNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpwDCgtHUGVyZlNhbXBsZRIR",
            "Cgl0aW1lc3RhbXAYASABKAUSEwoLZnJhbWVfaW5kZXgYAiABKAUSKwoJdXNl",
            "cl9pbmZvGAMgASgLMhguZ3BlcmYudTNkLkdQZXJmVXNlckluZm8SMwoNc3lz",
            "dGVtX21lbW9yeRgEIAEoCzIcLmdwZXJmLnUzZC5HUGVyZlN5c3RlbU1lbW9y",
            "eRI3Cg9wcm9maWxlcl9tZW1vcnkYBSABKAsyHi5ncGVyZi51M2QuR1BlcmZQ",
            "cm9maWxlck1lbW9yeRItCgpsdWFfbWVtb3J5GAYgASgLMhkuZ3BlcmYudTNk",
            "LkdQZXJmTHVhTWVtb3J5EigKB2JhdHRlcnkYByABKAsyFy5ncGVyZi51M2Qu",
            "R1BlcmZCYXR0ZXJ5EiAKA2NwdRgIIAEoCzITLmdwZXJmLnUzZC5HUGVyZkNQ",
            "VRIgCgNmcHMYCSABKAsyEy5ncGVyZi51M2QuR1BlcmZGUFMSLQoKZnJhbWVf",
            "dGltZRgKIAEoCzIZLmdwZXJmLnUzZC5HUGVyZkZyYW1lVGltZSKeAgoMR1Bl",
            "cmZTZXNzaW9uEiAKA2FwcBgBIAEoCzITLmdwZXJmLnUzZC5HUGVyZkFwcBIm",
            "CgZkZXZpY2UYAiABKAsyFi5ncGVyZi51M2QuR1BlcmZEZXZpY2USKwoJZ2Ft",
            "ZV9pbmZvGAMgASgLMhguZ3BlcmYudTNkLkdQZXJmR2FtZUluZm8SJwoHc2Ft",
            "cGxlcxgEIAMoCzIWLmdwZXJmLnUzZC5HUGVyZlNhbXBsZRI7CgpleHRlcnNp",
            "b25zGAUgAygLMicuZ3BlcmYudTNkLkdQZXJmU2Vzc2lvbi5FeHRlcnNpb25z",
            "RW50cnkaMQoPRXh0ZXJzaW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAFCMAoYY29tLmtpbmdzb2Z0LnRjLmdwZXJmLnBiQhBHUGVy",
            "ZlVuaXR5UHJvdG9zSAFQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfApp), global::Gperf.U3D.GPerfApp.Parser, new[]{ "Identifier", "ProductName", "Version", "UnityVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfDevice), global::Gperf.U3D.GPerfDevice.Parser, new[]{ "Model", "Name", "UniqueIdentifier" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSystemMemory), global::Gperf.U3D.GPerfSystemMemory.Parser, new[]{ "Total", "Availble", "Threshold", "IsLow", "Pss", "Rss" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfProfilerMemory), global::Gperf.U3D.GPerfProfilerMemory.Parser, new[]{ "MonoHeapSize", "MonoUsedSize", "TempAllocatorSize", "TotalAllocatorSize", "TotalReservedSize", "TotalUnusedReservedSize", "AllocatedForGraphicsDriver" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfLuaMemory), global::Gperf.U3D.GPerfLuaMemory.Parser, new[]{ "Total" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfBattery), global::Gperf.U3D.GPerfBattery.Parser, new[]{ "Temperature", "Status", "Rate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfCPU), global::Gperf.U3D.GPerfCPU.Parser, new[]{ "CoreCount", "Frequency", "UsageRate", "CoreFrequency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfFPS), global::Gperf.U3D.GPerfFPS.Parser, new[]{ "Fps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfFrameTime), global::Gperf.U3D.GPerfFrameTime.Parser, new[]{ "PlayerLoopTime", "RenderingTime", "ScriptTime", "PhysicsTime", "AnimationTime", "CpuTime", "GpuTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfGameInfo), global::Gperf.U3D.GPerfGameInfo.Parser, new[]{ "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfUserInfo), global::Gperf.U3D.GPerfUserInfo.Parser, new[]{ "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSample), global::Gperf.U3D.GPerfSample.Parser, new[]{ "Timestamp", "FrameIndex", "UserInfo", "SystemMemory", "ProfilerMemory", "LuaMemory", "Battery", "Cpu", "Fps", "FrameTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gperf.U3D.GPerfSession), global::Gperf.U3D.GPerfSession.Parser, new[]{ "App", "Device", "GameInfo", "Samples", "Extersions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GPerfApp : pb::IMessage<GPerfApp> {
    private static readonly pb::MessageParser<GPerfApp> _parser = new pb::MessageParser<GPerfApp>(() => new GPerfApp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfApp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp(GPerfApp other) : this() {
      identifier_ = other.identifier_;
      productName_ = other.productName_;
      version_ = other.version_;
      unityVersion_ = other.unityVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfApp Clone() {
      return new GPerfApp(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 2;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unity_version" field.</summary>
    public const int UnityVersionFieldNumber = 4;
    private string unityVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnityVersion {
      get { return unityVersion_; }
      set {
        unityVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfApp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfApp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      if (ProductName != other.ProductName) return false;
      if (Version != other.Version) return false;
      if (UnityVersion != other.UnityVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (UnityVersion.Length != 0) hash ^= UnityVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductName);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (UnityVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnityVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (UnityVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnityVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfApp other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.UnityVersion.Length != 0) {
        UnityVersion = other.UnityVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 18: {
            ProductName = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            UnityVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfDevice : pb::IMessage<GPerfDevice> {
    private static readonly pb::MessageParser<GPerfDevice> _parser = new pb::MessageParser<GPerfDevice>(() => new GPerfDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice(GPerfDevice other) : this() {
      model_ = other.model_;
      name_ = other.name_;
      uniqueIdentifier_ = other.uniqueIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfDevice Clone() {
      return new GPerfDevice(this);
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 1;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_identifier" field.</summary>
    public const int UniqueIdentifierFieldNumber = 3;
    private string uniqueIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueIdentifier {
      get { return uniqueIdentifier_; }
      set {
        uniqueIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Model != other.Model) return false;
      if (Name != other.Name) return false;
      if (UniqueIdentifier != other.UniqueIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UniqueIdentifier.Length != 0) hash ^= UniqueIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Model.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Model);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UniqueIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UniqueIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfDevice other) {
      if (other == null) {
        return;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UniqueIdentifier.Length != 0) {
        UniqueIdentifier = other.UniqueIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Model = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            UniqueIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSystemMemory : pb::IMessage<GPerfSystemMemory> {
    private static readonly pb::MessageParser<GPerfSystemMemory> _parser = new pb::MessageParser<GPerfSystemMemory>(() => new GPerfSystemMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSystemMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory(GPerfSystemMemory other) : this() {
      total_ = other.total_;
      availble_ = other.availble_;
      threshold_ = other.threshold_;
      isLow_ = other.isLow_;
      pss_ = other.pss_;
      rss_ = other.rss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSystemMemory Clone() {
      return new GPerfSystemMemory(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "availble" field.</summary>
    public const int AvailbleFieldNumber = 2;
    private long availble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Availble {
      get { return availble_; }
      set {
        availble_ = value;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 3;
    private long threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "is_low" field.</summary>
    public const int IsLowFieldNumber = 4;
    private bool isLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLow {
      get { return isLow_; }
      set {
        isLow_ = value;
      }
    }

    /// <summary>Field number for the "pss" field.</summary>
    public const int PssFieldNumber = 5;
    private long pss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pss {
      get { return pss_; }
      set {
        pss_ = value;
      }
    }

    /// <summary>Field number for the "rss" field.</summary>
    public const int RssFieldNumber = 6;
    private long rss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rss {
      get { return rss_; }
      set {
        rss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSystemMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSystemMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Availble != other.Availble) return false;
      if (Threshold != other.Threshold) return false;
      if (IsLow != other.IsLow) return false;
      if (Pss != other.Pss) return false;
      if (Rss != other.Rss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (Availble != 0L) hash ^= Availble.GetHashCode();
      if (Threshold != 0L) hash ^= Threshold.GetHashCode();
      if (IsLow != false) hash ^= IsLow.GetHashCode();
      if (Pss != 0L) hash ^= Pss.GetHashCode();
      if (Rss != 0L) hash ^= Rss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Total);
      }
      if (Availble != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Availble);
      }
      if (Threshold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Threshold);
      }
      if (IsLow != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLow);
      }
      if (Pss != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Pss);
      }
      if (Rss != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Rss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (Availble != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Availble);
      }
      if (Threshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Threshold);
      }
      if (IsLow != false) {
        size += 1 + 1;
      }
      if (Pss != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pss);
      }
      if (Rss != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rss);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSystemMemory other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.Availble != 0L) {
        Availble = other.Availble;
      }
      if (other.Threshold != 0L) {
        Threshold = other.Threshold;
      }
      if (other.IsLow != false) {
        IsLow = other.IsLow;
      }
      if (other.Pss != 0L) {
        Pss = other.Pss;
      }
      if (other.Rss != 0L) {
        Rss = other.Rss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Total = input.ReadInt64();
            break;
          }
          case 16: {
            Availble = input.ReadInt64();
            break;
          }
          case 24: {
            Threshold = input.ReadInt64();
            break;
          }
          case 32: {
            IsLow = input.ReadBool();
            break;
          }
          case 40: {
            Pss = input.ReadInt64();
            break;
          }
          case 48: {
            Rss = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfProfilerMemory : pb::IMessage<GPerfProfilerMemory> {
    private static readonly pb::MessageParser<GPerfProfilerMemory> _parser = new pb::MessageParser<GPerfProfilerMemory>(() => new GPerfProfilerMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfProfilerMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory(GPerfProfilerMemory other) : this() {
      monoHeapSize_ = other.monoHeapSize_;
      monoUsedSize_ = other.monoUsedSize_;
      tempAllocatorSize_ = other.tempAllocatorSize_;
      totalAllocatorSize_ = other.totalAllocatorSize_;
      totalReservedSize_ = other.totalReservedSize_;
      totalUnusedReservedSize_ = other.totalUnusedReservedSize_;
      allocatedForGraphicsDriver_ = other.allocatedForGraphicsDriver_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfProfilerMemory Clone() {
      return new GPerfProfilerMemory(this);
    }

    /// <summary>Field number for the "mono_heap_size" field.</summary>
    public const int MonoHeapSizeFieldNumber = 1;
    private long monoHeapSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonoHeapSize {
      get { return monoHeapSize_; }
      set {
        monoHeapSize_ = value;
      }
    }

    /// <summary>Field number for the "mono_used_size" field.</summary>
    public const int MonoUsedSizeFieldNumber = 2;
    private long monoUsedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonoUsedSize {
      get { return monoUsedSize_; }
      set {
        monoUsedSize_ = value;
      }
    }

    /// <summary>Field number for the "temp_allocator_size" field.</summary>
    public const int TempAllocatorSizeFieldNumber = 3;
    private long tempAllocatorSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TempAllocatorSize {
      get { return tempAllocatorSize_; }
      set {
        tempAllocatorSize_ = value;
      }
    }

    /// <summary>Field number for the "total_allocator_size" field.</summary>
    public const int TotalAllocatorSizeFieldNumber = 4;
    private long totalAllocatorSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAllocatorSize {
      get { return totalAllocatorSize_; }
      set {
        totalAllocatorSize_ = value;
      }
    }

    /// <summary>Field number for the "total_reserved_size" field.</summary>
    public const int TotalReservedSizeFieldNumber = 5;
    private long totalReservedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalReservedSize {
      get { return totalReservedSize_; }
      set {
        totalReservedSize_ = value;
      }
    }

    /// <summary>Field number for the "total_unused_reserved_size" field.</summary>
    public const int TotalUnusedReservedSizeFieldNumber = 6;
    private long totalUnusedReservedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalUnusedReservedSize {
      get { return totalUnusedReservedSize_; }
      set {
        totalUnusedReservedSize_ = value;
      }
    }

    /// <summary>Field number for the "allocated_for_graphics_driver" field.</summary>
    public const int AllocatedForGraphicsDriverFieldNumber = 7;
    private long allocatedForGraphicsDriver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocatedForGraphicsDriver {
      get { return allocatedForGraphicsDriver_; }
      set {
        allocatedForGraphicsDriver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfProfilerMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfProfilerMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonoHeapSize != other.MonoHeapSize) return false;
      if (MonoUsedSize != other.MonoUsedSize) return false;
      if (TempAllocatorSize != other.TempAllocatorSize) return false;
      if (TotalAllocatorSize != other.TotalAllocatorSize) return false;
      if (TotalReservedSize != other.TotalReservedSize) return false;
      if (TotalUnusedReservedSize != other.TotalUnusedReservedSize) return false;
      if (AllocatedForGraphicsDriver != other.AllocatedForGraphicsDriver) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonoHeapSize != 0L) hash ^= MonoHeapSize.GetHashCode();
      if (MonoUsedSize != 0L) hash ^= MonoUsedSize.GetHashCode();
      if (TempAllocatorSize != 0L) hash ^= TempAllocatorSize.GetHashCode();
      if (TotalAllocatorSize != 0L) hash ^= TotalAllocatorSize.GetHashCode();
      if (TotalReservedSize != 0L) hash ^= TotalReservedSize.GetHashCode();
      if (TotalUnusedReservedSize != 0L) hash ^= TotalUnusedReservedSize.GetHashCode();
      if (AllocatedForGraphicsDriver != 0L) hash ^= AllocatedForGraphicsDriver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonoHeapSize != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MonoHeapSize);
      }
      if (MonoUsedSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MonoUsedSize);
      }
      if (TempAllocatorSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TempAllocatorSize);
      }
      if (TotalAllocatorSize != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalAllocatorSize);
      }
      if (TotalReservedSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalReservedSize);
      }
      if (TotalUnusedReservedSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalUnusedReservedSize);
      }
      if (AllocatedForGraphicsDriver != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AllocatedForGraphicsDriver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonoHeapSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonoHeapSize);
      }
      if (MonoUsedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonoUsedSize);
      }
      if (TempAllocatorSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TempAllocatorSize);
      }
      if (TotalAllocatorSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAllocatorSize);
      }
      if (TotalReservedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalReservedSize);
      }
      if (TotalUnusedReservedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalUnusedReservedSize);
      }
      if (AllocatedForGraphicsDriver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocatedForGraphicsDriver);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfProfilerMemory other) {
      if (other == null) {
        return;
      }
      if (other.MonoHeapSize != 0L) {
        MonoHeapSize = other.MonoHeapSize;
      }
      if (other.MonoUsedSize != 0L) {
        MonoUsedSize = other.MonoUsedSize;
      }
      if (other.TempAllocatorSize != 0L) {
        TempAllocatorSize = other.TempAllocatorSize;
      }
      if (other.TotalAllocatorSize != 0L) {
        TotalAllocatorSize = other.TotalAllocatorSize;
      }
      if (other.TotalReservedSize != 0L) {
        TotalReservedSize = other.TotalReservedSize;
      }
      if (other.TotalUnusedReservedSize != 0L) {
        TotalUnusedReservedSize = other.TotalUnusedReservedSize;
      }
      if (other.AllocatedForGraphicsDriver != 0L) {
        AllocatedForGraphicsDriver = other.AllocatedForGraphicsDriver;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonoHeapSize = input.ReadInt64();
            break;
          }
          case 16: {
            MonoUsedSize = input.ReadInt64();
            break;
          }
          case 24: {
            TempAllocatorSize = input.ReadInt64();
            break;
          }
          case 32: {
            TotalAllocatorSize = input.ReadInt64();
            break;
          }
          case 40: {
            TotalReservedSize = input.ReadInt64();
            break;
          }
          case 48: {
            TotalUnusedReservedSize = input.ReadInt64();
            break;
          }
          case 56: {
            AllocatedForGraphicsDriver = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfLuaMemory : pb::IMessage<GPerfLuaMemory> {
    private static readonly pb::MessageParser<GPerfLuaMemory> _parser = new pb::MessageParser<GPerfLuaMemory>(() => new GPerfLuaMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfLuaMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory(GPerfLuaMemory other) : this() {
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfLuaMemory Clone() {
      return new GPerfLuaMemory(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private float total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfLuaMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfLuaMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Total, other.Total)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Total);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfLuaMemory other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0F) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Total = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfBattery : pb::IMessage<GPerfBattery> {
    private static readonly pb::MessageParser<GPerfBattery> _parser = new pb::MessageParser<GPerfBattery>(() => new GPerfBattery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfBattery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery(GPerfBattery other) : this() {
      temperature_ = other.temperature_;
      status_ = other.status_;
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfBattery Clone() {
      return new GPerfBattery(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private float temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 3;
    private float rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfBattery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfBattery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Temperature != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Rate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Temperature != 0F) {
        size += 1 + 4;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Rate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfBattery other) {
      if (other == null) {
        return;
      }
      if (other.Temperature != 0F) {
        Temperature = other.Temperature;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 29: {
            Rate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfCPU : pb::IMessage<GPerfCPU> {
    private static readonly pb::MessageParser<GPerfCPU> _parser = new pb::MessageParser<GPerfCPU>(() => new GPerfCPU());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfCPU> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU(GPerfCPU other) : this() {
      coreCount_ = other.coreCount_;
      frequency_ = other.frequency_;
      usageRate_ = other.usageRate_;
      coreFrequency_ = other.coreFrequency_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfCPU Clone() {
      return new GPerfCPU(this);
    }

    /// <summary>Field number for the "core_count" field.</summary>
    public const int CoreCountFieldNumber = 1;
    private int coreCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoreCount {
      get { return coreCount_; }
      set {
        coreCount_ = value;
      }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 2;
    private int frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "usage_rate" field.</summary>
    public const int UsageRateFieldNumber = 3;
    private float usageRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UsageRate {
      get { return usageRate_; }
      set {
        usageRate_ = value;
      }
    }

    /// <summary>Field number for the "core_frequency" field.</summary>
    public const int CoreFrequencyFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_coreFrequency_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> coreFrequency_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CoreFrequency {
      get { return coreFrequency_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfCPU);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfCPU other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoreCount != other.CoreCount) return false;
      if (Frequency != other.Frequency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UsageRate, other.UsageRate)) return false;
      if(!coreFrequency_.Equals(other.coreFrequency_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoreCount != 0) hash ^= CoreCount.GetHashCode();
      if (Frequency != 0) hash ^= Frequency.GetHashCode();
      if (UsageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UsageRate);
      hash ^= coreFrequency_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CoreCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CoreCount);
      }
      if (Frequency != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frequency);
      }
      if (UsageRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(UsageRate);
      }
      coreFrequency_.WriteTo(output, _repeated_coreFrequency_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoreCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoreCount);
      }
      if (Frequency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frequency);
      }
      if (UsageRate != 0F) {
        size += 1 + 4;
      }
      size += coreFrequency_.CalculateSize(_repeated_coreFrequency_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfCPU other) {
      if (other == null) {
        return;
      }
      if (other.CoreCount != 0) {
        CoreCount = other.CoreCount;
      }
      if (other.Frequency != 0) {
        Frequency = other.Frequency;
      }
      if (other.UsageRate != 0F) {
        UsageRate = other.UsageRate;
      }
      coreFrequency_.Add(other.coreFrequency_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CoreCount = input.ReadInt32();
            break;
          }
          case 16: {
            Frequency = input.ReadInt32();
            break;
          }
          case 29: {
            UsageRate = input.ReadFloat();
            break;
          }
          case 34:
          case 32: {
            coreFrequency_.AddEntriesFrom(input, _repeated_coreFrequency_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfFPS : pb::IMessage<GPerfFPS> {
    private static readonly pb::MessageParser<GPerfFPS> _parser = new pb::MessageParser<GPerfFPS>(() => new GPerfFPS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfFPS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS(GPerfFPS other) : this() {
      fps_ = other.fps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFPS Clone() {
      return new GPerfFPS(this);
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 1;
    private int fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfFPS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfFPS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fps != other.Fps) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fps != 0) hash ^= Fps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fps != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Fps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfFPS other) {
      if (other == null) {
        return;
      }
      if (other.Fps != 0) {
        Fps = other.Fps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fps = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfFrameTime : pb::IMessage<GPerfFrameTime> {
    private static readonly pb::MessageParser<GPerfFrameTime> _parser = new pb::MessageParser<GPerfFrameTime>(() => new GPerfFrameTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfFrameTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime(GPerfFrameTime other) : this() {
      playerLoopTime_ = other.playerLoopTime_;
      renderingTime_ = other.renderingTime_;
      scriptTime_ = other.scriptTime_;
      physicsTime_ = other.physicsTime_;
      animationTime_ = other.animationTime_;
      cpuTime_ = other.cpuTime_;
      gpuTime_ = other.gpuTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfFrameTime Clone() {
      return new GPerfFrameTime(this);
    }

    /// <summary>Field number for the "player_loop_time" field.</summary>
    public const int PlayerLoopTimeFieldNumber = 1;
    private int playerLoopTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLoopTime {
      get { return playerLoopTime_; }
      set {
        playerLoopTime_ = value;
      }
    }

    /// <summary>Field number for the "rendering_time" field.</summary>
    public const int RenderingTimeFieldNumber = 2;
    private int renderingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RenderingTime {
      get { return renderingTime_; }
      set {
        renderingTime_ = value;
      }
    }

    /// <summary>Field number for the "script_time" field.</summary>
    public const int ScriptTimeFieldNumber = 3;
    private int scriptTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScriptTime {
      get { return scriptTime_; }
      set {
        scriptTime_ = value;
      }
    }

    /// <summary>Field number for the "physics_time" field.</summary>
    public const int PhysicsTimeFieldNumber = 4;
    private int physicsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhysicsTime {
      get { return physicsTime_; }
      set {
        physicsTime_ = value;
      }
    }

    /// <summary>Field number for the "animation_time" field.</summary>
    public const int AnimationTimeFieldNumber = 5;
    private int animationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationTime {
      get { return animationTime_; }
      set {
        animationTime_ = value;
      }
    }

    /// <summary>Field number for the "cpu_time" field.</summary>
    public const int CpuTimeFieldNumber = 6;
    private float cpuTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpuTime {
      get { return cpuTime_; }
      set {
        cpuTime_ = value;
      }
    }

    /// <summary>Field number for the "gpu_time" field.</summary>
    public const int GpuTimeFieldNumber = 7;
    private float gpuTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GpuTime {
      get { return gpuTime_; }
      set {
        gpuTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfFrameTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfFrameTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerLoopTime != other.PlayerLoopTime) return false;
      if (RenderingTime != other.RenderingTime) return false;
      if (ScriptTime != other.ScriptTime) return false;
      if (PhysicsTime != other.PhysicsTime) return false;
      if (AnimationTime != other.AnimationTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuTime, other.CpuTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GpuTime, other.GpuTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerLoopTime != 0) hash ^= PlayerLoopTime.GetHashCode();
      if (RenderingTime != 0) hash ^= RenderingTime.GetHashCode();
      if (ScriptTime != 0) hash ^= ScriptTime.GetHashCode();
      if (PhysicsTime != 0) hash ^= PhysicsTime.GetHashCode();
      if (AnimationTime != 0) hash ^= AnimationTime.GetHashCode();
      if (CpuTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuTime);
      if (GpuTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GpuTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerLoopTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerLoopTime);
      }
      if (RenderingTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RenderingTime);
      }
      if (ScriptTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScriptTime);
      }
      if (PhysicsTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PhysicsTime);
      }
      if (AnimationTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AnimationTime);
      }
      if (CpuTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CpuTime);
      }
      if (GpuTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(GpuTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerLoopTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLoopTime);
      }
      if (RenderingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderingTime);
      }
      if (ScriptTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScriptTime);
      }
      if (PhysicsTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhysicsTime);
      }
      if (AnimationTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationTime);
      }
      if (CpuTime != 0F) {
        size += 1 + 4;
      }
      if (GpuTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfFrameTime other) {
      if (other == null) {
        return;
      }
      if (other.PlayerLoopTime != 0) {
        PlayerLoopTime = other.PlayerLoopTime;
      }
      if (other.RenderingTime != 0) {
        RenderingTime = other.RenderingTime;
      }
      if (other.ScriptTime != 0) {
        ScriptTime = other.ScriptTime;
      }
      if (other.PhysicsTime != 0) {
        PhysicsTime = other.PhysicsTime;
      }
      if (other.AnimationTime != 0) {
        AnimationTime = other.AnimationTime;
      }
      if (other.CpuTime != 0F) {
        CpuTime = other.CpuTime;
      }
      if (other.GpuTime != 0F) {
        GpuTime = other.GpuTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerLoopTime = input.ReadInt32();
            break;
          }
          case 16: {
            RenderingTime = input.ReadInt32();
            break;
          }
          case 24: {
            ScriptTime = input.ReadInt32();
            break;
          }
          case 32: {
            PhysicsTime = input.ReadInt32();
            break;
          }
          case 40: {
            AnimationTime = input.ReadInt32();
            break;
          }
          case 53: {
            CpuTime = input.ReadFloat();
            break;
          }
          case 61: {
            GpuTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfGameInfo : pb::IMessage<GPerfGameInfo> {
    private static readonly pb::MessageParser<GPerfGameInfo> _parser = new pb::MessageParser<GPerfGameInfo>(() => new GPerfGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo(GPerfGameInfo other) : this() {
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfGameInfo Clone() {
      return new GPerfGameInfo(this);
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_extensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> extensions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfGameInfo other) {
      if (other == null) {
        return;
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfUserInfo : pb::IMessage<GPerfUserInfo> {
    private static readonly pb::MessageParser<GPerfUserInfo> _parser = new pb::MessageParser<GPerfUserInfo>(() => new GPerfUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo(GPerfUserInfo other) : this() {
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfUserInfo Clone() {
      return new GPerfUserInfo(this);
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_extensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> extensions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfUserInfo other) {
      if (other == null) {
        return;
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSample : pb::IMessage<GPerfSample> {
    private static readonly pb::MessageParser<GPerfSample> _parser = new pb::MessageParser<GPerfSample>(() => new GPerfSample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample(GPerfSample other) : this() {
      timestamp_ = other.timestamp_;
      frameIndex_ = other.frameIndex_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      systemMemory_ = other.systemMemory_ != null ? other.systemMemory_.Clone() : null;
      profilerMemory_ = other.profilerMemory_ != null ? other.profilerMemory_.Clone() : null;
      luaMemory_ = other.luaMemory_ != null ? other.luaMemory_.Clone() : null;
      battery_ = other.battery_ != null ? other.battery_.Clone() : null;
      cpu_ = other.cpu_ != null ? other.cpu_.Clone() : null;
      fps_ = other.fps_ != null ? other.fps_.Clone() : null;
      frameTime_ = other.frameTime_ != null ? other.frameTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSample Clone() {
      return new GPerfSample(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "frame_index" field.</summary>
    public const int FrameIndexFieldNumber = 2;
    private int frameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameIndex {
      get { return frameIndex_; }
      set {
        frameIndex_ = value;
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 3;
    private global::Gperf.U3D.GPerfUserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "system_memory" field.</summary>
    public const int SystemMemoryFieldNumber = 4;
    private global::Gperf.U3D.GPerfSystemMemory systemMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfSystemMemory SystemMemory {
      get { return systemMemory_; }
      set {
        systemMemory_ = value;
      }
    }

    /// <summary>Field number for the "profiler_memory" field.</summary>
    public const int ProfilerMemoryFieldNumber = 5;
    private global::Gperf.U3D.GPerfProfilerMemory profilerMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfProfilerMemory ProfilerMemory {
      get { return profilerMemory_; }
      set {
        profilerMemory_ = value;
      }
    }

    /// <summary>Field number for the "lua_memory" field.</summary>
    public const int LuaMemoryFieldNumber = 6;
    private global::Gperf.U3D.GPerfLuaMemory luaMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfLuaMemory LuaMemory {
      get { return luaMemory_; }
      set {
        luaMemory_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 7;
    private global::Gperf.U3D.GPerfBattery battery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfBattery Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 8;
    private global::Gperf.U3D.GPerfCPU cpu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfCPU Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 9;
    private global::Gperf.U3D.GPerfFPS fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfFPS Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "frame_time" field.</summary>
    public const int FrameTimeFieldNumber = 10;
    private global::Gperf.U3D.GPerfFrameTime frameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfFrameTime FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (FrameIndex != other.FrameIndex) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (!object.Equals(SystemMemory, other.SystemMemory)) return false;
      if (!object.Equals(ProfilerMemory, other.ProfilerMemory)) return false;
      if (!object.Equals(LuaMemory, other.LuaMemory)) return false;
      if (!object.Equals(Battery, other.Battery)) return false;
      if (!object.Equals(Cpu, other.Cpu)) return false;
      if (!object.Equals(Fps, other.Fps)) return false;
      if (!object.Equals(FrameTime, other.FrameTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (systemMemory_ != null) hash ^= SystemMemory.GetHashCode();
      if (profilerMemory_ != null) hash ^= ProfilerMemory.GetHashCode();
      if (luaMemory_ != null) hash ^= LuaMemory.GetHashCode();
      if (battery_ != null) hash ^= Battery.GetHashCode();
      if (cpu_ != null) hash ^= Cpu.GetHashCode();
      if (fps_ != null) hash ^= Fps.GetHashCode();
      if (frameTime_ != null) hash ^= FrameTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Timestamp);
      }
      if (FrameIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIndex);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInfo);
      }
      if (systemMemory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SystemMemory);
      }
      if (profilerMemory_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ProfilerMemory);
      }
      if (luaMemory_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LuaMemory);
      }
      if (battery_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Battery);
      }
      if (cpu_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Cpu);
      }
      if (fps_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Fps);
      }
      if (frameTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FrameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (FrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (systemMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemMemory);
      }
      if (profilerMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfilerMemory);
      }
      if (luaMemory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LuaMemory);
      }
      if (battery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battery);
      }
      if (cpu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cpu);
      }
      if (fps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fps);
      }
      if (frameTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSample other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.FrameIndex != 0) {
        FrameIndex = other.FrameIndex;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::Gperf.U3D.GPerfUserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.systemMemory_ != null) {
        if (systemMemory_ == null) {
          SystemMemory = new global::Gperf.U3D.GPerfSystemMemory();
        }
        SystemMemory.MergeFrom(other.SystemMemory);
      }
      if (other.profilerMemory_ != null) {
        if (profilerMemory_ == null) {
          ProfilerMemory = new global::Gperf.U3D.GPerfProfilerMemory();
        }
        ProfilerMemory.MergeFrom(other.ProfilerMemory);
      }
      if (other.luaMemory_ != null) {
        if (luaMemory_ == null) {
          LuaMemory = new global::Gperf.U3D.GPerfLuaMemory();
        }
        LuaMemory.MergeFrom(other.LuaMemory);
      }
      if (other.battery_ != null) {
        if (battery_ == null) {
          Battery = new global::Gperf.U3D.GPerfBattery();
        }
        Battery.MergeFrom(other.Battery);
      }
      if (other.cpu_ != null) {
        if (cpu_ == null) {
          Cpu = new global::Gperf.U3D.GPerfCPU();
        }
        Cpu.MergeFrom(other.Cpu);
      }
      if (other.fps_ != null) {
        if (fps_ == null) {
          Fps = new global::Gperf.U3D.GPerfFPS();
        }
        Fps.MergeFrom(other.Fps);
      }
      if (other.frameTime_ != null) {
        if (frameTime_ == null) {
          FrameTime = new global::Gperf.U3D.GPerfFrameTime();
        }
        FrameTime.MergeFrom(other.FrameTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 16: {
            FrameIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (userInfo_ == null) {
              UserInfo = new global::Gperf.U3D.GPerfUserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 34: {
            if (systemMemory_ == null) {
              SystemMemory = new global::Gperf.U3D.GPerfSystemMemory();
            }
            input.ReadMessage(SystemMemory);
            break;
          }
          case 42: {
            if (profilerMemory_ == null) {
              ProfilerMemory = new global::Gperf.U3D.GPerfProfilerMemory();
            }
            input.ReadMessage(ProfilerMemory);
            break;
          }
          case 50: {
            if (luaMemory_ == null) {
              LuaMemory = new global::Gperf.U3D.GPerfLuaMemory();
            }
            input.ReadMessage(LuaMemory);
            break;
          }
          case 58: {
            if (battery_ == null) {
              Battery = new global::Gperf.U3D.GPerfBattery();
            }
            input.ReadMessage(Battery);
            break;
          }
          case 66: {
            if (cpu_ == null) {
              Cpu = new global::Gperf.U3D.GPerfCPU();
            }
            input.ReadMessage(Cpu);
            break;
          }
          case 74: {
            if (fps_ == null) {
              Fps = new global::Gperf.U3D.GPerfFPS();
            }
            input.ReadMessage(Fps);
            break;
          }
          case 82: {
            if (frameTime_ == null) {
              FrameTime = new global::Gperf.U3D.GPerfFrameTime();
            }
            input.ReadMessage(FrameTime);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GPerfSession : pb::IMessage<GPerfSession> {
    private static readonly pb::MessageParser<GPerfSession> _parser = new pb::MessageParser<GPerfSession>(() => new GPerfSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPerfSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gperf.U3D.GperfU3DReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession(GPerfSession other) : this() {
      app_ = other.app_ != null ? other.app_.Clone() : null;
      device_ = other.device_ != null ? other.device_.Clone() : null;
      gameInfo_ = other.gameInfo_ != null ? other.gameInfo_.Clone() : null;
      samples_ = other.samples_.Clone();
      extersions_ = other.extersions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPerfSession Clone() {
      return new GPerfSession(this);
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 1;
    private global::Gperf.U3D.GPerfApp app_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfApp App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 2;
    private global::Gperf.U3D.GPerfDevice device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfDevice Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 3;
    private global::Gperf.U3D.GPerfGameInfo gameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gperf.U3D.GPerfGameInfo GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Gperf.U3D.GPerfSample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(34, global::Gperf.U3D.GPerfSample.Parser);
    private readonly pbc::RepeatedField<global::Gperf.U3D.GPerfSample> samples_ = new pbc::RepeatedField<global::Gperf.U3D.GPerfSample>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gperf.U3D.GPerfSample> Samples {
      get { return samples_; }
    }

    /// <summary>Field number for the "extersions" field.</summary>
    public const int ExtersionsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_extersions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> extersions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Extersions {
      get { return extersions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPerfSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPerfSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(Device, other.Device)) return false;
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      if (!Extersions.Equals(other.Extersions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (app_ != null) hash ^= App.GetHashCode();
      if (device_ != null) hash ^= Device.GetHashCode();
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      hash ^= samples_.GetHashCode();
      hash ^= Extersions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (app_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(App);
      }
      if (device_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Device);
      }
      if (gameInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameInfo);
      }
      samples_.WriteTo(output, _repeated_samples_codec);
      extersions_.WriteTo(output, _map_extersions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      size += samples_.CalculateSize(_repeated_samples_codec);
      size += extersions_.CalculateSize(_map_extersions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPerfSession other) {
      if (other == null) {
        return;
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Gperf.U3D.GPerfApp();
        }
        App.MergeFrom(other.App);
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Gperf.U3D.GPerfDevice();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          GameInfo = new global::Gperf.U3D.GPerfGameInfo();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
      samples_.Add(other.samples_);
      extersions_.Add(other.extersions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (app_ == null) {
              App = new global::Gperf.U3D.GPerfApp();
            }
            input.ReadMessage(App);
            break;
          }
          case 18: {
            if (device_ == null) {
              Device = new global::Gperf.U3D.GPerfDevice();
            }
            input.ReadMessage(Device);
            break;
          }
          case 26: {
            if (gameInfo_ == null) {
              GameInfo = new global::Gperf.U3D.GPerfGameInfo();
            }
            input.ReadMessage(GameInfo);
            break;
          }
          case 34: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
          case 42: {
            extersions_.AddEntriesFrom(input, _map_extersions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
