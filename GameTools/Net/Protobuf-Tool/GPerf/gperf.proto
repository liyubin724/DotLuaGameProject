//
// GPerf messages
//

syntax = "proto3";

option optimize_for = SPEED;
option cc_enable_arenas = true;

option java_package = "com.seasungames.gperf.pb";
option java_outer_classname = "GPerfProtos";
option java_multiple_files = false;

package gperf;

// Messages for Game Client
// ====================================================================================================================

// Informations of a device
message GPerfDevice {
    string id = 1;      // a242e384-908c-49bc-9ca1-a825386672ca
    string vendor = 2;  // Apple
    string model = 3;   // iPhone 6S Plus
    string os = 4;      // iOS 13.1.3
    string cpu = 5;     // Apple A9
    string gpu = 6;     // PowerVR GT7600
    int32 memory = 7;   // 2048 (MB)
    string profile = 8; // DeviceProfile (IOS_High)
}

// Informations of an app from which data are generated
message GPerfApp {
    string id = 1;                  // com.YourCompany.Pirates
    string version = 2;             // 0.0.5917+5917
    string engine = 3;              // UE4
    string engine_version = 4;      // 4.21.2-0+++UE4+Release-4.21
}

// Informations of client network: traffic, bandwidth, ISP, ...
message GPerfNetwork {
    fixed32 ue4_in_bytes  = 1;      // Total bytes
    fixed32 ue4_out_bytes = 2;      // Total bytes
}

// Informations of player transform
message Transform {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
    int32 yaw = 4;
}

// Informations of phone battery
message Battery {
    int32 power = 1;
    int32 charging = 2;
    float temperature = 3;
}

// Represents single sample of a time series
message GPerfSample {
    fixed32 timestamp = 1;          // Unix-time in seconds
    float fps = 2;                  // Frames per second
    float cpu_percent = 3;          // CPU utilization in percentage (0-100)
    float cpu_mhz = 4;              // CPU frequency in MHz
    repeated float cpu_mhz_per_core = 8; // Each cpu core frequency in MHz
    float mem_pss_kb = 5;           // PSS memory usage in KB
    Transform transform = 6;        // Player transform
    float frame_time_ms = 9;        // Total time of a frame in Milliseconds
    float game_time_ms = 10;        // Game time of a frame in Milliseconds (Game Thread)
    float draw_time_ms = 11;        // Draw time of a frame in Milliseconds (Render Thread)
    float rhit_time_ms = 12;        // RHIT time of a frame in Milliseconds (RHI Thread)
    float draw_call = 13;           // Total number of draw calls of a frame
    float triangles = 14;           // Total number of triangles in a frame
    repeated float extensions = 15; // User-defined metrics
    string location = 16;           // Human-readable string of client location in a map. Example: 皇家港/海军基地/隐秘森林
    Battery battery = 7;            // Phone battery
    int32 frame_counter = 17;       // UE frame counter mod by 1000 (The index number of the user view the logs)
}

// extensions:
//   - triangle (abbr: tri)
//   - drawcall (abbr: dc)
//
// 0 - lua_pss_kb
// 1 - ping_time_ms
// 2 - ue4_gc_state (0/1)
// 3 - grass_tri (GNumPrimitivesGrassDrawRHI)
// 4 - foliage_tri (GNumPrimitivesFoliageDrawRHI)
// 5 - landscape_tri (GNumPrimitivesLandscapeDrawRHI)
// 6 - shadow_tri (GNumPrimitivesShadow)
// 7 - static_tri (GNumPrimitivesDrawnRHIStatic)
// 8 - mask_z_tri (GNumPrimitivesDrawnRHIMaskZ)
// 9 - skm_tri (GNumPrimitivesDrawnRHISKM)
// 10 - grass_dc (GNumDrawCallsGrass)
// 11 - foliage_dc (GNumDrawCallsFoliage)
// 12 - scape_dc (GNumDrawCallsLandscape)
// 13 - shadow_dc (GNumDrawCallsShadow)
// 14 - static_dc (GNumDrawCallsStatic)
// 15 - mask_z_dc (GNumDrawCallsMaskZ)
// 16 - skm_dc (GNumDrawCallsSKM)
// 17 - particle_dc (GNumDrawCallsParticle)

// Clients send this via HTTP POST
message GPerfSession {
    GPerfDevice device = 1;
    GPerfApp app = 2;
    GPerfNetwork network = 5;
    repeated GPerfSample samples = 3;
    map<string, string> tags = 4;       // Optional user-defined metadata, like https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html
}

// Messages for Game Server
// ====================================================================================================================

// Informations of a device
message ServerDevice {
    string id = 1;      // i-075d602f392ad1dad (EC2 Instance ID)
    string vendor = 2;  // Amazon EC2
    string model = 3;   // c5d.2xlarge
    string os = 4;      // ubuntu 18.04
    string cpu = 5;     // Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz
    int32 memory = 6;   // 15464 (MB)
}

// Informations of an app from which data are generated
message ServerApp {
    string id = 1;              // com.seasungames.pirates.dungeon
    string version = 2;         // master-b3660-20191231
    string engine = 3;          // UE4
    string engine_version = 4;  // 4.21.2-0+++UE4+Release-4.21
    int32 process_id = 5;       // 23480
}

// Information of server network
message ServerNetwork {
    fixed32 ue4_in_bytes  = 1;  // Total bytes
    fixed32 ue4_out_bytes = 2;  // Total bytes
}

// Represents single sample of a time series
message ServerSample {
    fixed32 timestamp = 1;           // Unix-time in seconds
    float fps = 8;                   // Frames per second
    float cpu_percent = 2;           // CPU utilization of process, in percentage (0-100 because we run Server single-threaded)
    float mem_pss_kb = 3;            // PSS memory usage in KB
    float frame_time_ms = 4;         // Total time of a frame in Milliseconds
    int32 players_active = 5;        // Number of active players
    int32 players_ob = 6;            // Number of observing players
    int32 bots = 7;                  // Number of active bots
    repeated float extensions = 15;  // User-defined metrics
    int32 frame_counter = 9;         // UE frame counter mod by 1000 (The index number of the user view the logs)
}

// extensions:
// 0 - lua_pss_kb
// 1 - ue4_gc_state (0/1)

// Servers send this via HTTP POST
message ServerSession {
    ServerDevice device = 1;
    ServerApp app = 2;
    ServerNetwork network = 5;
    repeated ServerSample samples = 3;
    map<string, string> tags = 4;      // Optional user-defined metadata, like https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html
}

// ====================================================================================================================
