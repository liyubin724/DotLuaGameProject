local oop = require('DotLua/OOP/oop')
local Matcher = require('DotLua/ECS/Matchers/Matcher')
local Component = require('DotLua/ECS/Components/Component')

local LogTag = 'Matcher'

local NotHaveAnyComponentMatcher =
    oop.class(
    'DotLua.ECS.Matchers.Components.NotHaveAnyComponentMatcher',
    function(self, componentClasses)
        if oop.isDebug then
            if not componentClasses then
                oop.error(LogTag, "the classes is nil")
                return
            end
            for _, componentClass in ipairs(componentClasses) do
                if not componentClass or oop.isclassof(componentClass, Component) then
                    oop.error(LogTag, "the class is not a subclass of Component")
                    return
                end
            end
        end
        self.componentClasses = componentClasses
    end,
    Matcher
)

function NotHaveAnyComponentMatcher:IsMatch(entity)
    if #self.componentClasses == 0 then
        return false
    end

    return not entity:HasAnyComponent(self.componentClasses)
end

return NotHaveAnyComponentMatcher
