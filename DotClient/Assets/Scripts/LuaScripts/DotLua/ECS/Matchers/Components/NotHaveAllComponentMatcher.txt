local oop = require("DotLua/OOP/oop")
local Matcher = require("DotLua/ECS/Core/Matcher")
local Component = require("DotLua/ECS/Core/Component")

local LogTag = "NotHaveAllComponentMatcher"

local NotHaveAllComponentMatcher =
    oop.class(
    "DotLua.ECS.Matchers.Components.NotHaveAllComponentMatcher",
    function(self, name, componentClasses)
        if oop.isDebug then
            if not componentClasses then
                oop.error(LogTag, "the classes is nil")
                return
            end
            for _, componentClass in ipairs(componentClasses) do
                if not componentClass or oop.isclassof(componentClass, Component) then
                    oop.error(LogTag, "the class is not a subclass of Component")
                    return
                end
            end
        end
        self.componentClasses = componentClasses
    end,
    Matcher
)

function NotHaveAllComponentMatcher:IsMatch(entity)
    if not self.componentClasses or #self.componentClasses == 0 then
        return false
    end

    return not entity:HasAllComponent(self.componentClasses)
end

return NotHaveAllComponentMatcher
