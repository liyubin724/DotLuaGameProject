local oop = require("DotLua/OOP/oop")
local GroupEvent = oop.using("DotLua/ECS/Groups/GroupEvent")
local ObjectPool = oop.using("DotLua/Pool/ObjectPool")
local DetailCollectorData = oop.using("DotLua/ECS/Collectors/DetailCollectorData")

local tinsert = table.insert
local tclear = table.clear

local detailDataPool = ObjectPool(DetailCollectorData)

local DetailCollector =
    oop.class(
    "DotLua.ECS.Collectors.DetailCollector",
    function(self, group, groupEvent)
        self.isEnable = false

        self.group = group
        self.groupEvent = groupEvent

        self.collectedDetails = {}

        self.collectedAddedDetails = {}
        self.collectedRemovedDetails = {}
    end
)

function DetailCollector:IsEnable()
    return self.isEnable
end

function DetailCollector:GetCollectedDetailCount()
    return #self.collectedDetails
end

function DetailCollector:GetCollectedAddedDetailCount()
    return #self.collectedAddedDetails
end

function DetailCollector:GetCollectedRemovedDetailCount()
    return #self.collectedRemovedDetails
end

function DetailCollector:GetCollectedDetails()
    return self.collectedDetails
end

function DetailCollector:GetCollectedAddedDetails()
    return self.collectedAddedDetails
end

function DetailCollector:GetCollectedRemovedDetails()
    return self.collectedRemovedDetails
end

function DetailCollector:ClearCollectedDetails()
    for _, detail in ipairs(self.collectedDetails) do
        detailDataPool:Release(detail)
    end

    tclear(self.collectedDetails)
    tclear(self.collectedAddedDetails)
    tclear(self.collectedRemovedDetails)
end

function DetailCollector:DoActivate()
    if self.group and not self.isEnable then
        self.isEnable = true
        if self.groupEvent then
            local addFunc
            local removeFunc
            if self.groupEvent == GroupEvent.Added or self.groupEvent == GroupEvent.AddOrRemove then
                addFunc = self.onEntityAddedEvent
            elseif self.groupEvent == GroupEvent.Removed or self.groupEvent == GroupEvent.AddOrRemove then
                removeFunc = self.onEntityRemovedEvent
            end

            self.group:BindEvent(self, addFunc, removeFunc)
        end
    end
end

function DetailCollector:DoDeactivate()
    if self.group and self.isEnable then
        self.isEnable = false
        if self.groupEvent then
            local addFunc
            local removeFunc
            if self.groupEvent == GroupEvent.Added or self.groupEvent == GroupEvent.AddOrRemove then
                addFunc = self.onEntityAddedEvent
            elseif self.groupEvent == GroupEvent.Removed or self.groupEvent == GroupEvent.AddOrRemove then
                removeFunc = self.onEntityRemovedEvent
            end

            self.group:BindEvent(self, addFunc, removeFunc)
        end
    end
end

function DetailCollector:DoDestroy()
    if self.isEnable then
        self:DoDeactivate()
    end

    self.collectedDetails = nil
    self.collectedAddedDetails = nil
    self.collectedRemovedDetails = nil

    self.group = nil
    self.groupEvent = nil
    self.isEnable = false
end

function DetailCollector:onEntityAddedEvent(guid, contextEvent, param1, param2)
    local data = self.detailEntityDataPool:GetItem(guid, contextEvent, param1, param2)

    tinsert(self.collectedDetails, data)
    tinsert(self.collectedAddedDetails, data)
end

function DetailCollector:onEntityRemovedEvent(guid, contextEvent, param1, param2)
    local data = self.detailEntityDataPool:GetItem(guid, contextEvent, param1, param2)

    tinsert(self.collectedDetails, data)
    tinsert(self.collectedRemovedDetails, data)
end

return DetailCollector
