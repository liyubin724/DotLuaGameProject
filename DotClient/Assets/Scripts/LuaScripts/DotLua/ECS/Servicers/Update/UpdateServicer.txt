local oop = require('DotLua/OOP/oop')
local Servicer = require('DotLua/ECS/Servicers/Servicer')

local tclear = table.clear
local tinsert = table.insert
local tremove = table.remove

local UpdateServicer =
    oop.class(
    'DotLua.ECS.Servicers.Update.UpdaterServicer',
    function(self)
        self.updateDelegateList = {}
        self.lateUpdateDelegateList = {}
        self.frameUpdateDelegateList = {}

        self.isRuning = false
    end,
    Servicer
)

function UpdateServicer:DoRegister()
    self.isRuning = true
end

function UpdateServicer:DoUnregister()
    self.isRuning = false

    tclear(self.updateDelegateList)
    tclear(self.lateUpdateDelegateList)
    tclear(self.frameUpdateDelegateList)
end

function UpdateServicer:RegisterUpdater(target, func)
    self:appendToList(self.updateDelegateList,target,func)
end

function UpdateServicer:UnregisterUpdater(target, func)
    self:removeFromList(self.updateDelegateList,target,func)
end

function UpdateServicer:RegisterLateUpdater(target, func)
    self:appendToList(self.lateUpdateDelegateList,target,func)
end

function UpdateServicer:UnregisterLateUpdater(target, func)
    self:removeFromList(self.lateUpdateDelegateList,target,func)
end

function UpdateServicer:RegisterFrameUpdate(target, func)
    self:appendToList(self.frameUpdateDelegateList,target,func)
end

function UpdateServicer:UnregisterFrameUpdate(target, func)
    self:removeFromList(self.frameUpdateDelegateList,target,func)
end

function UpdateServicer:DoUpdate(deltaTime, unscaleDeltaTime)
    if not self.isRuning then
        return
    end

    for _, delegate in ipairs(self.updateDelegateList) do
        delegate:ActionInvoke(deltaTime,unscaleDeltaTime)
    end
end

function UpdateServicer:DoLateUpdate(deltaTime, unscaleDeltaTime)
    if not self.isRuning then
        return
    end

    for _, delegate in ipairs(self.lateUpdateDelegateList) do
        delegate:ActionInvoke(deltaTime, unscaleDeltaTime)
    end
end

function UpdateServicer:DoFrameUpdate(frameTime)
    if not self.isRuning then
        return
    end

    for _, delegate in ipairs(self.frameUpdateDelegateList) do
        delegate:ActionInvoke(frameTime)
    end
end

function UpdateServicer:appendToList(list, target, func)
    local delegate = oop.delegate(target, func)
    tinsert(list, delegate)
end

function UpdateServicer:removeFromList(list, target, func)
    for index, delegate in ipairs(list) do
        if delegate:GetReceiver() == target and delegate:GetFunc() == func then
            tremove(list, index)
            return
        end
    end
end

return UpdateServicer
