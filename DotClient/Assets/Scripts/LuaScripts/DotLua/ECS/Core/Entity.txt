local oop = require("DotLua/OOP/oop")
local Component = require("DotLua/ECS/Core/Component")

local tclear = table.clear

local LogTag = "Entity"

local Entity =
    oop.class(
    "DotLua.ECS.Core.Entity",
    function(self)
        self.enable = false
        self.refCount = 0
        self.isWaitingForRelease = false

        self.guid = nil
        self.contextName = nil
        self.componentPool = nil

        --the class of component to the instance
        self.componentDic = {}

        self.componentAddedEvent = oop.event()
        self.componentRemovedEvent = oop.event()
        self.componentReplacedEvent = oop.event()
        self.componentModifiedEvent = oop.event()
    end
)

function Entity:GetIsEnable()
    return self.enable and not self.isWaitingForRelease
end

function Entity:GetIsInUsing()
    return self.refCount > 0
end

function Entity:RetainRef()
    self.refCount = self.refCount + 1
end

function Entity:ReleaseRef()
    self.refCount = self.refCount - 1
end

function Entity:GetGUID()
    return self.guid
end

function Entity:GetContextName()
    return self.contextName
end

function Entity:MarkAsWaitingForRelease()
    self.isWaitingForRelease = true

    self.componentAddedEvent:Clear()
    self.componentRemovedEvent:Clear()
    self.componentReplacedEvent:Clear()
    self.componentModifiedEvent:Clear()
end

function Entity:DoActivate(guid, contextName, componentPool)
    self.enable = true
    self.guid = guid

    self.contextName = contextName
    self.componentPool = componentPool
end

function Entity:DoDeactivate()
    self.enable = false
    self.isWaitingForRelease = false

    self.componentAddedEvent:Clear()
    self.componentRemovedEvent:Clear()
    self.componentReplacedEvent:Clear()
    self.componentModifiedEvent:Clear()

    for _, component in pairs(self.componentDic) do
        self.componentPool:Release(component)
    end
    tclear(self.componentDic)

    self.guid = nil
    self.contextName = nil
    self.componentPool = nil
end

function Entity:BindComponentEvent(receiver, addFunc, removeFunc, replaceFunc, modifyFunc)
    if self:IsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return
    end

    if addFunc then
        self.componentAddedEvent:Add(receiver, addFunc)
    end
    if removeFunc then
        self.componentRemovedEvent:Add(receiver, removeFunc)
    end
    if replaceFunc then
        self.componentReplacedEvent:Add(receiver, replaceFunc)
    end
    if modifyFunc then
        self.componentModifiedEvent:Add(receiver, modifyFunc)
    end
end

function Entity:UnbindComponentEvent(receiver, addFunc, removeFunc, replaceFunc, modifyFunc)
    if self:IsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return
    end

    if addFunc then
        self.componentAddedEvent:Remove(receiver, addFunc)
    end
    if removeFunc then
        self.componentRemovedEvent:Remove(receiver, removeFunc)
    end
    if replaceFunc then
        self.componentReplacedEvent:Remove(receiver, replaceFunc)
    end
    if modifyFunc then
        self.componentModifiedEvent:Remove(receiver, modifyFunc)
    end
end

function Entity:HasComponent(componentClass)
    if oop.isDebug then
        if not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, "the param is not a class")
            return false
        end
    end

    return self.componentDic[componentClass] ~= nil
end

function Entity:HasAllComponent(...)
    local componentClasses = {...}
    if #componentClasses == 0 then
        return false
    end

    local hasComponent = false
    for _, componentClass in pairs(componentClasses) do
        hasComponent = true
        if not self.componentDic[componentClass] then
            return false
        end
    end

    return hasComponent
end

function Entity:HasAnyComponent(...)
    local componentClasses = {...}
    if #componentClasses == 0 then
        return false
    end

    for _, componentClass in pairs(componentClasses) do
        if self.componentDic[componentClass] then
            return true
        end
    end

    return false
end

function Entity:GetComponent(componentClass)
    if oop.isDebug then
        if not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, "the param is not a class of Component")
            return nil
        end
    end

    return self.componentDic[componentClass]
end

function Entity:AddComponent(componentClass, ...)
    if not self:GetIsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return nil
    end

    if oop.isDebug then
        if not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, "the param is not a class of Component")
            return nil
        end
    end

    local component = self.componentListDic:GetItem(componentClass)
    if component then
        oop.warning(LogTag, string.format("The component of %s has beend added!", componentClass:GetClassName()))
        return component
    end

    component = self:addComponent(componentClass, ...)
    if not component then
        oop.error(LogTag, "The component is nil")
        return nil
    end

    self.componentAddedEvent:Invoke(self, componentClass)

    return component
end

function Entity:AddComponents(...)
    for _, componentClass in ipairs({...}) do
        self:AddComponent(componentClass)
    end
end

function Entity:RemoveComponent(componentClass)
    if not self:GetIsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return false
    end

    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, "the param is not a class of Component")
            return false
        end
    end

    if not self:removeComponent(componentClass) then
        oop.error(LogTag, "the component is not found")
        return false
    end

    self.componentRemovedEvent:Invoke(self, componentClass)

    return true
end

function Entity:ReplaceComponent(oldComponentClass, newComponentClass)
    if not self:GetIsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return false
    end

    if not oldComponentClass and not newComponentClass then
        oop.error(LogTag, "the component is nil")
        return false
    end

    if oop.isDebug then
        if oldComponentClass and (not oop.isclass(oldComponentClass) or not oop.isclassof(oldComponentClass, Component)) then
            oop.error(LogTag, "the param is not a class of Component")
            return false
        end

        if newComponentClass and (not oop.isclass(newComponentClass) or not oop.isclassof(newComponentClass, Component)) then
            oop.error(LogTag, "the param is not a class of Component")
            return false
        end
    end

    if oldComponentClass and not newComponentClass then
        return self:RemoveComponent(oldComponentClass)
    elseif oldComponentClass and newComponentClass then
        local oldComponent = self:removeComponent(oldComponentClass)
        if oldComponent then
            self.componentPool:Release(oldComponent)
        end

        local newComponent = self:addComponent(newComponentClass)
        if not newComponent then
            return false
        end

        self.componentReplacedEvent:Invoke(self, oldComponentClass, newComponentClass)

        return true
    elseif not oldComponentClass and newComponentClass then
        local component = self:AddComponent(newComponentClass)
        return component ~= nil
    end
end

function Entity:ModifyComponent(componentClass, modifyFunc, modifyTag)
    if not self:GetIsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return false
    end

    if oop.isDebug then
        if not modifyFunc or type(modifyFunc) ~= "function" then
            oop.error(LogTag, "The modifyfunc is not a function")
            return false
        end
    end

    local component = self:GetComponent(componentClass)
    if not component then
        oop.error(LogTag, "the component is not found")
        return false
    end

    modifyFunc(self, component, modifyTag)
    self.componentModifiedEvent:Invoke(self, componentClass, modifyTag)

    return true
end

function Entity:MarkComponentModified(componentClass, modifyTag)
    if not self:GetIsEnable() then
        oop.error(LogTag, "The enity has been disabled")
        return false
    end

    local component = self:GetComponent(componentClass)
    if not component then
        oop.error(LogTag, "the component is not found")
        return false
    end

    self.componentModifiedEvent:Invoke(self, componentClass, modifyTag)
    return true
end

function Entity:addComponent(componentClass, ...)
    local component = self.componentPool:Get(componentClass, ...)
    if not component then
        return nil
    end

    self.componentDic[componentClass] = component
    return component
end

function Entity:removeComponent(componentClass)
    local component = self.componentDic[componentClass]
    if not component then
        return false
    end

    self.componentDic[componentClass] = nil
    self.componentPool:Release(component)

    return true
end

return Entity
