local oop = require('DotLua/OOP/oop')
local System = oop.using('DotLua/ECS/Core/System')

local tinsert = table.insert
local tforeach = table.foreach

local LogTag = 'MacroSystem'

local MacroSystem =
    oop.class(
    'DotLua.ECS.Core.MacroSystem',
    function(self)
        self.subSystems = {}

        self.updateSystems = {}
        self.lateUpdateSystems = {}

        self:initSubsystems()
    end,
    System
)

function MacroSystem:initSubsystems()
end

function MacroSystem:AddSubsystem(systemClass)
    if oop.isDebug then
        if not systemClass or not oop.isclassof(systemClass, System) then
            oop.error(LogTag, 'The subSystem is not a class of System')
            return
        end
    end
    local subSystem = systemClass()
    tinsert(self.subSystems, subSystem)

    if subSystem['DoUpdate'] then
        tinsert(self.updateSystems, subSystem)
    end

    if subSystem['DoLateUpdate'] then
        tinsert(self.lateUpdateSystems, subSystem)
    end
end

function MacroSystem:DoUpdate(deltaTime, unscaleDeltaTime)
    if #(self.updateSystems) > 0 then
        tforeach(
            self.updateSystems,
            function(_, system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function MacroSystem:DoLateUpdate(deltaTime, unscaleDeltaTime)
    if #(self.lateUpdateSystems) > 0 then
        tforeach(
            self.lateUpdateSystems,
            function(_, system)
                system:DoLateUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function MacroSystem:DoTeardown()
    tforeach(
        self.subSystems,
        function(_, system)
            if system['DoTeardown'] then
                system:DoTeardown()
            end
        end
    )
end

function MacroSystem:onInitilize()
    if #(self.subSystems) > 0 then
        tforeach(
            self.subSystems,
            function(_, system)
                system:DoInitilize()
            end
        )
    end
end

function MacroSystem:onDestroy()
    tforeach(
        self.subSystems,
        function(_, system)
            system:DoDestroy()
        end
    )
    self.subSystems = nil
    self.updateSystems = nil
    self.lateUpdateSystems = nil
end

return MacroSystem
