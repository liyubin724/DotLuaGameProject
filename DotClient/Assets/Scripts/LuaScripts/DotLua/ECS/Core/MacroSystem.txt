local oop = require("DotLua/OOP/oop")
local System = oop.using("DotLua/ECS/Core/System")

local tinsert = table.insert
local tremovevalue = table.removevalue
local tforeach = table.foreach
local Const = require("DotLua/ECS/Const")

local LogTag = "MacroSystem"

local MacroSystem =
    oop.class(
    "DotLua.ECS.Core.MacroSystem",
    function(self)
        self.subSystems = {}
        self.subSystemDic = {}
        self.updateSystems = {}
    end,
    System
)

function MacroSystem:AddSubsystem(name, subSystemClass, ...)
    if oop.isDebug then
        if not oop.isclassof(subSystemClass, System) then
            oop.error(LogTag, "The subSystem is not a instance of System")
            return
        end
    end

    name = name or oop.getclassname(subSystemClass)

    local subSystem = self.subSystemDic[name]
    if subSystem then
        oop.warning(LogTag, "The subsystem has been added.name = %s", name)
        return subSystem
    end

    subSystem = subSystemClass(...)
    subSystem:DoInitialize()

    self.subSystemDic[name] = subSystem
    self:insertSystem(self.subSystems, subSystem)

    if subSystem[Const.DO_UPDATE_FUNC_NAME] then
        self:insertSystem(self.updateSystems, subSystem)
    end

    if self:IsEnable() then
        subSystem:DoActivate()
    end
end

function MacroSystem:RemoveSubsystem(name)
    if not self.subSystemDic[name] then
        oop.warning(LogTag, "the system(%s) is not found", name)
        return
    end
    local subSystem = self.subSystemDic[name]
    self.subSystemDic[name] = nil
    tremovevalue(self.subSystems,subSystem)
    if subSystem[Const.DO_UPDATE_FUNC_NAME] then
        tremovevalue(self.updateSystems, subSystem)
    end

    subSystem:DoDestroy()
end

function MacroSystem:DoUpdate(deltaTime, unscaleDeltaTime)
    if #(self.updateSystems) > 0 then
        tforeach(
            self.updateSystems,
            function(_, system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function MacroSystem:onInitilize()
    if #(self.subSystems) > 0 then
        tforeach(
            self.subSystemDic,
            function(_, system)
                system:DoInitilize()
            end
        )
    end
end

function MacroSystem:onActivate()
    if #(self.subSystems) > 0 then
        tforeach(
            self.subSystemDic,
            function(_, system)
                system:DoActivate()
            end
        )
    end
end

function MacroSystem:onDeactivate()
    if #(self.subSystems) > 0 then
        tforeach(
            self.subSystemDic,
            function(_, system)
                system:DoDeactivate()
            end
        )
    end
end

function MacroSystem:onDestroy()
    tforeach(
        self.subSystems,
        function(_, system)
            system:DoDestroy()
        end
    )
    self.subSystems = nil
    self.subSystemDic = nil
    self.updateSystems = nil
end

function MacroSystem:insertSystem(systems, system)
    local priority = system:GetPriority()
    for i = 1, #systems do
        local sp = systems[i]:GetPriority()
        if priority < sp then
            tinsert(systems, system)
            return
        end
    end
    tinsert(systems, system)
end

return MacroSystem
