local oop = require("DotLua/OOP/oop")
local GUIDComponent = require("DotLua/ECS/Components/Basic/GUIDComponent")
local EContextEvent = require("DotLua/ECS/Core/EContextEvent")

local tkeys = table.keys

local LogTag = "Context"

local Context =
    oop.class(
    "DotLua.ECS.Core.Context",
    function(self,name,guidCreator,groupPool,entityPool,componentPool)
        self.name = name

        self.guidCreator = guidCreator
        self.groupPool = groupPool
        self.entityPool = entityPool
        self.componentPool = componentPool

        self.guidToEntityDic = {}
        self.matcherToGroupDic = {}

        self.willReleasedEntityDic = {}

        self.entityCreatedEvent = oop.event()
        self.entityChangedEvent = oop.event()
        self.entityReleasedEvent = oop.event()

        self.groupCreatedEvent = oop.event()
        self.groupReleasedEvent = oop.event()
        self.groupChangedEvent = oop.event()
    end
)

function Context:GetName()
    return self.name
end

function Context:DoDestroy()
    self.groupCreatedEvent:Clear()
    self.groupReleasedEvent:Clear()
    self.groupChangedEvent:Clear()

    self.entityCreatedEvent:Clear()
    self.entityReleasedEvent:Clear()
    self.entityChangedEvent:Clear()

    for _, entity in pairs(self.guidToEntityDic) do
        self:ReleaseEntity(entity)
    end
    self.guidToEntityDic = nil

    for _, group in pairs(self.matcherToGroupDic) do
        self:ReleaseGroup(group)
    end
    self.matcherToGroupDic = nil

    self.name = nil
    self.groupPool = nil
    self.entityPool = nil
    self.componentPool = nil
end

function Context:BindEntityEvent(receiver, createdFunc, changedFunc, releasedFunc)
    if createdFunc then
        self.entityCreatedEvent:Add(receiver, createdFunc)
    end

    if changedFunc then
        self.entityChangedEvent:Add(receiver, changedFunc)
    end

    if releasedFunc then
        self.entityReleasedEvent:Add(receiver, releasedFunc)
    end
end

function Context:UnbindEntityEvent(receiver, createdFunc, changedFunc, releasedFunc)
    if createdFunc then
        self.entityCreatedEvent:Remove(receiver, createdFunc)
    end

    if changedFunc then
        self.entityChangedEvent:Remove(receiver, changedFunc)
    end

    if releasedFunc then
        self.entityReleasedEvent:Remove(receiver, releasedFunc)
    end
end

function Context:BindGroupEvent(receiver, createdFunc, releasedFunc, changedFunc)
    if createdFunc then
        self.groupCreatedEvent:Add(receiver, createdFunc)
    end

    if releasedFunc then
        self.groupReleasedEvent:Add(receiver, releasedFunc)
    end

    if changedFunc then
        self.groupChangedEvent:Add(receiver, changedFunc)
    end
end

function Context:UnbindGroupEvent(receiver, createdFunc, releasedFunc, changedFunc)
    if createdFunc then
        self.groupCreatedEvent:Remove(receiver, createdFunc)
    end

    if releasedFunc then
        self.groupReleasedEvent:Remove(receiver, releasedFunc)
    end

    if changedFunc then
        self.groupChangedEvent:Remove(receiver, changedFunc)
    end
end

function Context:HasEntity(guid)
    return self.guidToEntityDic[guid] ~= nil
end

function Context:GetEntity(guid)
    return self.guidToEntityDic[guid]
end

function Context:CreateEntity(...)
    local guid = self.guidCreator:Get()
    local entity = self.entityPool:Get(guid, self.name, self.componentPool, ...)
    entity:AddComponent(GUIDComponent, guid)
    entity:BindComponentEvent(
        self,
        self.onEntityAddComponentEvent,
        self.onEntityRemoveComponentEvent,
        self.onEntityReplaceComponentEvent,
        self.onEntityModifyComponentEvent
    )
    self.guidToEntityDic[guid] = entity

    self:tryToUpdateGroup(entity, EContextEvent.EntityCreated)
    self.entityCreatedEvent:Invoke(self, guid, EContextEvent.EntityCreated, nil, nil)
    return entity
end

function Context:ReleaseEntity(entity)
    local guid = entity:GetGUID()
    if self.guidToEntityDic[guid] then
        oop.error(LogTag, "the entity is not found in context,guid = " .. tostring(guid))
        return
    end

    entity:UnbindComponentEvent(
        self,
        self.onEntityAddComponentEvent,
        self.onEntityRemoveComponentEvent,
        self.onEntityReplaceComponentEvent,
        self.onEntityModifyComponentEvent
    )

    self:tryToUpdateGroup(entity, EContextEvent.EntityReleased)
    self.entityReleasedEvent:Invoke(self, guid, EContextEvent.EntityReleased, nil, nil)

    entity:MarkAsWaitingForRelease()
    self.willReleasedEntityDic[guid] = entity

    self.guidToEntityDic[guid] = nil
end

function Context:tryToReleaseEntity()
    local keys = tkeys(self.willReleasedEntityDic)
    for _, guid in ipairs(keys) do
        local entity = self.willReleasedEntityDic[guid]
        if not entity:IsInUsing() then
            self.entityPool:Release(entity)
            self.willReleasedEntityDic[guid] = nil
        end
    end
end

function Context:CreateGroup(matcher)
    if not matcher then
        oop.error(LogTag,"the matcher is nil")
        return nil
    end

    local group = self.matcherToGroupDic[matcher]
    if group then
        group:RetainRef()
        return group
    end

    group = self.groupPool:Get(matcher)
    self.matcherToGroupDic[matcher] = group
    group:RetainRef()

    for _, entity in pairs(self.guidToEntityDic) do
        group:TryUpdateEntity(entity, EContextEvent.GroupCreated)
    end

    self.groupCreatedEvent:Invoke(self, group)
end

function Context:ReleaseGroup(group)
    group:ReleaseRef()

    if not group:IsInUsing() then
        local matcher = group:GetMatcher()
        self.matcherToGroupDic[matcher] = nil

        self.groupReleasedEvent:Invoke(self, group)
        self.groupPool:Release(group)
    end
end

function Context:onEntityAddComponentEvent(entity, addedComponentClass)
    self:tryToUpdateGroup(entity, EContextEvent.EntityChangedForAddComponent, addedComponentClass, nil)
    self.entityChangedEvent:Invoke(
        self,
        entity:GetGUID(),
        EContextEvent.EntityChangedForAddComponent,
        addedComponentClass,
        nil
    )
end

function Context:onEntityRemoveComponentEvent(entity, removedComponentClass)
    self:tryToUpdateGroup(entity, EContextEvent.EntityChangedForRemoveComponent, removedComponentClass, nil)
    self.entityChangedEvent:Invoke(
        self,
        entity:GetGUID(),
        EContextEvent.EntityChangedForRemoveComponent,
        removedComponentClass,
        nil
    )
end

function Context:onEntityReplaceComponentEvent(entity, removedComponentClass, addedComponentClass)
    self:tryToUpdateGroup(
        entity,
        EContextEvent.EntityChangedForReplaceComponent,
        removedComponentClass,
        addedComponentClass
    )
    self.entityChangedEvent:Invoke(
        self,
        entity:GetGUID(),
        EContextEvent.EntityChangedForReplaceComponent,
        removedComponentClass,
        addedComponentClass
    )
end

function Context:onEntityModifyComponentEvent(entity, modifiedComponentClass, modifyTag)
    self:tryToUpdateGroup(entity, EContextEvent.EntityChangedForModifyComponent, modifiedComponentClass, modifyTag)
    self.entityChangedEvent:Invoke(
        self,
        entity:GetGUID(),
        EContextEvent.EntityChangedForModifyComponent,
        modifiedComponentClass,
        modifyTag
    )
end

function Context:tryToUpdateGroup(entity, contextEvent, param1, param2)
    for _, group in pairs(self.matcherToGroupDic) do
        if group:TryUpdateEntity(entity, contextEvent, param1, param2) then
            self.groupChangedEvent:Invoke(self, group)
        end
    end
end

return Context
