local oop = require("DotLua/OOP/oop")
local Context = require("DotLua/ECS/Core/Context")
local ObjectPool = require("DotLua/Pool/ObjectPool")
local ComponentPool = require("DotLua/ECS/Core/ComponentPool")
local Entity = require("DotLua/ECS/Core/Entity")
local Group = require("DotLua/ECS/Core/Group")

local LogTag = "Contexts"

local Contexts =
    oop.class(
    "DotLua.ECS.Core.Contexts",
    function(self)
        self.contextPool = ObjectPool(Context)
        self.entityPool = ObjectPool(Entity)
        self.groupPool = ObjectPool(Group)
        self.componentPool = ComponentPool()

        self.onContextCreatedEvent = oop.event()
        self.onContextReleasedEvent = oop.event()

        self.contextDic = {}
    end
)

function Contexts:BindContextEvent(receiver, createdFunc, releasedFunc)
    if createdFunc then
        self.onContextCreatedEvent:Add(receiver, createdFunc)
    end

    if releasedFunc then
        self.onContextReleasedEvent:Add(receiver, releasedFunc)
    end
end

function Contexts:UnbindContextEvent(receiver, createdFunc, releasedFunc)
    if createdFunc then
        self.onContextCreatedEvent:Remove(receiver, createdFunc)
    end

    if releasedFunc then
        self.onContextReleasedEvent:Remove(receiver, releasedFunc)
    end
end

function Contexts:HasContext(name)
    return self.contextDic[name] ~= nil
end

function Contexts:GetContext(name)
    return self.contextDic[name]
end

function Contexts:CreateContext(name)
    local context = self.contextDic[name]
    if context then
        oop.warning(LogTag, "the context has been created")
        return context
    end

    context = self.contextPool:Get(name, self.groupPool, self.entityPool, self.componentPool)
    self.contextDic[name] = context

    self.onContextCreatedEvent:Invoke(context)

    return context
end

function Contexts:ReleaseContext(name)
    local context = self.contextDic[name]
    if not context then
        oop.warning(LogTag, "the context(" .. name .. ") is not found")
        return
    end

    self.contextDic[name] = nil
    self.onContextReleasedEvent:Invoke(context)

    self.contextPool:Release(context)
end

function Contexts:Destroy()

end

return Contexts
