local oop = require("DotLua/OOP/oop")
local Context = require("DotLua/ECS/Core/Context")
local ObjectPool = require("DotLua/Pool/ObjectPool")
local ComponentPool = require("DotLua/ECS/Core/ComponentPool")
local Entity = require("DotLua/ECS/Core/Entity")
local Group = require("DotLua/ECS/Core/Group")
local GUIDCreator = require("DotLua/Generic/GUIDCreator")

local tkeys = table.keys

local LogTag = "Contexts"

local Contexts =
    oop.class(
    "DotLua.ECS.Core.Contexts",
    function(self)
        self.guidCreator = GUIDCreator()

        self.contextPool = ObjectPool(Context)
        self.entityPool = ObjectPool(Entity)
        self.groupPool = ObjectPool(Group)
        self.componentPool = ComponentPool()

        self.guidToEnitityDic = {}
        self.contextDic = {}

        self.contextCreatedEvent = oop.event()
        self.contextReleasedEvent = oop.event()

        self.nameToGlobalEntityDic = {}
    end
)

function Contexts:DoDestroy()
    self.contextCreatedEvent:Clear()
    self.contextReleasedEvent:Clear()
    self.contextCreatedEvent = nil
    self.contextReleasedEvent = nil

    for _, context in pairs(self.contextDic) do
        self.contextPool:Release(context)
    end
    self.contextDic = nil
    self.guidToEntityDic = nil

    self.componentPool = nil
    self.groupPool = nil
    self.entityPool = nil
    self.contextPool = nil
    self.guidCreator = nil

    self.nameToGlobalEntityDic = nil
end

function Contexts:BindContextEvent(receiver, createdFunc, releasedFunc)
    if createdFunc then
        self.contextCreatedEvent:Add(receiver, createdFunc)
    end

    if releasedFunc then
        self.contextReleasedEvent:Add(receiver, releasedFunc)
    end
end

function Contexts:UnbindContextEvent(receiver, createdFunc, releasedFunc)
    if createdFunc then
        self.contextCreatedEvent:Remove(receiver, createdFunc)
    end

    if releasedFunc then
        self.contextReleasedEvent:Remove(receiver, releasedFunc)
    end
end

function Contexts:GetContextNames()
    return tkeys(self.contextDic)
end

function Contexts:HasContext(name)
    return self.contextDic[name] ~= nil
end

function Contexts:GetContext(name)
    return self.contextDic[name]
end

function Contexts:CreateContext(name)
    local context = self.contextDic[name]
    if context then
        oop.warning(LogTag, "the context has been created")
        return context
    end

    context = self.contextPool:Get(name, self.guidCreator, self.groupPool, self.entityPool, self.componentPool)
    context:BindEntityEvent(self, self.onContextEntityCreatedEvent, nil, self.onContextEntityReleasedEvent)

    self.contextDic[name] = context

    self.contextCreatedEvent:Invoke(context)

    return context
end

function Contexts:ReleaseContext(name)
    local context = self.contextDic[name]
    if not context then
        oop.warning(LogTag, string.format("the context(%s) is not found", name))
        return
    end

    self.contextDic[name] = nil

    context:UnbindEntityEvent(self, self.onContextEntityCreatedEvent, nil, self.onContextEntityReleasedEvent)
    self.contextReleasedEvent:Invoke(context)
    self.contextPool:Release(context)
end

function Contexts:GetGlobalEntity(name)
    return self.nameToGlobalEntityDic[name]
end

function Contexts:CreateGlobalEntity(name)
    local entity = self.nameToGlobalEntityDic[name]
    if not entity then
        local guid = self.guidCreator:Get()
        entity = self.entityPool:Get(guid, nil, self.componentPool)

        self.nameToGlobalEntityDic[name] = entity
    end

    return entity
end

function Contexts:HasEntity(guid)
    return self.guidToEntityDic[guid] ~= nil
end

function Contexts:GetEntity(guid)
    return self.guidToEntityDic[guid]
end

function Contexts:onContextEntityCreatedEvent(entity)
    local guid = entity:GetGUID()
    self.guidToEntityDic[guid] = entity
end

function Contexts:onContextEntityReleasedEvent(entity)
    local guid = entity:GetGUID()
    self.guidToEntityDic[guid] = nil
end

return Contexts
