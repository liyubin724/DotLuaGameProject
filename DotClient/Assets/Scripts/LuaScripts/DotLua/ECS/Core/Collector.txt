local oop = require("DotLua/OOP/oop")
local GroupEvent = oop.using("DotLua/ECS/Core/GroupEvent")

local tinsert = table.insert
local tclear = table.clear
local tremovevalue = table.removevalue
local tcontainsvalue = table.containsvalue

local Collector =
    oop.class(
    "DotLua.ECS.Collectors.Collector",
    function(self, context, matcher, groupEvent)
        self.isEnable = false

        self.context = context
        self.group = context:CreateGroup(matcher)
        self.groupEvent = groupEvent

        self.collectedEntities = {}
        self.collectedAddedEntities = {}
        self.collectedRemovedEntities = {}
    end
)

function Collector:IsEnable()
    return self.isEnable
end

function Collector:GetCollectedEntities()
    return self.collectedEntities
end

function Collector:GetCollectedAddedEntities()
    return self.collectedAddedEntities
end

function Collector:GetCollectedRemovedEntities()
    return self.collectedRemovedEntities
end

function Collector:ClearCollectedEntities()
    tclear(self.collectedEntities)
    tclear(self.collectedAddedEntities)
    tclear(self.collectedRemovedEntities)
end

function Collector:DoActivate()
    if self.group and not self.isEnable then
        self.isEnable = true
        if self.groupEvent then
            local addFunc
            local removeFunc
            if self.groupEvent == GroupEvent.Added or self.groupEvent == GroupEvent.AddOrRemove then
                addFunc = self.onEntityAddedEvent
            elseif self.groupEvent == GroupEvent.Removed or self.groupEvent == GroupEvent.AddOrRemove then
                removeFunc = self.onEntityRemovedEvent
            end

            self.group:BindEvent(self, addFunc, removeFunc)
        end
    end
end

function Collector:DoDeactivate()
    if self.group and self.isEnable then
        self.isEnable = false
        if self.groupEvent then
            local addFunc
            local removeFunc
            if self.groupEvent == GroupEvent.Added or self.groupEvent == GroupEvent.AddOrRemove then
                addFunc = self.onEntityAddedEvent
            elseif self.groupEvent == GroupEvent.Removed or self.groupEvent == GroupEvent.AddOrRemove then
                removeFunc = self.onEntityRemovedEvent
            end

            self.group:UnbindEvent(self, addFunc, removeFunc)
        end
    end
end

function Collector:DoDestroy()
    if self.isEnable then
        self:DoDeactivate()
    end

    self.collectedEntities = nil

    self.context:ReleaseGroup(self.group)
    self.group = nil
    self.groupEvent = nil
    self.isEnable = false
end

function Collector:onEntityAddedEvent(entity)
    if not tcontainsvalue(self.collectedEntities, entity) then
        tinsert(self.collectedEntities, entity)
    end

    if not tcontainsvalue(self.collectedAddedEntities, entity) then
        tinsert(self.collectedAddedEntities, entity)
    end

    if tcontainsvalue(self.collectedRemovedEntities, entity) then
        tinsert(self.collectedRemovedEntities, entity)
    end
end

function Collector:onEntityRemovedEvent(entity)
    if not tcontainsvalue(self.collectedEntities, entity) then
        tinsert(self.collectedEntities, entity)
    end

    if tcontainsvalue(self.collectedAddedEntities, entity) then
        tremovevalue(self.collectedAddedEntities, entity)
    end

    if not tcontainsvalue(self.collectedRemovedEntities, entity) then
        tinsert(self.collectedRemovedEntities, entity)
    end
end

return Collector
