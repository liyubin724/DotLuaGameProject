local oop = require("DotLua/OOP/oop")
local ObjectPool = require("DotLua/Pool/ObjectPool")
local Component = require("DotLua/ECS/Core/Component")
local Entity = require("DotLua/ECS/Core/Entity")

local LogTag = "GEnvPool"

local GEnvPool = {}
GEnvPool.componentClassPoolDic = {}
GEnvPool.entityClassPoolDic = {}

function GEnvPool.GetComponent(componentClass,...)
    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.iskindof(componentClass, Component) then
            oop.error(LogTag, "the class is not a clas or is not a subclass of Component")
            return nil
        end
    end

    local pool = GEnvPool.componentClassPoolDic[componentClass]
    if not pool then
        pool = ObjectPool(componentClass)
        GEnvPool.componentClassPoolDic[componentClass] = pool
    end

    local component = pool:GetItem(...)
    return component
end

function GEnvPool.ReleaseComponent(component, ...)
    if oop.isDebug then
        if not oop.isinstanceof(component, Component) then
            oop.error(LogTag, "the component is not a instance of Component")
            return
        end
    end

    local componentClass = component:GetClass()
    if componentClass then
        local pool = GEnvPool.componentClassPoolDic[componentClass]
        if pool then
            pool:ReleaseItem(component, ...)
        end
    end
end

function GEnvPool.GetEntity(entityClass,...)
    if oop.isDebug then
        if not oop.isclass(entityClass) or not oop.iskindof(entityClass, Entity) then
            oop.error(LogTag, "the class is not a clas or is not a subclass of Entity")
            return nil
        end
    end

    local pool = GEnvPool.entityClassPoolDic[entityClass]
    if not pool then
        pool = ObjectPool(entityClass)
        GEnvPool.entityClassPoolDic[entityClass] = pool
    end

    local component = pool:GetItem(...)
    return component
end

function GEnvPool.ReleaseEntity(entity, ...)
    if oop.isDebug then
        if not oop.isinstanceof(entity, Entity) then
            oop.error(LogTag, "the entity is not a instance of Entity")
            return
        end
    end

    local entityClass = entity:GetClass()
    if entityClass then
        local pool = GEnvPool.entityClassPoolDic[entityClass]
        if pool then
            pool:ReleaseItem(entity, ...)
        end
    end
end

return GEnvPool
