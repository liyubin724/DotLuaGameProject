local oop = require("DotLua/OOP/oop")
local System = require("DotLua/ECS/Core/System")
local Const = require("DotLua/ECS/Const")

local tinsert = table.insert
local tremovevalue = table.removevalue
local tforeach = table.foreach

local LogTag = "SystemMgr"

local Systems =
    oop.class(
    "DotLua.ECS.Core.Systems",
    function(self)
        self.nameToSystemDic = {}

        self.updateSystems = {}
        self.lateUpdateSystems = {}
    end
)

function Systems:RegisterSystem(name, systemClass, ...)
    if oop.isDebug then
        if not systemClass or not oop.iskindof(systemClass, System) then
            oop.error(LogTag, "the system is nil or is not a class of System")
            return
        end
    end

    local system = self.nameToSystemDic[name]
    if system then
        oop.error(LogTag, "the system has been registered in to systems.name = %s,system = ", name, tostring(system))
        return nil
    end

    system = systemClass(...)
    system:DoInitlize()
    self.nameToSystemDic[name] = system

    if system[Const.DO_UPDATE_FUNC_NAME] then
        tinsert(self.updateSystems, system)
    end

    if system[Const.DO_LATEUPDATE_FUNC_NAME] then
        tinsert(self.lateUpdateSystems, system)
    end

    system:DoActivate()
end

function Systems:UnregisterSystem(name, isAutoDestroy)
    local system = self.nameToSystemDic[name]
    if not system then
        oop.warning(LogTag, "the system is not found")
        return
    end

    self.nameToSystemDic[name] = nil

    if system[Const.DO_UPDATE_FUNC_NAME] then
        tremovevalue(self.updateSystems, system)
    end

    if system[Const.DO_LATEUPDATE_FUNC_NAME] then
        tremovevalue(self.lateUpdateSystems, system)
    end

    system:DoDeactivate()
    if isAutoDestroy then
        system:DoDestroy()
    end
end

function Systems:DoUpdate(deltaTime, unscaleDeltaTime)
    tforeach(
        self.updateSystems,
        function(_, system)
            system:DoUpdate(deltaTime, unscaleDeltaTime)
        end
    )
end

function Systems:DoLateUpdate(deltaTime, unscaleDeltaTime)
    tforeach(
        self.lateUpdateSystems,
        function(_, system)
            system:DoLateUpdate(deltaTime, unscaleDeltaTime)
        end
    )
end

function Systems:DoDestroy()
    tforeach(
        self.nameToSystemDic,
        function(_, system)
            system:DoDestroy()
        end
    )

    self.nameToSystemDic = nil
    self.updateSystems = nil
    self.lateUpdateSystems = nil
end

return Systems
