local oop = require("DotLua/OOP/oop")
local Const = require("DotLua/ECS/Const")
local Contexts = require("DotLua/ECS/Core/Contexts")
local Systems = require("DotLua/ECS/Core/Systems")
local DestroySystem = require("DotLua/ECS/Systems/LateUpdate/DestroySystem")
local HaveComponentMatcher = require("DotLua/ECS/Matchers/Components/HaveComponentMatcher")
local DestroyComponent = require("DotLua/ECS/Components/Basic/DestroyComponent")
local GroupEvent = require("DotLua/ECS/Core/GroupEvent")

local ECSEnv =
    oop.class(
    "DotLua.ECS.ECSEnv",
    function(self)
        self.contexts = nil
        self.systems = nil

        self.destroyMatcher = HaveComponentMatcher(DestroyComponent)
    end
)

function ECSEnv:GetContexts()
    return self.contexts
end

function ECSEnv:GetSystems()
    return self.systems
end

function ECSEnv:DoInitlize()
    self.contexts = Contexts()
    self.systems = Systems()

    self.contexts:BindContextEvent(self, self.onContextCreated, self.onContextReleased)

    self:onContextsInitilized()
    self:onSystemsInitilized()
end

function ECSEnv:DoUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoUpdate(deltaTime, unscaleDeltaTime)
end

function ECSEnv:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.contexts:DoLateUpdate()
end

function ECSEnv:DoDestroy()
    if self[Const.ON_DESTROY_FUNC_NAME] then
        self[Const.ON_DESTROY_FUNC_NAME](self)
    end

    self.systems:DoDestroy()
    self.systems = nil

    self.contexts:DoDestroy()
    self.contexts = nil
end

function ECSEnv:onContextCreated(context)
    local group = context:CreateGroup(self.destroyMatcher)
    
end

function ECSEnv:onContextReleased(context)

end

function ECSEnv:onContextsInitilized()
end

function ECSEnv:onSystemsInitilized()
end

function ECSEnv:onContextCreatedEvent(context)
    
end

function ECSEnv:onContextReleasedEvent(context)
end

return ECSEnv
