local oop = require("DotLua/OOP/oop")
local Const = require("DotLua/ECS/Const")
local Contexts = require("DotLua/ECS/Core/Contexts")
local Systems = require("DotLua/ECS/Core/Systems")
local DestroySystem = require("DotLua/ECS/Systems/Basic/DestroySystem")
local GUIDCollectionSystem = require("DotLua/ECS/Systems/Basic/GUIDCollectionSystem")
local CategoryCollectionSystem = require("DotLua/ECS/Systems/Basic/CategoryCollectionSystem")
local HaveComponentMatcher = require("DotLua/ECS/Matchers/Components/HaveComponentMatcher")
local DestroyComponent = require("DotLua/ECS/Components/Basic/DestroyComponent")
local CategoryCollectionComponent = require("DotLua/ECS/Components/Basic/CategoryCollectionComponent")
local GUIDCollectionComponent = require("DotLua/ECS/Components/Basic/GUIDCollectionComponent")

local ECSEnv =
    oop.class(
    "DotLua.ECS.ECSEnv",
    function(self)
        self.contexts = nil
        self.systems = nil
        self.collectionEntity = nil

        self.destroyMatcher = HaveComponentMatcher(DestroyComponent)
    end
)

function ECSEnv:GetContexts()
    return self.contexts
end

function ECSEnv:GetSystems()
    return self.systems
end

function ECSEnv:GetCollectionEntity()
    return self.collectionEntity
end

function ECSEnv:DoInitlize()
    self.contexts = Contexts()
    self.systems = Systems()

    self.collectionEntity = self.contexts:GetOrCreateGlobalEntity(Const.GLOBAL_ENTITY_COLLECTION_NAME)
    self.collectionEntity:AddComponent(CategoryCollectionComponent)
    self.collectionEntity:AddComponent(GUIDCollectionComponent)

    local func = self[Const.ON_INITILIZE_FUNC_NAME]
    if func and type(func) == "function" then
        func(self)
    end

    self.contexts:BindContextEvent(self, self.onContextCreatedEvent, self.onContextReleasedEvent)

    self:onContextsInitilized()
    self:onSystemsInitilized()
end

function ECSEnv:DoUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoUpdate(deltaTime, unscaleDeltaTime)
end

function ECSEnv:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.contexts:DoLateUpdate()
end

function ECSEnv:DoDestroy()
    if self[Const.ON_DESTROY_FUNC_NAME] then
        self[Const.ON_DESTROY_FUNC_NAME](self)
    end

    self.systems:DoDestroy()
    self.systems = nil

    self.contexts:DoDestroy()
    self.contexts = nil
end

function ECSEnv:onContextCreatedEvent(context)
    local destroySystemName = string.format("%s-DestroySystem", context:GetName())
    self.systems:RegisterSystem(destroySystemName, DestroySystem, context)

    local guidCollectionSystem = string.format("%s-GUIDCollecionSystem",context:GetName())
    self.systems:RegisterSystem(guidCollectionSystem, GUIDCollectionSystem, context)

    local categoryCollectionSystem = string.format("%s-CategoryCollecionSystem", context:GetName())
    self.systems:RegisterSystem(categoryCollectionSystem, CategoryCollectionSystem, context)
end

function ECSEnv:onContextReleasedEvent(context)
    local destroySystemName = string.format("%s-DestroySystem", context:GetName())
    self.systems:UnregisterSystem(destroySystemName, true)

    local guidCollectionSystem = string.format("%s-GUIDCollecionSystem", context:GetName())
    self.systems:UnregisterSystem(guidCollectionSystem, true)

    local categoryCollectionSystem = string.format("%s-CategoryCollecionSystem", context:GetName())
    self.systems:UnregisterSystem(categoryCollectionSystem, true)
end

function ECSEnv:onContextsInitilized()
end

function ECSEnv:onSystemsInitilized()
end

return ECSEnv
