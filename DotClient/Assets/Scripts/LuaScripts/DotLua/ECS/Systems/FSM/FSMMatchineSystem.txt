local oop = require('DotLua/ECS/OOP/oop')
local FSMStateSystem = require('DotLua/ECS/Systems/FSM/FSMStateSystem')
local GroupUpdateSystem = require('DotLua/ECS/Systems/Groups/GroupUpdateSystem')
local HaveComponentMatcher = require('DotLua/ECS/Matchers/Components/HaveComponentMatcher')

local FSMStateComponent = require('DotLua/ECS/Components/FSM/FSMStateComponent')

local LogTag = 'FSMMatchineSystem'
local tinsert = table.insert

local FSMMatchineSystem =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMMatchineSystem',
    function(self,contexts,fsmName)
        self.fsmName = fsmName
        self.stateDic = {}
        self.defaultStateName = nil
    end,
    GroupUpdateSystem
)

function FSMMatchineSystem:AddState(stateSystem,isDefault)
    if oop.isDebug then
        if not oop.isInstanceof(stateSystem,FSMStateSystem) then
            oop.error("FSM","the system is not a instance of FSMStateSystem")
            return
        end
    end

    local stateName = stateSystem:GetStateName()
    self.stateDic[stateName] = stateSystem

    if isDefault then
        self.defaultStateName = stateName
    end
end

function FSMMatchineSystem:GetGroups(contexts)
    local groups = {}
    local matcher = HaveComponentMatcher(FSMStateComponent)

    for _, context in ipairs(contexts) do
        local group = context:CreateGroup(matcher)
        tinsert(groups,group)
    end
    return groups
end

function FSMMatchineSystem:Filter(entity)
    local stateComponent = entity:GetComponentByClass(FSMStateComponent)
    return stateComponent:GetIsRuning()
end

function FSMMatchineSystem:onEntityUpdate(entity)
    local stateComponent = entity:GetComponentByClass(FSMStateComponent)
    if not stateComponent:GetIsRuning() then
        return
    end
    local currentStateName = stateComponent:GetStateName()
    if not currentStateName then
        if self.defaultStateName then
            self:transitionTo(entity,self.defaultStateName)
        end
        return
    end

    local currentState = self.stateDic[currentStateName]
    local nextStateName = currentState:GetNextStateName(entity)
    if currentStateName ~= nextStateName then
        currentState:DoExit(entity,nextStateName)
        self:transitionTo(entity,nextStateName)
    else
        currentState:DoExecute(entity)
    end
end

function FSMMatchineSystem:transitionTo(entity,toStateName)
    local stateComponent = entity:GetComponentByClass(FSMStateComponent)
    local currentStateName = stateComponent:GetStateName()

    stateComponent:SetStateName(toStateName)
    local nextState = self.stateDic[toStateName]
    nextState:DoEnter(entity, currentStateName)
end

return FSMMatchineSystem
