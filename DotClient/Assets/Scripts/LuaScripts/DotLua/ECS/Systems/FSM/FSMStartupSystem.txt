local oop = require("DotLua/ECS/OOP/oop")
local CollectorUpdateSystem = require("DotLua/ECS/Systems/CollectorUpdateSystem")
local CommonMatchers = require("DotLua/ECS/CommonMatchers")
local EGroupEvent = require("DotLua/ECS/Core/EGroupEvent")
local Collector = require("DotLua/ECS/Core/Collector")
local SystemPriorityConst = require("DotLua/ECS/Systems/SystemPriorityConst")
local FSMComponent = require("DotLua/ECS/Components/FSM/FSMComponent")
local FSMStateComponent = require("DotLua/ECS/Components/FSM/FSMStateComponent")
local FSMStartupComponent = require("DotLua/ECS/Components/FSM/FSMStartupComponent")
local FSMTransitionToComponent = require("DotLua/ECS/Components/FSM/FSMTransitionToComponent")

local LogTag = "FSMStartupSystem"

local FSMStartupSystem =
    oop.class(
    "DotLua.ECS.Systems.FSM.FSMStartupSystem",
    function(self, context)
        self.priority = SystemPriorityConst.FSMStartupPriority
    end,
    CollectorUpdateSystem
)

function FSMStartupSystem:createCollector(context)
    return Collector(context, CommonMatchers.FSMStartupMatcher, EGroupEvent.Added)
end

function FSMStartupSystem:onAddedEntityUpdate(entity, deltaTime)
    local fsmComponent = entity:GetComponent(FSMComponent)
    local fsmData = fsmComponent:GetData()
    if not fsmData then
        oop.error(LogTag, "")
        return
    end

    local fsmStartupComponent = entity:GetComponent(FSMStartupComponent)
    local startupStateName = fsmStartupComponent:GetStateName()
    if startupStateName then
        if entity:HasComponent(FSMStateComponent) then
            entity:AddComponent(FSMTransitionToComponent, startupStateName)
        else
            entity:AddComponent(FSMStateComponent, startupStateName)
            local startupState = fsmData.getState(startupStateName)
            if startupState and startupState.DoEnter then
                startupState.DoEnter(entity)
            end
        end
    end

    entity:RemoveComponent(FSMStartupComponent)
end

return FSMStartupSystem
