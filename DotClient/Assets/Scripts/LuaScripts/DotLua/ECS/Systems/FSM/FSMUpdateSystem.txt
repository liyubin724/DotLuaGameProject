local oop = require("DotLua/ECS/OOP/oop")
local GroupUpdateSystem = require("DotLua/ECS/Systems/GroupUpdateSystem")
local CommonMatchers = require("DotLua/ECS/CommonMatchers")
local SystemPriorityConst = require("DotLua/ECS/Systems/SystemPriorityConst")
local FSMComponent = require("DotLua/ECS/Components/FSM/FSMComponent")
local FSMTransitionToComponent = require("DotLua/ECS/Components/FSM/FSMTransitionToComponent")

local FSMStateComponent = require("DotLua/ECS/Components/FSM/FSMStateComponent")

local LogTag = "FSMUpdateSystem"

local FSMUpdateSystem =
    oop.class(
    "DotLua.ECS.Systems.FSM.FSMUpdateSystem",
    function(self, context, contexts, dispatcher)
        self.contexts = contexts
        self.dispatcher = dispatcher
        self.priority = SystemPriorityConst.FSMUpdatePriority
    end,
    GroupUpdateSystem
)

function FSMUpdateSystem:createGroup(context)
    return context:CreateGroup(CommonMatchers.FSMUpdateMatcher)
end

function FSMUpdateSystem:filterEntity(entity)
    local fsmStateComponent = entity:GetComponent(FSMStateComponent)
    local currStateName = fsmStateComponent:GetCurrentState()
    if currStateName and #currStateName > 0 then
        return true
    end
end

function FSMUpdateSystem:onEntityUpdate(entity, deltaTime)
    local fsmComponent = entity:GetComponent(FSMComponent)
    local fsmStateComponent = entity:GetComponent(FSMStateComponent)

    local fsmScriptPath = fsmComponent:GetScriptPath()
    local fsmData = require(fsmScriptPath)
    if not fsmData then
        oop.error(LogTag, "")
        return
    end

    local currentStateName = fsmStateComponent:GetCurrentState()
    local stateData = fsmScriptPath.getState(currentStateName)
    local statePluginScriptPath = stateData.scriptPath
    local statePlugin = require(statePluginScriptPath)
    if not statePlugin then
        oop.error(LogTag, "")
        return
    end

    if fsmData.updateGlobalBlackboard then
        fsmData.updateGlobalBlackboard(self.contexts, entity)
    end

    statePlugin:DoUpdate(entity)

    local nextStateName = fsmData.getNextStateName(currentStateName, entity)
    if nextStateName and #nextStateName > 0 then
        entity:AddComponent(FSMTransitionToComponent, nextStateName)
    end
end

return FSMUpdateSystem
