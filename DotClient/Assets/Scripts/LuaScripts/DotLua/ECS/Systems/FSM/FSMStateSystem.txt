local oop = require('DotLua/ECS/OOP/oop')
local FSMStateGroupSystem = require('DotLua/ECS/Systems/FSM/FSMStateGroupSystem')
local HaveComponentMatcher = require('DotLua/ECS/Matchers/Components/HaveComponentMatcher')

local FSMStateComponent = require('DotLua/ECS/Components/FSM/FSMStateComponent')

local LogTag = 'FSMStateSystem'

local FSMStateSystem =
    oop.class(
    'DotLua.ECS.Systems.FSM.FSMStateSystem',
    function(self, context)
    end,
    FSMStateGroupSystem
)

function FSMStateSystem:GetGroup(context)
    local matcher = HaveComponentMatcher(FSMStateComponent)
    return context.CreateGroup(matcher)
end

function FSMStateSystem:Filter(entity)
    return true
end

function FSMStateSystem:onEntityUpdate(entity)
    local stateComponent = entity:GetComponentByClass(FSMStateComponent)
    if not stateComponent:GetIsRunning() then
        return
    end

    local stateName = stateComponent:GetStateName()
    if not stateName then
        return
    end

    local state = self.matchine:GetState(stateName)
    if not state then
        return
    end

    state:DoExecute(entity)
end

return FSMStateSystem
