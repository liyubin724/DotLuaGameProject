local oop = require('DotLua/OOP/oop')
local System = oop.using('DotLua/ECS/Systems/System')
local SystemFuncNames = oop.using('DotLua/ECS/Systems/SystemFuncNames')

local tinsert = table.insert
local tforeach = table.foreach

local LogTag = 'MacroSystem'

local MacroSystem =
    oop.class(
    'DotLua.ECS.Systems.MacroSystem',
    function(self)
        self.subSystems = {}

        self.updateSystems = {}
        self.lateUpdateSystems = {}
        self.frameUpdateSystems = {}

        self:onInitilize()
    end,
    System
)

function MacroSystem:onInitilize()
end

function MacroSystem:AddSubSystem(subSystem)
    if oop.isDebug then
        if not oop.isinstanceof(subSystem, System) then
            oop.error(LogTag, 'The subSystem is not a instance of System')
            return
        end
    end

    tinsert(self.subSystems, subSystem)

    if subSystem[SystemFuncNames.FUNC_UPDATE] then
        tinsert(self.updateSystems, subSystem)
    end

    if subSystem[SystemFuncNames.FUNC_LATEUPDATE] then
        tinsert(self.lateUpdateSystems, subSystem)
    end

    if subSystem[SystemFuncNames.FUNC_FRAMEUPDATE] then
        tinsert(self.frameUpdateSystems, subSystem)
    end
end

function MacroSystem:onActivate()
    if #(self.subSystems) > 0 then
        tforeach(
            self.subSystems,
            function(_, system)
                system:DoActivate()
            end
        )
    end
end

function MacroSystem:DoUpdate(deltaTime, unscaleDeltaTime)
    if #(self.updateSystems) > 0 and self.isEnable then
        tforeach(
            self.updateSystems,
            function(_, system)
                system:DoUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function MacroSystem:DoLateUpdate(deltaTime, unscaleDeltaTime)
    if #(self.lateUpdateSystems) > 0 and self.isEnable then
        tforeach(
            self.lateUpdateSystems,
            function(_, system)
                system:DoLateUpdate(deltaTime, unscaleDeltaTime)
            end
        )
    end
end

function MacroSystem:DoFrameUpdate(deltaTime)
    if #(self.frameSystems) > 0 and self.isEnable then
        tforeach(
            self.frameUpdateSystems,
            function(_, system)
                system:DoFrameUpdate(deltaTime)
            end
        )
    end
end

function MacroSystem:onDeactivate()
    if #(self.teardownSystems) > 0 and self.isEnable then
        tforeach(
            self.subSystems,
            function(_, system)
                system:DoDeactivate()
            end
        )
    end
end

return MacroSystem
