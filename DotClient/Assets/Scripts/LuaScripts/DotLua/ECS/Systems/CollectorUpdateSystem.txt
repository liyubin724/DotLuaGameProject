local oop = require("DotLua/ECS/OOP/oop")
local UpdateSystem = require("DotLua/ECS/Systems/UpdateSystem")

local LogTag = "CollectorUpdateSystem"

local CollectorUpdateSystem =
    oop.class(
    "DotLua.ECS.Systems.CollectorUpdateSystem",
    function(self, context)
        self.collector = self:createCollector(context)
    end,
    UpdateSystem
)

function CollectorUpdateSystem:onActivate()
    if self.collector then
        self.collector:DoActivate()
    end
end

function CollectorUpdateSystem:onDeactivate()
    if self.collector then
        self.collector:DoDeactivate()
    end
end

function CollectorUpdateSystem:onDestroy()
    if self.collector then
        self.collector:DoDestroy()
    end
    self.collector = nil
end

function CollectorUpdateSystem:onUpdate(deltaTime)
    if not self.collector then
        return
    end

    local onEntityUpdate = self["onEntityUpdate"]
    if onEntityUpdate then
        local entities = self.collector:GetCollectedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onEntityUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    local onAddedEntityUpdate = self["onAddedEntityUpdate"]
    if onAddedEntityUpdate then
        local entities = self.collector:GetCollectedAddedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onAddedEntityUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    local onRemovedEntityUpdate = self["onRemovedEntityUpdate"]
    if onRemovedEntityUpdate then
        local entities = self.collector:GetCollectedRemovedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onRemovedEntityUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    self.collector:ClearCollectedEntities()
end

function CollectorUpdateSystem:createCollector(context)
    oop.error(LogTag, "this is a abstract class")
    return nil
end

function CollectorUpdateSystem:filterEntity(entity)
    return true
end

-- function CollectorUpdateSystem:onEntityUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

-- function CollectorUpdateSystem:onAddedEntityUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

-- function CollectorUpdateSystem:onRemovedEntityUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

return CollectorUpdateSystem
