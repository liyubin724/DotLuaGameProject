local oop = require("DotLua/ECS/OOP/oop")
local UpdateSystem = require("DotLua/ECS/Systems/Update/UpdateSystem")

local LogTag = "CollectorUpdateSystem"

local CollectorLateUpdateSystem =
    oop.class(
    "DotLua.ECS.Systems.Collectors.CollectorUpdateSystem",
    function(self, context)
        self.collector = self:createCollector(context)
    end,
    UpdateSystem
)

function CollectorLateUpdateSystem:onActivate()
    if self.collector then
        self.collector:DoActivate()
    end
end

function CollectorLateUpdateSystem:onDeactivate()
    if self.collector then
        self.collector:DoDeactivate()
    end
end

function CollectorLateUpdateSystem:onDestroy()
    if self.collector then
        self.collector:DoDestroy()
    end
    self.collector = nil
end

function CollectorLateUpdateSystem:onLateUpdate(deltaTime)
    if not self.collector then
        return
    end

    local collectedEnities = self.collector:GetCollectedEntities()
    if collectedEnities and #collectedEnities > 0 then
        for _, entity in ipairs(collectedEnities) do
            if self:filterEntity(entity) then
                self:onEntityLateUpdate(entity, deltaTime)
            end
        end
        self.collector:ClearCollectedEntities()
    end
end

function CollectorLateUpdateSystem:createCollector(context)
    return nil
end

function CollectorLateUpdateSystem:filterEntity(entity)
    return false
end

function CollectorLateUpdateSystem:onEntityLateUpdate(entity, deltaTime)
    oop.error(LogTag, "this is a abstract class")
end

return CollectorLateUpdateSystem
