local oop = require("DotLua/ECS/OOP/oop")
local LateUpdateSystem = require("DotLua/ECS/Systems/LateUpdate/LateUpdateSystem")

local LogTag = "CollectorUpdateSystem"

local CollectorLateUpdateSystem =
    oop.class(
    "DotLua.ECS.Systems.Collectors.CollectorUpdateSystem",
    function(self, context)
        self.collector = self:createCollector(context)
    end,
    LateUpdateSystem
)

function CollectorLateUpdateSystem:onActivate()
    if self.collector then
        self.collector:DoActivate()
    end
end

function CollectorLateUpdateSystem:onDeactivate()
    if self.collector then
        self.collector:DoDeactivate()
    end
end

function CollectorLateUpdateSystem:onDestroy()
    if self.collector then
        self.collector:DoDestroy()
    end
    self.collector = nil
end

function CollectorLateUpdateSystem:onLateUpdate(deltaTime)
    if not self.collector then
        return
    end

    local onEntityLateUpdate = self["onEntityLateUpdate"]
    if onEntityLateUpdate then
        local entities = self.collector:GetCollectedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onEntityLateUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    local onAddedEntityLateUpdate = self["onAddedEntityLateUpdate"]
    if onAddedEntityLateUpdate then
        local entities = self.collector:GetCollectedAddedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onAddedEntityLateUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    local onRemovedEntityLateUpdate = self["onRemovedEntityLateUpdate"]
    if onRemovedEntityLateUpdate then
        local entities = self.collector:GetCollectedRemovedEntities()
        if #entities > 0 then
            for _, entity in ipairs(entities) do
                if self:filterEntity(entity) then
                    onRemovedEntityLateUpdate(self, entity, deltaTime)
                end
            end
        end
    end

    self.collector:ClearCollectedEntities()
end

function CollectorLateUpdateSystem:createCollector(context)
    oop.error(LogTag, "this is a abstract class")
    return nil
end

function CollectorLateUpdateSystem:filterEntity(entity)
    return true
end

-- function CollectorLateUpdateSystem:onEntityLateUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

-- function CollectorLateUpdateSystem:onAddedEntityLateUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

-- function CollectorLateUpdateSystem:onRemovedEntityLateUpdate(entity, deltaTime)
--     oop.error(LogTag, "this is a abstract class")
-- end

return CollectorLateUpdateSystem
