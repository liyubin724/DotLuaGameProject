local oop = require("DotLua/ECS/OOP/oop")
local CollectorUpdateSystem = require("DotLua/ECS/Systems/CollectorUpdateSystem")
local SystemPriorityConst = require("DotLua/ECS/Systems/SystemPriorityConst")
local CommonMatchers = require("DotLua/ECS/CommonMatchers")
local EGroupEvent = require("DotLua/ECS/Core/EGroupEvent")
local Collector = require("DotLua/ECS/Core/Collector")
local TimerComponent = require("DotLua/ECS/Components/Timer/TimerComponent")
local TimerRunningComponent = require("DotLua/ECS/Components/Timer/TimerRunningComponent")

local TimerEndSystem =
    oop.class(
    "DotLua.ECS.Systems.Timer.TimerEndSystem",
    function(self, context)
        self.priority = SystemPriorityConst.TimerEndPriority
    end,
    CollectorUpdateSystem
)

function TimerEndSystem:createCollector(context)
    return Collector(context, CommonMatchers.TimerEndMatcher, EGroupEvent.Added)
end

function TimerEndSystem:onAddedEntityUpdate(entity, deltaTime)
    local timerRunningComponent = entity:GetComponent(TimerRunningComponent)
    if timerRunningComponent then
        local timerServicer = ecs.GetTimerServicer()
        timerServicer:StopTimer(timerRunningComponent.GetTimerIndex())

        entity:RemoveComponent(TimerRunningComponent)
    end

    local timerComponent = entity:GetComponent(TimerComponent)
    local timerEndComponentClass = timerComponent:GetEndComponentClass()
    if timerEndComponentClass then
        entity:AddComponent(timerEndComponentClass)
    end
end

return TimerEndSystem
