local oop = require("DotLua/ECS/OOP/oop")
local CollectorUpdateSystem = require("DotLua/ECS/Systems/CollectorUpdateSystem")
local SystemPriorityConst = require("DotLua/ECS/Systems/SystemPriorityConst")
local CommonMatchers = require("DotLua/ECS/CommonMatchers")
local EGroupEvent = require("DotLua/ECS/Core/EGroupEvent")
local Collector = require("DotLua/ECS/Core/Collector")
local TimerComponent = require("DotLua/ECS/Components/Timer/TimerComponent")
local TimerIntervalMatcher = require("DotLua/ECS/Components/Timer/TimerIntervalMatcher")

local TimerIntervalSystem =
    oop.class(
    "DotLua.ECS.Systems.Timer.TimerIntervalSystem",
    function(self, context)
        self.priority = SystemPriorityConst.TimerIntervalPriority
    end,
    CollectorUpdateSystem
)

function TimerIntervalSystem:createCollector(context)
    return Collector(context, CommonMatchers.TimerIntervalMatcher, EGroupEvent.Added)
end

function TimerIntervalSystem:onAddedEntityUpdate(entity, deltaTime)
    local timerComponent = entity:GetComponent(TimerComponent)
    local intervalComponentClass = timerComponent:GetIntervalComponentClass()
    if intervalComponentClass then
        entity:AddComponent(intervalComponentClass)
    end
    entity:RemoveComponent(TimerIntervalMatcher)
end

return TimerIntervalSystem
