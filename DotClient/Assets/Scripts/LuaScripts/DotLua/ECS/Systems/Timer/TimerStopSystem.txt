local oop = require("DotLua/ECS/OOP/oop")
local CollectorUpdateSystem = require("DotLua/ECS/Systems/CollectorUpdateSystem")
local SystemPriorityConst = require("DotLua/ECS/Systems/SystemPriorityConst")
local CommonMatchers = require("DotLua/ECS/CommonMatchers")
local EGroupEvent = require("DotLua/ECS/Core/EGroupEvent")
local Collector = require("DotLua/ECS/Core/Collector")
local TimerStopComponent = require("DotLua/ECS/Components/Timer/TimerStopComponent")
local TimerRunningComponent = require("DotLua/ECS/Components/Timer/TimerRunningComponent")

local TimerStopSystem =
    oop.class(
    "DotLua.ECS.Systems.TimerStopSystem",
    function(self, context)
        self.priority = SystemPriorityConst.TimerStopPriority
    end,
    CollectorUpdateSystem
)

function TimerStopSystem:createCollector(context)
    return Collector(context, CommonMatchers.TimerStopMatcher, EGroupEvent.Added)
end

function TimerStopSystem:onAddedEntityUpdate(entity, deltaTime)
    local timerServicer = ecs.GetTimerServicer()
    local timerRunningComponent = entity:GetComponent(TimerRunningComponent)
    if timerRunningComponent then
        timerServicer:StopTimer(timerRunningComponent.GetTimerIndex())

        entity:RemoveComponent(TimerRunningComponent)
    end
    entity:RemoveComponent(TimerStopComponent)
end

return TimerStopSystem
