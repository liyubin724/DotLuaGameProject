local oop = require("DotLua/OOP/oop")
local Component = require("DotLua/ECS/Components/Component")
local EntityIdentifyPool = require("DotLua/ECS/Entities/EntityIdentifyPool")

local tclear = table.clear
local tinsert = table.insert
local tremove = table.remove

local ChildsComponent =
    oop.class(
    "DotLua.ECS.Components.Basic.ChildsComponent",
    function(self)
        self.childEntityIdentifies = {}
    end,
    Component
)

function ChildsComponent:GetCount()
    return #(self.childEntityIdentifies)
end

function ChildsComponent:GetChildIdentifyAt(index)
    if index > 0 and index <= #(self.childEntityIdentifies) then
        return self.childEntityIdentifies[index]:GetIdentify()
    end

    return nil, nil
end

function ChildsComponent:Add(contextName, guid)
    if not self:HasChild(contextName, guid) then
        local entityIdentify = EntityIdentifyPool.GetIdentify(contextName, guid)
        tinsert(self.childEntityIdentifies, entityIdentify)
    end
end

function ChildsComponent:Remove(contextName, guid)
    for i, v in ipairs(self.childEntityIdentifies) do
        local vContextName, vGUID = v:GetIdentify()
        if vContextName == contextName and vGUID == guid then
            tremove(self.childEntityIdentifies, i)

            EntityIdentifyPool.ReleaseIdentify(v)
            return true
        end
    end
    return false
end

function ChildsComponent:Has(contextName, guid)
    for _, v in ipairs(self.childEntityIdentifies) do
        local vContextName, vGUID = v:GetIdentify()
        if vContextName == contextName and vGUID == guid then
            return true
        end
    end

    return false
end

function ChildsComponent:DoRelease()
    tclear(
        self.childEntityIdentifies,
        function(identify)
            EntityIdentifyPool.ReleaseIdentify(identify)
        end
    )
end

return ChildsComponent
