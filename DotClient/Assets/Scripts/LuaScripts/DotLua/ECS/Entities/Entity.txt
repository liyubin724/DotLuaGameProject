local oop = require('DotLua/OOP/oop')
local Component = require('DotLua/ECS/Components/Component')
local GUIDComponent = require('DotLua/ECS/Components/Basic/GUIDComponent')
local CatgoryComponent = require('DotLua/ECS/Components/Basic/CatgoryComponent')

local tlength = table.length
local tvalues = table.values
local tclear = table.clear

local LogTag = 'Entity'

local Entity =
    oop.class(
    'DotLua.ECS.Entities.Entity',
    function(self)
        self.enable = true

        self.context = nil

        self.classToComponentDic = {}

        self.addComponentEvent = oop.event()
        self.removeComponentEvent = oop.event()
        self.replaceComponentEvent = oop.event()
        self.modifyComponentEvent = oop.event()

        self.guid = nil
        self.catgory = nil
    end
)

function Entity:GetContext()
    return self.context
end

function Entity:GetGUID()
    if not self.guid then
        local guidComponent = self:GetComponentByClass(GUIDComponent)
        self.guid = guidComponent:GetGUID()
    end

    return self.guid
end

function Entity:GetCatgory()
    if not self.catgory then
        local catgoryComponent = self:GetComponentByClass(CatgoryComponent)
        self.catgory = catgoryComponent:GetCatgory()
    end

    return self.catgory
end

function Entity:BindEvent(receiver, addFunc, removeFunc, replaceFunc, modifyFunc)
    if addFunc then
        self.addComponentEvent:Add(receiver, addFunc)
    end
    if removeFunc then
        self.removeComponentEvent:Add(receiver, removeFunc)
    end
    if replaceFunc then
        self.replaceComponentEvent:Add(receiver, replaceFunc)
    end
    if modifyFunc then
        self.modifyComponentEvent:Add(receiver, modifyFunc)
    end
end

function Entity:UnbindEvent(receiver, addFunc, removeFunc, replaceFunc, modifyFunc)
    if addFunc then
        self.addComponentEvent:Remove(receiver, addFunc)
    end
    if removeFunc then
        self.removeComponentEvent:Remove(receiver, removeFunc)
    end
    if replaceFunc then
        self.replaceComponentEvent:Remove(receiver, replaceFunc)
    end
    if modifyFunc then
        self.modifyComponentEvent:Remove(receiver, modifyFunc)
    end
end

function Entity:UnbindAllEvent()
    self.addComponentEvent:Clear()
    self.removeComponentEvent:Clear()
    self.replaceComponentEvent:Clear()
    self.modifyComponentEvent:Clear()
end

function Entity:DoGet(context, ...)
    self.enable = true
    self.context = context

    local len = select('#', ...)
    for i = 1, len, 1 do
        self:AddComponentByClass(select(i, ...))
    end
end

function Entity:DoRelease()
    self.enable = false
    self.guid = nil
    self.catgory = nil

    self:UnbindAllEvent()

    local values = tvalues(self.classToComponentDic)
    tclear(self.classToComponentDic)
    for i = 1, #values, 1 do
        self.context:releaseComponent(values[i])
    end
    self.context = nil
end

function Entity:GetComponentCount()
    return tlength(self.classToComponentDic)
end

function Entity:GetAllComponents()
    return tvalues(self.classToComponentDic)
end

function Entity:HasComponentByClass(componentClass)
    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class')
            return false
        end
    end

    return self.classToComponentDic[componentClass] ~= nil
end

function Entity:HasAllComponentByClasses(componentClasses)
    for _, componentClass in ipairs(componentClasses) do
        if not self:HasComponentByClass(componentClass) then
            return false
        end
    end

    return true
end

function Entity:HasAnyComponentByClasses(componentClasses)
    for _, componentClass in ipairs(componentClasses) do
        if self:HasComponentByClass(componentClass) then
            return true
        end
    end

    return false
end

function Entity:GetComponentByClass(componentClass)
    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class of Component')
            return nil
        end
    end

    return self.classToComponentDic[componentClass]
end

function Entity:AddComponentByClass(componentClass, ...)
    if not self.enable then
        oop.error(LogTag, 'The enity has been disabled')
        return nil
    end

    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class of Component')
            return nil
        end
    end

    if self:HasComponentByClass(componentClass) then
        oop.error(LogTag, string.format('The component of %s has beend added!', componentClass:GetClassName()))
        return nil
    end

    local component = self:addComponent(componentClass, ...)
    if not component then
        oop.error(LogTag, 'The component is not found')
        return nil
    end

    self.addComponentEvent:Invoke(self, componentClass)

    return component
end

function Entity:RemoveComponentByClass(componentClass)
    if not self.enable then
        oop.error(LogTag, 'The enity has been disabled')
        return
    end

    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class of Component')
            return nil
        end
    end

    local component = self:removeComponent(componentClass)
    if not component then
        oop.error(LogTag, 'the component is not found')
        return
    end

    self.removeComponentEvent:Invoke(self, componentClass)
    self.context:releaseComponent(component)
end

function Entity:ReplaceComponentByClass(oldComponentClass, newComponentClass)
    if not self.enable then
        oop.error(LogTag, 'The enity has been disabled')
        return nil
    end

    if not oldComponentClass and not newComponentClass then
        oop.error(LogTag, 'the component is nil')
        return nil
    end

    if oop.isDebug then
        if oldComponentClass and (not oop.isclass(oldComponentClass) or not oop.isclassof(oldComponentClass, Component)) then
            oop.error(LogTag, 'the param is not a class of Component')
            return nil
        end

        if newComponentClass and (not oop.isclass(newComponentClass) or not oop.isclassof(newComponentClass, Component)) then
            oop.error(LogTag, 'the param is not a class of Component')
            return nil
        end
    end

    if oldComponentClass and not newComponentClass then
        self:RemoveComponent(oldComponentClass)
        return nil
    elseif oldComponentClass and newComponentClass then
        local oldComponent = self:removeComponent(oldComponentClass)
        local newComponent = self:addComponent(newComponentClass)
        self.replaceComponentEvent:Invoke(self, oldComponentClass, newComponentClass)
        self.context:releaseComponent(oldComponent)
        return newComponent
    elseif not oldComponentClass and newComponentClass then
        return self:AddComponentByClass(newComponentClass)
    end
end

function Entity:ModifyComponentByClass(componentClass, modifyFunc, modifyTag)
    if not self.enable then
        oop.error(LogTag, 'The enity has been disabled')
        return
    end

    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class of Component')
            return
        end
    end

    local component = self.classToComponentDic[componentClass]
    if not component then
        oop.error(LogTag, 'the component is not found')
        return
    end

    if not modifyFunc then
        if oop.isDebug then
            if type(modifyTag) ~= 'function' then
                oop.error(LogTag, 'The modifyfunc is not a function')
                return
            end
        end

        modifyFunc(self, component, modifyTag)

        self.modifyComponentEvent:Invoke(self, componentClass, modifyTag)
    end
end

function Entity:MarkComponentModifiedByClass(componentClass, modifyTag)
    if not self.enable then
        oop.error(LogTag, 'The enity has been disabled')
        return
    end

    if oop.isDebug then
        if not oop.isclass(componentClass) or not oop.isclassof(componentClass, Component) then
            oop.error(LogTag, 'the param is not a class of Component')
            return
        end
    end

    local component = self.classToComponentDic[componentClass]
    if not component then
        oop.error(LogTag, 'the component is not found')
        return
    end

    self.modifyComponentEvent:Invoke(self, componentClass, modifyTag)
end

function Entity:Destroy()
    self.context:DestroyEntity(self)
end

function Entity:addComponent(componentClass, ...)
    local component = self.context:getComponent(componentClass, ...)
    if not component then
        return nil
    end

    self.classToComponentDic[componentClass] = component

    return component
end

function Entity:removeComponent(componentClass)
    local component = self.classToComponentDic[componentClass]
    if not component then
        return nil
    end

    self.classToComponentDic[componentClass] = nil

    return component
end

return Entity
