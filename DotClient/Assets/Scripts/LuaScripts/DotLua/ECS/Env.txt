local oop = require("DotLua/OOP/oop")
local Const = require("DotLua/ECS/Const")
local Contexts = require("DotLua/ECS/Core/Contexts")
local Systems = require("DotLua/ECS/Core/Systems")
local Servicers = require("DotLua/ECS/Core/Servicers")

local BasicContextListenSystem = require("DotLua/ECS/Systems/Basic/BasicContextListenSystem")
local FSMMacroSystem = require("DotLua/ECS/Systems/FSM/FSMMacroSystem")
local TimerMacroSystem = require("DotLua/ECS/Systems/Timer/TimerMacroSystem")

local CategoryCollectionComponent = require("DotLua/ECS/Components/Basic/CategoryCollectionComponent")
local DependedCollectionComponent = require("DotLua/ECS/Components/Basic/DependedCollectionComponent")

local MsgDispatcher = require("DotLua/Message/MsgDispatcher")
local TimerServicer = require("DotLua/ECS/Servicers/TimerServicer")
local MessageServicer = require("DotLua/ECS/Servicers/MessageServicer")

local Env =
    oop.class(
    "DotLua.ECS.Env",
    function(self)
        self.contexts = nil
        self.systems = nil
        self.servicers = nil

        self.msgDispatcher = MsgDispatcher()
    end
)

function Env:GetContexts()
    return self.contexts
end

function Env:GetSystems()
    return self.systems
end

function Env:GetServicers()
    return self.servicers
end

function Env:GetMsgDispatcher()
    return self.msgDispatcher
end

function Env:GetCollectionEntity()
    return self.contexts:GetGlobalEntity(Const.GLOBAL_ENTITY_COLLECTION_NAME)
end

function Env:GetTimerServicer()
    return self.servicers:GetServicer(Const.SERVICER_TIMER_NAME, TimerServicer)
end

function Env:GetMessageServicer()
    return self.servicers:GetServicer(Const.SERVICER_MESSAGE_NAME, MessageServicer)
end

function Env:DoInitialize()
    self.servicers = Servicers()
    self.servicers:RegisterServicer(Const.SERVICER_TIMER_NAME, TimerServicer, self.msgDispatcher)
    self.servicers:RegisterServicer(Const.SERVICER_MESSAGE_NAME, MessageServicer, self.msgDispatcher)

    self.contexts = Contexts()
    local timerContext = self.contexts:CreateContext(Const.CONTEXT_TIMER)
    local fsmContext = self.contexts:CreateContext(Const.CONTEXT_FSM)

    self.systems = Systems()

    local collectionEntity = self.contexts:CreateGlobalEntity(Const.GLOBAL_ENTITY_COLLECTION_NAME)
    collectionEntity:AddComponent(CategoryCollectionComponent)
    collectionEntity:AddComponent(DependedCollectionComponent)

    self.systems:RegisterSystem("BasicContextListenSystem", BasicContextListenSystem, self.contexts)
    self.systems:RegisterSystem("FSM Systems", FSMMacroSystem, fsmContext)
    self.systems:RegisterSystem("Timer Systems", TimerMacroSystem, timerContext)

    self.onServicersInitilized()
    self:onSystemsInitilized()
    self:onContextsInitilized()

    self:onInitilized()
end

function Env:DoUpdate(deltaTime, unscaleDeltaTime)
    self.servicers:DoUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoUpdate(deltaTime, unscaleDeltaTime)

    self.contexts:DoUpdate()
end

function Env:DoDestroy()
    if self[Const.ON_DESTROY_FUNC_NAME] then
        self[Const.ON_DESTROY_FUNC_NAME](self)
    end
    self.systems:DoDestroy()
    self.contexts:DoDestroy()
    self.servicers:DoDestroy()

    self.systems = nil
    self.contexts = nil
    self.servicers = nil
end

function Env:onInitilized()
end

function Env:onServicersInitilized()
end

function Env:onSystemsInitilized()
end

function Env:onContextsInitilized()
end

return Env
