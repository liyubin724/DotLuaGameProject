local oop = require("DotLua/OOP/oop")
local Const = require("DotLua/ECS/Const")
local Contexts = require("DotLua/ECS/Core/Contexts")
local Systems = require("DotLua/ECS/Core/Systems")
local Servicers = require("DotLua/ECS/Core/Servicers")
local DestroySystem = require("DotLua/ECS/Systems/Basic/DestroySystem")

local CategoryCollectionComponent = require("DotLua/ECS/Components/Basic/CategoryCollectionComponent")
local CategoryCollectionSystem = require("DotLua/ECS/Systems/Basic/CategoryCollectionSystem")

local GUIDCollectionComponent = require("DotLua/ECS/Components/Basic/GUIDCollectionComponent")
local GUIDCollectionSystem = require("DotLua/ECS/Systems/Basic/GUIDCollectionSystem")

local DependedCollectionComponent = require("DotLua/ECS/Components/Basic/DependedCollectionComponent")
local DependedCollectionSystem = require("DotLua/ECS/Systems/Basic/DependedCollectionSystem")

local MsgDispatcher = require("DotLua/Message/MsgDispatcher")
local TimerServicer = require("DotLua/ECS/Servicers/TimerServicer")
local MessageServicer = require("DotLua/ECS/Servicers/MessageServicer")

local tinsert = table.insert

local Env =
    oop.class(
    "DotLua.ECS.Env",
    function(self)
        self.contexts = nil
        self.systems = nil
        self.servicers = nil

        self.msgDispatcher = MsgDispatcher()
        self.bindedContextSystems = {}
    end
)

function Env:GetContexts()
    return self.contexts
end

function Env:GetSystems()
    return self.systems
end

function Env:GetServicers()
    return self.servicers
end

function Env:GetMsgDispatcher()
    return self.msgDispatcher
end

function Env:GetCollectionEntity()
    return self.contexts:GetGlobalEntity(Const.GLOBAL_ENTITY_COLLECTION_NAME)
end

function Env:GetTimerServicer()
    return self.servicers:GetServicer(Const.SERVICER_TIMER_NAME, TimerServicer)
end

function Env:GetMessageServicer()
    return self.servicers:GetServicer(Const.SERVICER_MESSAGE_NAME, MessageServicer)
end

function Env:DoInitlize()
    self.servicers = Servicers()
    self.servicers:RegisterServicer(Const.SERVICER_TIMER_NAME, TimerServicer, self.msgDispatcher)
    self.servicers:RegisterServicer(Const.SERVICER_MESSAGE_NAME, MessageServicer, self.msgDispatcher)

    self.contexts = Contexts()
    self.systems = Systems()

    local collectionEntity = self.contexts:CreateGlobalEntity(Const.GLOBAL_ENTITY_COLLECTION_NAME)
    collectionEntity:AddComponent(CategoryCollectionComponent)
    collectionEntity:AddComponent(GUIDCollectionComponent)
    collectionEntity:AddComponent(DependedCollectionComponent)

    local func = self[Const.ON_INITILIZE_FUNC_NAME]
    if func and type(func) == "function" then
        func(self)
    end

    self.contexts:BindContextEvent(self, self.onContextCreatedEvent, self.onContextReleasedEvent)
    self:bindContextSystem("DestroySystem",DestroySystem)
    self:bindContextSystem("GUIDCollectionSystem",GUIDCollectionSystem)
    self:bindContextSystem("CategoryCollectionSystem", CategoryCollectionSystem)
    self:bindContextSystem("DependedCollectionSystem", DependedCollectionSystem)

    self.onServicersInitilized()
    self:onSystemsInitilized()
    self:onContextsInitilized()

    self:onInitilized()
end

function Env:DoUpdate(deltaTime, unscaleDeltaTime)
    self.servicers:DoUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoUpdate(deltaTime, unscaleDeltaTime)
end

function Env:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.servicers:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.systems:DoLateUpdate(deltaTime, unscaleDeltaTime)
    self.contexts:DoLateUpdate()
end

function Env:DoDestroy()
    if self[Const.ON_DESTROY_FUNC_NAME] then
        self[Const.ON_DESTROY_FUNC_NAME](self)
    end

    self.systems:DoDestroy()
    self.systems = nil

    self.contexts:DoDestroy()
    self.contexts = nil

    self.servicers:DoDestroy()
    self.servicers = nil
end

function Env:bindContextSystem(name, systemClass)
    local data = {name = name, systemClass = systemClass}
    tinsert(self.bindedContextSystems, data)
end

function Env:onContextCreatedEvent(context)
    for _, data in ipairs(self.bindedContextSystems) do
        local systemName = string.format("%s-%s",context:GetName(),data.name)
        self.systems:RegisterSystem(systemName,data.systemClass,context)
    end

    self:onContextCreated(context)
end

function Env:onContextReleasedEvent(context)
    for _, data in ipairs(self.bindedContextSystems) do
        local systemName = string.format("%s-%s", context:GetName(), data.name)
        self.systems:UnregisterSystem(systemName, true)
    end

    self:onContextReleased(context)
end

function Env:onServicersInitilized()
end

function Env:onSystemsInitilized()
end

function Env:onContextsInitilized()
end

function Env:onInitilized()
end

function Env:onContextCreated(context)
end

function Env:onContextReleased(context)
end

return Env
