local ObjectType = require("DotLua/OOP/ObjectType")

local Object = {}
Object.__index = Object

Object._base = nil
Object._name = "OOP.Object"
Object._type = ObjectType.Class
Object._isInstance = false

function Object:Base()
    return self._base
end

function Object:GetClassName()
    return self._name
end

function Object:GetBaseClass()
    return self._base
end

function Object:GetType()
    return self._type
end

function Object:IsInstance()
    return self._isInstance
end

function Object:IsClass()
    return self._type == ObjectType.Class and not self._isInstance
end

function Object:IsEnum()
    return self._type == ObjectType.Enum
end

function Object:IsDelegate()
    return self._type == ObjectType.Delegate
end

function Object:IsEvent()
    return self._type == ObjectType.Event
end

function Object:IsKindOf(baseClass)
    local c = self
    while c do
        if c == baseClass then
            return true
        end

        c = c._base
    end
    return false
end

function Object:TryActionInvoke(funcName, ...)
    local func = self[funcName]
    if func and type(func) == "function" then
        func(self, ...)
    end
end

function Object:TryFuncInvoke(funcName, ...)
    local func = self[funcName]
    if func and type(func) == "function" then
        return func(self, ...)
    end
end

function Object:ToString()
    return self._className
end

return Object
