local Object = require("DotLua/OOP/Object")

local instancemeta = {}
instancemeta.__index = function(instance, key)
    if instance._cls then
        return instance._cls[key]
    end
    return nil
end

instancemeta.__tostring = function(instance)
    local tostringFunc = instance.ToString
    if tostringFunc then
        return tostringFunc(instance)
    end

    return ""
end

instancemeta.__eq = function(target1, target2)
    if not target2 then
        return false
    end

    local equalFunc = target1.EqualTo
    if equalFunc then
        return equalFunc(target1, target2)
    end

    return rawequal(target1, target2)
end

local clsmeta = {}
clsmeta.__index = function(cls, key)
    local r = rawget(cls, key)
    if not r and key ~= "_base" then
        local b = rawget(cls, "_base")
        if b then
            r = b[key]
        end
    end

    return r
end

clsmeta.__tostring = function(cls)
    return string.format("<class:%s>",cls._name)
end

clsmeta.__call = function(cls, ...)
    local instance = {}
    instance._isInstance = true
    instance._cls = cls

    setmetatable(instance, instancemeta)

    cls.__ctor(instance, ...)

    return instance
end

local class = function(name, ctor, base)
    local cls = {}
    cls._name = name
    cls._ctor = ctor

    cls._base = base or Object

    cls.__index = cls

    cls.__ctor = function(instance, ...)
        if base then
            base.__ctor(instance, ...)
        end

        if ctor then
            ctor(instance, ...)
        end
    end
    cls.baseclass = function()
        return base
    end

    setmetatable(cls, clsmeta)

    return cls
end

return class
