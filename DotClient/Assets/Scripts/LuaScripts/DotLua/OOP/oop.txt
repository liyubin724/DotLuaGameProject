local require = _G.require

require("DotLua/Utils/tableEx")
require("DotLua/Utils/mathEx")
local Enum = require("DotLua/OOP/Enum")
local Delegate = require("DotLua/OOP/Delegate")
local Event = require("DotLua/OOP/Event")

local oop = {}
if _G.isDebug ~= nil then
    oop.isDebug = _G.isDebug
else
    oop.isDebug = true
end

oop.Logger = require("DotLua/Debug/Logger")
oop.info = oop.Logger.Info
oop.warning = oop.Logger.Warning
oop.error = oop.Logger.Error

oop.class = require("DotLua/OOP/class")
oop.asreadonly = require("DotLua/OOP/asreadonly")

oop._pathtoloadeddic = {}
oop._nametoclassdic = {}

oop.getclassname = function(target)
    if oop.isclassorinstance(target) then
        return target:GetClassName()
    end

    return nil
end

oop.getclassbyname = function(className)
    if type(className) ~= "string" then
        oop.error("oop", "the param of className should be a string")
        return nil
    end

    return oop._nametoclassdic[className]
end

oop.load = function(path)
    local target = oop._pathtoloadeddic[path]
    if target then
        return target
    end

    target = require(path)

    if target then
        oop._pathtoloadeddic[path] = target

        local getclassname = target.GetClassName
        if getclassname then
            local classname = getclassname(target)
            if classname then
                oop._nametoclassdic[classname] = target
            end
        end
    end

    return target
end

oop.unload = function(path)
    local target = oop._pathtoloadeddic[path]
    if target then
        oop._pathtoloadeddic[path] = nil

        local getclassname = target.GetClassName
        if getclassname then
            local classname = getclassname(target)
            if classname then
                oop._nametoclassdic[classname] = nil
            end
        end
    end
end

oop.using = oop.load

oop.instance = function(path)
    local cls = oop.load(path)
    if cls then
        return cls()
    end
    return nil
end

oop.instancewith = function(path, ...)
    local cls = oop.load(path)
    if cls then
        return cls(...)
    end
    return nil
end

oop.enum = function(name, values)
    return Enum(name, values)
end

oop.delegate = function(receiver, func)
    return Delegate(receiver, func)
end

oop.event = function()
    return Event()
end

oop.isclass = function(target)
    if not target then
        return false
    end

    if not target.IsClass then
        return false
    end
    return target:IsClass()
end

oop.isclassof = function(targetClass, baseClass)
    if not targetClass or not baseClass then
        return false
    end

    if type(targetClass) ~= "table" or type(baseClass) ~= "table" then
        return false
    end

    if not baseClass.IsClass or not baseClass:IsClass() then
        return false
    end

    if not targetClass.IsClass or not targetClass:IsClass() then
        return false
    end

    return targetClass:IsKindOf(baseClass)
end

oop.isinstance = function(target)
    if not target then
        return false
    end

    if not target.IsInstance then
        return false
    end

    return target:IsInstance()
end

oop.isinstanceof = function(target, baseClass)
    if not target or not baseClass then
        return false
    end

    if not baseClass.IsClass or not baseClass:IsClass() then
        return false
    end

    if not target.IsInstance or not target:IsInstance() then
        return false
    end

    return target:IsKindOf(baseClass)
end

oop.isclassorinstance = function(target)
    return oop.isclass(target) or oop.isinstance(target)
end

oop.iskindof = function(target, baseClass)
    if not oop.isclassorinstance(target) or not oop.isclass(baseClass) then
        return false
    end

    return target:IsKindOf(baseClass)
end

oop.isenum = function(target)
    if not target then
        return false
    end

    local isEnumFunc = target.IsEnum
    if not isEnumFunc then
        return false
    end

    return isEnumFunc(target)
end

oop.isdelegate = function(target)
    if not target then
        return false
    end

    local isDelegateFunc = target.IsDelegate
    if not isDelegateFunc then
        return false
    end
    return isDelegateFunc(target)
end

return oop
