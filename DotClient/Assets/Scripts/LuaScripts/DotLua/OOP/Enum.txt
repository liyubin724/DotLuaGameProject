require("DotLua/Utils/tableEx")
local ObjectType = require("DotLua/OOP/ObjectType")
local class = require("DotLua/OOP/class")
local asreadonly = require("DotLua/OOP/asreadonly")

local tisarray = table.isarray
local tinsert = table.insert

local Enum =
    class(
    "DotLua.OOP.Enum",
    function(self, name, values)
        self._name = name
        self._names = {}
        self._values = {}

        if values then
            if tisarray(values) then
                for i, v in ipairs(values) do
                    tinsert(self._names, v)
                    tinsert(self._values, i)

                    self[v] = i
                    self[i] = v
                end
            else
                for k, v in pairs(values) do
                    tinsert(self._names, k)
                    tinsert(self._values, v)

                    self[k] = v
                    self[v] = k
                end
            end
        end

        asreadonly(self._names)
        asreadonly(self._values)
    end
)

Enum._type = ObjectType.Enum

function Enum:GetNames()
    return self._names
end

function Enum:GetValues()
    return self._values
end

function Enum:GetNameByValue(value)
    return self._v2n[value]
end

function Enum:IsValidName(name)
    return self._n2v[name] ~= nil
end

function Enum:IsValidValue(value)
    return self._v2n[value] ~= nil
end

function Enum:ToString()
    local str = string.format("<enum:%s>:{", self:GetClassName())
    local names = self:GetNames()
    if names then
        for i = 1, #names, 1 do
            str = str .. string.format("%s = %s,", names[i], tostring(rawget(self, names[i])))
        end
    end
    str = str .. "}"
    return str
end

Enum.__newindex = function(_, k, _)
    error("Enum::can't add new key in to the Enum.key = " .. k)
end

return Enum
