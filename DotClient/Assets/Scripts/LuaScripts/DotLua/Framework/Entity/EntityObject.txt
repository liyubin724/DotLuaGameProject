local oop = require("DotLua/OOP/oop")
local EntityController = require("DotLua/Framework/Entity/EntityController")

local LogTag = "EntityObject"

local EntityObject =
    oop.class(
    "EntityObject",
    function(self)
        self.guid = nil
        self.category = nil

        self.controllerDic = {}
    end
)

function EntityObject:SetIdentity(guid, category)
    self.guid = guid
    self.category = category
end

function EntityObject:GetIdentity()
    return self.guid, self.category
end

function EntityObject:DoActivate(guid, category)
    self:SetIdentity(guid, category)
end

function EntityObject:HasContrller(name)
    return self.controllerDic[name] ~= nil
end

function EntityObject:GetContrller(name)
    return self.controllerDic[name]
end

function EntityObject:AddController(name, controller)
    if oop.isDebug then
        if self.controllerDic[name] then
            oop.error(LogTag, "The controller(%s) has been added.", name)
            return
        end

        if oop.isinstanceof(controller, EntityController) then
            oop.error(LogTag, "The controller is not a instance of EntityController")
            return
        end
    end

    self.controllerDic[name] = controller
    controller:DoActivate()
end

function EntityObject:RemoveController(name)
    local controller = self.controllerDic[name]
    if controller then
        self.controllerDic[name] = nil
        controller:DoDeactivate()
    end

    return controller
end

function EntityObject:DoUpdate(deltaTime, unscaleDeltaTime)
    
end

function EntityObject:DoDeactivate()
end

function EntityObject:DoDestroy()
end

return EntityObject
