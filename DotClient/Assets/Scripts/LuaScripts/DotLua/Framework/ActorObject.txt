local oop = require("DotLua/OOP/oop")
local EntityController = require("DotLua/Framework/Entity/EntityController")
local MsgDispatcher = require("DotLua/Message/MsgDispatcher")

local tremovevalue = table.removevalue

local LogTag = "ActorObject"

local ActorObject =
    oop.class(
    "ActorObject",
    function(self)
        self.guid = nil
        self.category = nil

        self.dispatcher = MsgDispatcher()

        self.controllerDic = {}
        self.updateControllers = {}
    end
)

function ActorObject:SetIdentity(guid, category)
    self.guid = guid
    self.category = category
end

function ActorObject:GetIdentity()
    return self.guid, self.category
end

function ActorObject:GetDispatcher()
    return self.dispatcher
end

function ActorObject:DoActivate()
end

function ActorObject:HasContrller(name)
    return self.controllerDic[name] ~= nil
end

function ActorObject:GetContrller(name)
    return self.controllerDic[name]
end

function ActorObject:AddController(name, controller)
    if oop.isDebug then
        if self.controllerDic[name] then
            oop.error(LogTag, "The controller(%s) has been added.", name)
            return
        end

        if oop.isinstanceof(controller, EntityController) then
            oop.error(LogTag, "The controller is not a instance of EntityController")
            return
        end
    end

    self.controllerDic[name] = controller
    if controller["DoUpdate"] then
        self:insertController(self.updateControllers, controller)
    end
    controller:DoActivate()
end

function ActorObject:RemoveController(name)
    local controller = self.controllerDic[name]
    if controller then
        self.controllerDic[name] = nil
        if controller["DoUpdate"] then
            tremovevalue(self.updateControllers, controller)
        end

        controller:DoDeactivate()
    end

    return controller
end

function ActorObject:DoUpdate(deltaTime, unscaleDeltaTime)
    if #(self.updateControllers) > 0 then
        for i = 1, #(self.updateControllers) do
            local controller = self.updateControllers[i]
            controller:DoUpdate(deltaTime, unscaleDeltaTime)
        end
    end
end

function ActorObject:SendMessage(name, ...)
    if self.dispatcher then
        self.dispatcher:Trigger(name, ...)
    end
end

function ActorObject:DoDeactivate()
end

function ActorObject:DoDestroy()
end

function ActorObject:insertController(controllers, controller)
    local priority = controller:GetPriority()

    local insertIndex = -1
    for i, c in ipairs(controllers) do
        local p = c:GetPriority()
        if p > priority then
            insertIndex = i
            break
        end
    end
    if insertIndex > 0 then
        table.insert(controllers, controller, insertIndex)
    else
        table.insert(controllers, controller)
    end
end

return ActorObject
