local Vector3 = require('DotLua/Math/Vector3')
local Quaternion = require('DotLua/Math/Quaternion')
local Mathf = require('DotLua/Math/Mathf')

local math = math
local acos = math.acos
local sqrt = math.sqrt
local max = math.max
local min = math.min
local clamp = Mathf.Clamp
local sin = math.sin
local abs = math.abs

local rad2Deg = Mathf.Red2Deg
local deg2Rad = Mathf.Deg2Rad
local overSqrt2 = Mathf.OverSqrt2

function Vector3.ClampMagnitude(v, maxLength)
    if v:GetSqrMagnitude() > (maxLength * maxLength) then
        local r = Vector3.Normalize(v)
        r:Mul(maxLength)
        return r
    end

    return Vector3(0, 0, 0)
end

function Vector3.Distance(va, vb)
    return sqrt((va.x - vb.x) ^ 2 + (va.y - vb.y) ^ 2 + (va.z - vb.z) ^ 2)
end

function Vector3.Dot(lhs, rhs)
    return lhs.x * rhs.x + lhs.y * rhs.y + lhs.z * rhs.z
end

function Vector3.Lerp(from, to, t)
    t = clamp(t, 0, 1)
    return Vector3(from.x + (to.x - from.x) * t, from.y + (to.y - from.y) * t, from.z + (to.z - from.z) * t)
end

function Vector3.Max(lhs, rhs)
    return Vector3(max(lhs.x, rhs.x), max(lhs.y, rhs.y), max(lhs.z, rhs.z))
end

function Vector3.Min(lhs, rhs)
    return Vector3(min(lhs.x, rhs.x), min(lhs.y, rhs.y), min(lhs.z, rhs.z))
end

function Vector3.Normalize(v)
    local x, y, z = v.x, v.y, v.z
    local num = sqrt(x * x + y * y + z * z)

    if num > 1e-5 then
        return Vector3(x / num, y / num, z / num)
    end

    return Vector3(0, 0, 0)
end

function Vector3.Angle(from, to)
    return acos(clamp(Vector3.Dot(from:Normalize(), to:Normalize()), -1, 1)) * rad2Deg
end

function Vector3.OrthoNormalize(va, vb, vc)
    va:SetNormalize()
    vb:Sub(vb:Project(va))
    vb:SetNormalize()

    if vc == nil then
        return va, vb
    end

    vc:Sub(vc:Project(va))
    vc:Sub(vc:Project(vb))
    vc:SetNormalize()
    return va, vb, vc
end

function Vector3.MoveTowards(current, target, maxDistanceDelta)
    local delta = target - current
    local sqrDelta = delta:SqrMagnitude()
    local sqrDistance = maxDistanceDelta * maxDistanceDelta

    if sqrDelta > sqrDistance then
        local magnitude = sqrt(sqrDelta)

        if magnitude > 1e-6 then
            delta:Mul(maxDistanceDelta / magnitude)
            delta:Add(current)
            return delta
        else
            return current:Clone()
        end
    end

    return target:Clone()
end

local function ClampedMove(lhs, rhs, clampedDelta)
    local delta = rhs - lhs

    if delta > 0 then
        return lhs + min(delta, clampedDelta)
    else
        return lhs - min(-delta, clampedDelta)
    end
end

local function OrthoNormalVector(vec)
    local res = Vector3()

    if abs(vec.z) > overSqrt2 then
        local a = vec.y * vec.y + vec.z * vec.z
        local k = 1 / sqrt(a)
        res.x = 0
        res.y = -vec.z * k
        res.z = vec.y * k
    else
        local a = vec.x * vec.x + vec.y * vec.y
        local k = 1 / sqrt(a)
        res.x = -vec.y * k
        res.y = vec.x * k
        res.z = 0
    end

    return res
end

function Vector3.RotateTowards(current, target, maxRadiansDelta, maxMagnitudeDelta)
    local len1 = current:Magnitude()
    local len2 = target:Magnitude()

    if len1 > 1e-6 and len2 > 1e-6 then
        local from = current / len1
        local to = target / len2
        local cosom = Vector3.Dot(from, to)

        if cosom > 1 - 1e-6 then
            return Vector3.MoveTowards(current, target, maxMagnitudeDelta)
        elseif cosom < -1 + 1e-6 then
            local axis = OrthoNormalVector(from)
            local q = Quaternion.AngleAxis(maxRadiansDelta * rad2Deg, axis)
            local rotated = q:MulVec3(from)
            local delta = ClampedMove(len1, len2, maxMagnitudeDelta)
            rotated:Mul(delta)
            return rotated
        else
            local angle = acos(cosom)
            local axis = Vector3.Cross(from, to)
            axis:SetNormalize()
            local q = Quaternion.AngleAxis(min(maxRadiansDelta, angle) * rad2Deg, axis)
            local rotated = q:MulVec3(from)
            local delta = ClampedMove(len1, len2, maxMagnitudeDelta)
            rotated:Mul(delta)
            return rotated
        end
    end

    return Vector3.MoveTowards(current, target, maxMagnitudeDelta)
end

function Vector3.SmoothDamp(current, target, currentVelocity, smoothTime, deltaTime)
    local maxSpeed = Mathf.Infinity
    smoothTime = max(0.0001, smoothTime)
    local num = 2 / smoothTime
    local num2 = num * deltaTime
    local num3 = 1 / (1 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2)
    local vector2 = target:Clone()
    local maxLength = maxSpeed * smoothTime
    local vector = current - target
    vector:ClampMagnitude(maxLength)
    target = current - vector
    local vec3 = (currentVelocity + (vector * num)) * deltaTime
    currentVelocity = (currentVelocity - (vec3 * num)) * num3
    local vector4 = target + (vector + vec3) * num3

    if Vector3.Dot(vector2 - current, vector4 - vector2) > 0 then
        vector4 = vector2
        currentVelocity:Set(0, 0, 0)
    end

    return vector4, currentVelocity
end

function Vector3.Scale(a, b)
    local x = a.x * b.x
    local y = a.y * b.y
    local z = a.z * b.z
    return Vector3(x, y, z)
end

function Vector3.Cross(lhs, rhs)
    local x = lhs.y * rhs.z - lhs.z * rhs.y
    local y = lhs.z * rhs.x - lhs.x * rhs.z
    local z = lhs.x * rhs.y - lhs.y * rhs.x
    return Vector3(x, y, z)
end

function Vector3.Reflect(inDirection, inNormal)
    local num = -2 * Vector3.Dot(inNormal, inDirection)
    inNormal = inNormal * num
    inNormal:Add(inDirection)
    return inNormal
end

function Vector3.Project(vector, onNormal)
    local num = onNormal:SqrMagnitude()

    if num < 1.175494e-38 then
        return Vector3(0, 0, 0)
    end

    local num2 = Vector3.Dot(vector, onNormal)
    local v3 = onNormal:Clone()
    v3:Mul(num2 / num)
    return v3
end

function Vector3.ProjectOnPlane(vector, planeNormal)
    local v3 = Vector3.Project(vector, planeNormal)
    v3:Mul(-1)
    v3:Add(vector)
    return v3
end

function Vector3.Slerp(from, to, t)
    local omega, sinom, scale0, scale1

    if t <= 0 then
        return from:Clone()
    elseif t >= 1 then
        return to:Clone()
    end

    local v2 = to:Clone()
    local v1 = from:Clone()
    local len2 = to:Magnitude()
    local len1 = from:Magnitude()
    v2:Div(len2)
    v1:Div(len1)

    local len = (len2 - len1) * t + len1
    local cosom = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z

    if cosom > 1 - 1e-6 then
        scale0 = 1 - t
        scale1 = t
    elseif cosom < -1 + 1e-6 then
        local axis = OrthoNormalVector(from)
        local q = Quaternion.AngleAxis(180.0 * t, axis)
        local v = q:MulVec3(from)
        v:Mul(len)
        return v
    else
        omega = acos(cosom)
        sinom = sin(omega)
        scale0 = sin((1 - t) * omega) / sinom
        scale1 = sin(t * omega) / sinom
    end

    v1:Mul(scale0)
    v2:Mul(scale1)
    v2:Add(v1)
    v2:Mul(len)
    return v2
end

function Vector3.AngleAroundAxis(from, to, axis)
    from = from - Vector3.Project(from, axis)
    to = to - Vector3.Project(to, axis)
    local angle = Vector3.Angle(from, to)
    return angle * (Vector3.Dot(axis, Vector3.Cross(from, to)) < 0 and -1 or 1)
end

Vector3.magnitude = Vector3.Magnitude
Vector3.normalized = Vector3.Normalize
Vector3.sqrMagnitude = Vector3.SqrMagnitude
