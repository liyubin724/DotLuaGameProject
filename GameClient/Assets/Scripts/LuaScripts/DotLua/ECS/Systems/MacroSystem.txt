local oop = require('DotLua/OOP/oop')

local System = oop.using('DotLua/ECS/Systems/System')
local SystemUtility = require('DotLua/ECS/Systems/SystemUtility')

local tinsert = table.insert
local tremovevalue = table.removevalue
local tforeach = table.foreach

local MacroSystem =
    oop.class(
    'MacroSystem',
    function(self)
        self.initializeSystmes = {}
        self.teardownSystems = {}
        self.updateSystems = {}
        self.lateUpdateSystems = {}
        self.frameSystems = {}
    end,
    System
)

function MacroSystem:Add(system)
    if oop.isDebug then
        if not oop.isinstanceof(system, System) then
            oop.error('ECS', 'MacroSystem:Add->')
            return
        end
    end

    if system[SystemUtility.FUNC_NAME_INITIZLIZE] then
        tinsert(self.initializeSystmes, system)
    end
    if system[SystemUtility.FUNC_NAME_TEARDOWN] then
        tinsert(self.teardownSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_UPDATE] then
        tinsert(self.updateSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_LATEUPDATE] then
        tinsert(self.lateUpdateSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_FRAME] then
        tinsert(self.frameSystems, system)
    end
end

function MacroSystem:Remove(system)
    if oop.isDebug then
        if not oop.isinstanceof(system, System) then
            oop.error('ECS', 'MacroSystem:Remove->')
            return
        end
    end

    if system[SystemUtility.FUNC_NAME_INITIZLIZE] then
        tremovevalue(self.initializeSystmes, system)
    end
    if system[SystemUtility.FUNC_NAME_TEARDOWN] then
        tremovevalue(self.teardownSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_UPDATE] then
        tremovevalue(self.updateSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_LATEUPDATE] then
        tremovevalue(self.lateUpdateSystems, system)
    end
    if system[SystemUtility.FUNC_NAME_FRAME] then
        tremovevalue(self.frameSystems, system)
    end
end

function MacroSystem:DoInitialize()
    if #(self.initializeSystmes) > 0 then
        tforeach(
            self.initializeSystmes,
            function(system)
                system:DoInitialize()
            end
        )
    end
end

function MacroSystem:DoTeardown()
    if #(self.teardownSystems) > 0 then
        tforeach(
            self.teardownSystems,
            function(system)
                system:DoTeardown()
            end
        )
    end
end

function MacroSystem:DoUpdate()
    if #(self.updateSystems) > 0 then
        tforeach(
            self.updateSystems,
            function(system)
                system:DoUpdate()
            end
        )
    end
end

function MacroSystem:DoLateUpdate()
    if #(self.lateUpdateSystems) > 0 then
        tforeach(
            self.lateUpdateSystems,
            function(system)
                system:DoLateUpdate()
            end
        )
    end
end

function MacroSystem:DoFrame()
    if #(self.frameSystems) > 0 then
        tforeach(
            self.frameSystems,
            function(system)
                system:DoFrame()
            end
        )
    end
end

return MacroSystem
