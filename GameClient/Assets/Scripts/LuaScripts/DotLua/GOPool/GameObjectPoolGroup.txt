local GameObjectPool = require('DotLua/GOPool/GameObjectPool')
local CSAgent = require('DotLua/CSAgent')

local GameObject = CSAgent.GameObject
----private----
-- 缓存池的分组，在调试模式下将会对分组也创建对应名称的GameObject结点，并将后缓存池中的对象放置到对应的结点下，
-- 如果在非调试模式下将会不再创建，而是直接放置到根结点下
-- @param name 分组名称
-- @param pTransform 管理器的Transform结点
local GameObjectPoolGroup =
    class(
    function(self, name, pTransform)
        self.name = name
        self.parentTransform = pTransform

        self.groupTransform = nil
        self.pools = {}

        if IsDebug then
            self.groupTransform = GameObject(name).transform
            self.groupTransform:SetParent(self.parentTransform, false)
        end
    end
)

----private----
-- 获取存在缓存池中对象的结点
-- @return Transform
function GameObjectPoolGroup:GetTransform()
    if self.groupTransform then
        return self.groupTransform
    end
    return self.parentTransform
end

----public----
-- 判断是存在指定指定名称的缓存池
-- @param name 缓存池的名称，一般情况下会使用资源的路径或者唯一地址做为名称
-- @return bool 返回是否存在指定的缓存池
function GameObjectPoolGroup:HasPool(name)
    return self.pools[name] ~= nil
end

----public----
-- 获取指定名称的缓存池
-- @param name 缓存池的名称，一般情况下会使用资源的路径或者唯一地址做为名称
-- @return GameObjectPool 返回指定的缓存池
function GameObjectPoolGroup:GetPool(name)
    return self.pools[name]
end

----public----
-- 创建指定名称的缓存池
-- @param name 缓存池的名称，一般情况下会使用资源的路径或者唯一地址做为名称
-- @param templateType 模板对象的类型
-- @param templateGameObject 模板对象，类型为GameObject
-- @return GameObjectPool 返回指定的缓存池
function GameObjectPoolGroup:CreatePool(name, templateType, templateGameObject)
    local pool = self:GetPool(name)
    if pool then
        Logger.LogError('GOPool', 'The pool has been created.name = ' .. name)
        return nil
    else
        pool = GameObjectPool(name, self:GetTransform(), templateType, templateGameObject)
        self.pools[name] = pool
        return pool
    end
end

----public----
-- 删除指定名称的缓存池
-- @param name 缓存池的名称，一般情况下会使用资源的路径或者唯一地址做为名称
-- @return void
function GameObjectPoolGroup:RemovePool(name)
    local pool = self:GetPool(name)
    if pool then
        pool:Dispose()

        self.pools[name] = nil
    end
end

----public----
-- 释放缓存池
-- @return void
function GameObjectPoolGroup:Dispose()
    for _, pool in pairs(self.pools) do
        pool:Dispose()
    end
    self.pools = nil

    if self.groupTransform then
        GameObject.Destroy(self.groupTransform.gameObject)
        self.groupTransform = nil
    end

    self.parentTransform = nil
end

return GameObjectPoolGroup
