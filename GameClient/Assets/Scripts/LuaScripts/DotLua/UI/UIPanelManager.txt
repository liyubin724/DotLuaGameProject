require('DotLua/Class')

local Game = Game

UIPanelMode = {
    Append = 0,
    Navigate = 1,
    Mutex = 2
}

UIPanelLayer = {
    Bottomlowest = 0,
    Bottom = 1,
    Default = 2,
    Top = 3,
    Topmost = 4
}

UIPanelManager =
    Class(
    function(self)
        self.uiRoot = nil
        self.panels = {}
    end
)

function UIPanelManager.GetInstance()
    local panelMgr = Game.PanelMgr
    if not panelMgr then
        panelMgr = UIPanelManager()

        Game.PanelMgr = panelMgr
    end

    return panelMgr
end

function UIPanelManager:GetUIRoot()
    if not self.uiRoot then
        self.uiRoot = CS.DotEngine.UI.UIRoot.Root
    end
    return self.uiRoot
end

function UIPanelManager:GetLayerTransform(layer)
    if layer and layer >= UIPanelLayer.Bottomlowest and layer <= UIPanelLayer.Topmost then
        return self:GetUIRoot():GetLayerTransform(layer)
    end

    return nil
end

function UIPanelManager:OpenPanel(panelName, panelControllerClass, panelLayer, panelMode)
    local layerPanels = self.panels[panelLayer]
    if not layerPanels then
        layerPanels = {}
        self.panels[panelLayer] = layerPanels
    end

    local controller = panelControllerClass(panelName)
    controller:SetLayer(panelLayer, self:GetLayerTransform(panelLayer))
    controller:SetMode(panelMode)

    if panelMode == UIPanelMode.Navigate then
        for index = #layerPanels, 1, -1 do
            local pController = layerPanels[index]
            local pMode = pController:GetMode()
            pController:SetVisible(false)
            if pMode ~= UIPanelMode.Append then
                break
            end
        end
    elseif panelMode == UIPanelMode.Mutex then
        for index = #layerPanels, 1, -1 do
            layerPanels[index]:DoDestroy()
            table.remove(layerPanels, index)
        end
    end

    table.insert(layerPanels, controller)
    controller:DoStart()

    return controller
end

function UIPanelManager:ClosePanel(panelController)
    local panelLayer = panelController:GetLayer()
    local panelMode = panelController:GetMode()

    local layerPanels = self.panels[panelLayer]
    if not layerPanels then
        DebugLog.Error('PanelMgr', 'Error')
        return
    end

    local panelIndex = -1
    for index = 1, #(layerPanels) do
        if layerPanels[index] == panelController then
            panelIndex = index
            break
        end
    end

    if panelIndex < 0 then
        DebugLog.Error('PanelMgr', 'Error')
        return
    end

    if panelIndex < #layerPanels then
        for index = #layerPanels, panelIndex, -1 do
            layerPanels[index]:DoDestroy()
            table.remove(layerPanels, index)
        end
    end

    table.remove(layerPanels, panelIndex)
    panelController:DoDestroy()

    if panelMode == UIPanelMode.Navigate and #layerPanels > 0 then
        for index = #layerPanels, 1, -1 do
            local pController = layerPanels[index]
            pController:SetVisible(true)
            local pMode = pController:GetMode()
            if pMode ~= UIPanelMode.Append then
                break
            end
        end
    end
end

function UIPanelManager:CloseAllPanelInLayer(panelLayer)
    local layerPanels = self.panels[panelLayer]
    if layerPanels and #layerPanels > 0 then
        for index = #layerPanels, 1, -1 do
            layerPanels[index]:DoDestroy()
            table.remove(layerPanels, index)
        end
    end
end
