require('DotLua/Class')

local CSUIView = CS.DotEngine.Lua.UI.View.LuaUIView
local CSUnityObject = CS.UnityEngine.Object
local eventMgr = Game.EventMgr
local assetMgr = Game.AssetMgr
local DebugLog = DebugLog

UIViewController =
    Class(
    function(self, name)
        self.name = name

        self.view = nil
        self.loadingViewIndex = -1
        self.visible = true
    end
)

function UIViewController:GetName()
    return self.name
end

function UIViewController:SetVisible(visible)
    if self.visible ~= visible then
        self.visible = visible

        if self.view then
            self.view:SetVisible(self.visible)
        end
    end
end

function UIViewController:GetVisible()
    return self.visible
end

function UIViewController:DoStart()
    self:RegisterEvents()
end

----internal----
-- 准备删除界面
function UIViewController:DoDestroy()
    self:UnregisterEvents()
    if self.loadingViewIndex>0 then
        assetMgr:UnloadAssetAsync(self.loadingViewIndex)
    end
    self.loadingViewIndex = -1
    if self.view then
        CSUnityObject.Destroy(self.view:GetGameObject())
    end
end

----public----
-- 设置显示的View，可以直接指定对应的View或者通过资源地址加载
-- @param view 绑定到C#的LuaUIView上的Lua的UIView
-- @return void
function UIViewController:SetView(view)
    self.view = view

    view:SetController(self)

    self:OnViewInited()
end

----public----
-- 通过指定的address来加载显示资源
-- @param address 资源地址
-- @return void
function UIViewController:LoadView(address)
    if self.loadingViewIndex > 0 then
        DebugLog.Error('View', 'view error')
        return
    end

    self.loadingViewIndex = assetMgr:InstanceAssetAsync(address, self, nil, UIViewController.OnLoadViewComplete, nil)
end

----private----
-- 根据地址加载资源结束
-- @return void
function UIViewController:OnLoadViewComplete(address, uObject, userdata)
    self.loadingViewIndex = -1
    if uObject then
        local view = uObject:GetComponent(typeof(CSUIView))
        if view then
            self:SetView(view.ObjTable)
        end
    end
end

----protected----
-- View初始化完成，如果View层是动态加载的，则加载成功后会调用
function UIViewController:OnViewInited()
end

----protected----
-- 控制器关心的事件的ID号
-- @return table/nil 消息号的数组
function UIViewController:ListInterestEvents()
    return nil
end

----protected----
-- 事件的接收，对于子类来说需要重写以处理不同的消息
-- @param eventID 触发的消息的ID号
-- @param ... 多参数
-- @return void
function UIViewController:HandleEvents(eventID, ...)
end

----private----
-- 注册消息
-- @return void
function UIViewController:RegisterEvents()
    local eventIDs = self:ListInterestEvents()
    if eventIDs and #(eventIDs) > 0 then
        for i = 1, #(eventIDs), 1 do
            eventMgr:RegisterListener(eventIDs[i], self, self.HandleEvents, nil)
        end
    end
end

----private----
-- 取消注册的消息
-- @return void
function UIViewController:UnregisterEvents()
    local eventIDs = self:ListInterestEvents()
    if eventIDs and #(eventIDs) > 0 then
        for i = 1, #(eventIDs), 1 do
            eventMgr:UnregisterListener(eventIDs[i], self, self.HandleEvents)
        end
    end
end
