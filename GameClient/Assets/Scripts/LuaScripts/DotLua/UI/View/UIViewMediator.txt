local Framework = require('DotLua/Framework/Framework')
local CSAgent = require('DotLua/CSAgent')
local ObjectPool = require('DotLua/Pool/ObjectPool')
local ObjectPoolItem = require('DotLua/Pool/ObjectPoolItem')
local Dictionary = require('DotLua/Generic/Dictionary')

local TimerType = {
    None = 0,
    Interval = 1,
    End = 2,
    IntervalAndEnd = 3
}

local TimerData =
    class(
    ObjectPoolItem,
    function(self)
        self:DoRelease()
    end
)

function TimerData:SetData(id, timerType, intervalFunc, endFunc, userdata, handler)
    self.id = id
    self.timerType = timerType
    self.intervalFunc = intervalFunc
    self.endFunc = endFunc
    self.userdata = userdata
    self.handler = handler
end

function TimerData:DoRelease()
    self.id = -1
    self.timerType = TimerType.None
    self.intervalFunc = nil
    self.endFunc = nil
    self.userdata = nil
    self.handler = nil
end

local UIViewMediator =
    class(
    Framework.Mediator,
    function(self, name)
        self.viewLoadingIndex = -1
        self.isTimerRunning = false
    end
)

function UIViewMediator:SetView(view)
    self._base.SetView(self, view)

    view:SetMediator(self)
    self:OnViewInited()
end

function UIViewMediator:OnViewInited()
end

function UIViewMediator:LoadView(address)
    local assetServicer = Game.GetAssetServicer()

    if self.viewLoadingIndex > 0 then
        assetServicer:UnloadAssetAsync(self.viewLoadingIndex)
        self.viewLoadingIndex = -1
    end

    self.viewLoadingIndex = assetServicer:InstanceAssetAsync(address, self, nil, self.OnViewLoadCompleted, nil)
end

function UIViewMediator:OnViewLoadCompleted(address, uObject, userdata)
    self.loadingViewIndex = -1
    if uObject then
        local view = uObject:GetComponent(typeof(CSAgent.LuaUIView))
        if view then
            self:SetView(view.ObjTable)
        end
    end
end

function UIViewMediator:ListNotificationInterests()
    return {}
end

function UIViewMediator:HandleNotification(notification)
end

function UIViewMediator:StartTimer()
    self.isTimerRunning = true

    self.timerDataPool = ObjectPool(TimerData)
    self.timerDataDic = Dictionary()
    self.timerMaxID = 1
end

function UIViewMediator:StopTimer()
    local keys = self.timerDataDic:GetKeys()
    for i = 1, #(keys) do
        local timerData = self.timerDataDic:Get(keys[i])

        self.timerDataDic:Remove(keys[i])

        Game.GetTimerServicer():RemoveTimer(timerData.timerHandler)
    end

    self.timerDataPool:Clear()
    self.isTimerRunning = false
end

function UIViewMediator:AddTimer(intervalInSec, totalInSec, intervalFunc, endFunc, userdata)
    if not self.isTimerRunning then
        self:StartTimer()
    end

    local id = self.timerMaxID
    local handler =
        Game.GetTimerServicer():AddTimer(intervalInSec, totalInSec, self, self.OnTimerInterval, self.OnTimerEnd, id)

    local timerData = self.timerDataPool:Get()
    timerData:SetData(id, TimerType.IntervalAndEnd, intervalFunc, endFunc, userdata, handler)
    self.timerDataDic:Add(id, timerData)

    self.timerMaxID = self.timerMaxID + 1
end

function UIViewMediator:AddIntervalTimer(intervalInSec, intervalFunc, userdata)
    if not self.isTimerRunning then
        self:StartTimer()
    end

    local id = self.timerMaxID
    local handler = Game.GetTimerServicer():AddIntervalTimer(intervalInSec, self, self.OnTimerInterval, id)

    local timerData = self.timerDataPool:Get()
    timerData:SetData(id, TimerType.Interval, intervalFunc, nil, userdata, handler)
    self.timerDataDic:Add(id, timerData)

    self.timerMaxID = self.timerMaxID + 1
end

function UIViewMediator:AddTickTimer(intervalFunc, userdata)
    if not self.isTimerRunning then
        self:StartTimer()
    end

    local id = self.timerMaxID
    local handler = Game.GetTimerServicer():AddTickTimer(self, self.OnTimerInterval, id)

    local timerData = self.timerDataPool:Get()
    timerData:SetData(id, TimerType.Interval, intervalFunc, nil, userdata, handler)
    self.timerDataDic:Add(id, timerData)

    self.timerMaxID = self.timerMaxID + 1
end

function UIViewMediator:AddEndTimer(totalInSec, endFunc, userdata)
    if not self.isTimerRunning then
        self:StartTimer()
    end

    local id = self.timerMaxID
    local handler = Game.GetTimerServicer():AddEndTimer(totalInSec, self, self.OnTimerEnd, id)

    local timerData = self.timerDataPool:Get()
    timerData:SetData(id, TimerType.End, nil, endFunc, userdata, handler)
    self.timerDataDic:Add(id, timerData)

    self.timerMaxID = self.timerMaxID + 1
end

function UIViewMediator:RemoveTimer(intervalFunc, endFunc, userdata)
    local timerData

    self.timerDataDic:ForEach(
        function(_, value)
            local timerType = value.timerType
            if timerType == TimerType.Interval then
                if endFunc == nil and value.intervalFunc == intervalFunc and value.userdata == userdata then
                    timerData = value
                    return false
                end
            elseif timerType == TimerType.End then
                if intervalFunc == nil and value.endFunc == endFunc and value.userdata == userdata then
                    timerData = value
                    return false
                end
            elseif timerType == TimerType.IntervalAndEnd then
                if value.intervalFunc == intervalFunc and value.endFunc == endFunc and value.userdata == userdata then
                    timerData = value
                    return false
                end
            end
            return true
        end
    )

    if timerData then
        self.timerDataDic:Remove(timerData.id)
        Game.GetAssetServicer():RemoveTimer(timerData.timerHandler)

        self.timerDataPool:Release(timerData)
    end
end

function UIViewMediator:OnTimerInterval(userdata)
    local timerData = self.timerDataDic:Get(userdata)
    if timerData then
        timerData.intervalFunc(self, timerData.userdata)
    end
end

function UIViewMediator:OnTimerEnd(userdata)
    local timerData = self.timerDataDic:Get(userdata)
    if timerData then
        self.timerDataDic:Remove(userdata)

        timerData.endFunc(self, timerData.userdata)

        self.timerDataPool:Release(timerData)
    end
end

function UIViewMediator:DoRemove()
    if self.viewLoadingIndex > 0 then
        Game.GetAssetServicer():UnloadAssetAsync(self.viewLoadingIndex)
        self.viewLoadingIndex = -1
    end

    if self.isTimerRunning then
        self:StopTimer()
    end
end

return UIViewMediator
