local UIViewController = require('DotLua/UI/View/UIViewController')

----public----

local UIPanelController =
    class(
    UIViewController,
    function(self, name)
        self.subControllers = {}

        self.layer = nil
        self.layerTransform = nil
        self.mode = nil
    end
)

---internal----
-- 为Panel设置显示层级
-- @param layer 显示层级
-- @param layerTransform 父结点的Transform
-- @return void
function UIPanelController:SetLayer(layer, layerTransform)
    self.layer = layer
    self.layerTransform = layerTransform
end

----internal----
-- 获取Panel的显示层级
-- @return UIPanelLayer
function UIPanelController:GetLayer()
    return self.layer
end

function UIPanelController:SetMode(mode)
    self.mode = mode
end

function UIPanelController:GetMode()
    return self.mode
end

function UIPanelController:AddViewController(viewController)
    if viewController then
        local vc = self.subControllers[viewController:GetName()]
        if not vc then
            self.subControllers[viewController:GetName()] = viewController

            viewController:DoStart()
        end
    end
end

function UIPanelController:RemoveViewController(viewController)
    if viewController then
        self.subControllers[viewController:GetName()] = nil
        viewController:DoDestroy()
    end
end

function UIPanelController:RemoveViewControllerByName(name)
    local viewController = self.subControllers[name]
    if viewController then
        self.subControllers[name] = nil
        viewController:DoDestroy()
    end
end

function UIPanelController:RemoveAllViewController()
    for index = 1, #(self.subControllers) do
        self:RemoveViewController(self.subControllers[index])
    end
    self.subControllers = {}
end

function UIPanelController:GetViewControllerByName(name)
    return self.subControllers[name]
end

function UIPanelController:DoStart()
    UIViewController.DoStart(self)
end

function UIPanelController:DoDestroy()
    self:RemoveAllViewController()

    UIViewController.DoDestroy(self)
end

function UIPanelController:SetView(view)
    UIViewController.SetView(self, view)

    if self.layerTransform then
        self.view:SetParent(self.layerTransform)
    end
end

function UIPanelController:Close()
    local panelMgr = Game.PanelMgr
    panelMgr:ClosePanel(self)
end

----protected----
-- 控制器关心的事件的ID号
-- @return table/nil 消息号的数组
function UIPanelController:ListInterestEvents()
    return nil
end

----protected----
-- 事件的接收，对于子类来说需要重写以处理不同的消息
-- @param eventID 触发的消息的ID号
-- @param ... 多参数
-- @return void
function UIPanelController:HandleEvents(eventID, ...)
end

return UIPanelController