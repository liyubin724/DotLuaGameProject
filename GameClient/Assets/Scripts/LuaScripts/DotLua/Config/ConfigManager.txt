local Framework = require('DotLua/Framework/Framework')
local Dictionary = require('DotLua/Generic/Dictionary')

----internal----
-- 由Framework的Service进行管理
local ConfigManager =
    class(
    Framework.Servicer,
    function(self, name, rootPath)
        self.rootPath = rootPath

        self.configDic = Dictionary()
    end
)

----public----
-- 加载指定名称的配置表，如果表已经存在则直接返回，否则将进行数据加载
-- @param configName 配置表的名称
-- @return Table 返回指定的表数据
function ConfigManager:GetConfig(configName)
    local config = self.configDic:Get(configName)

    if not config then
        config = require(self.rootPath .. configName)
        self.configDic:Add(configName, config)
    end

    return config
end

----public----
-- 获取指定数据中指定ID行的数据
-- @param configName 配置表的名称
-- @param dataID 数据所在行的ID
-- @return table 数据指定ID行的表数据
function ConfigManager:GetData(configName, dataID)
    local config = self:GetConfig(configName)
    if not config then
        return nil
    end

    return config[dataID]
end

----public----
-- 获取指定数据中指定ID行的数据中对应的字段的值
-- @param configName 配置表的名称
-- @param dataID 数据所在行的ID
-- @param fieldName 数据指定列的名称
-- @return value 返回对应列的数据
function ConfigManager:GetDataValue(configName, dataID, fieldName)
    local data = self:GetData(configName, dataID)
    if not data then
        return nil
    end

    return data[fieldName]
end

----public----
-- 如果数据表已经加载过的话，将会重新加载指定的数据配置
-- @param configName 配置表的名称
function ConfigManager:Reload(configName)
    local config = self.configDic:Get(configName)
    if config then
        local configPath = self.rootPath .. configName
        unrequire(configPath)

        self.configDic:AddOrUpdate(configName, require(configPath))
    end
end

----public----
-- 重新加载所有已经加载过的数据配置
function ConfigManager:ReloadAll()
    local configNames = self.configDic:GetKeys()

    for i = 1, #configNames do
        self:Reload(configNames[i])
    end
end

----public----
-- 清理已经加载过的所有的数据配置
function ConfigManager:Clear()
    self.configDic:Clear()
end

return ConfigManager
