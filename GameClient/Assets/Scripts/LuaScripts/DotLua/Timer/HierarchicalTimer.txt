local oop = require('DotLua/OOP/oop')
local CycleTime = require('DotLua/CycleTime')

local TimerWheel = require('DotLua/Timer/TimerWheel')
local TimerTask = require('DotLua/Timer/TimerTask')
local TimerHandler = require('DotLua/Timer/TimerHandler')

local ObjectPool = require('DotLua/Pool/ObjectPool')

local tinsert = table.insert
local select = select
local mround = math.round

----private----
-- 多层时间轮定时器
-- 通过Game.TimerMgr可以获得全局的定时器
local HierarchicalTimer =
    oop.class(
    'HierarchicalTimer',
    function(self, name, ...)
        self.uniqueIndex = 0

        self.taskPool = ObjectPool(TimerTask)
        self.isPaused = false
        self.wheels = {}

        local length = select('#', ...)
        if length > 0 then
            for i = 1, length, 1 do
                local wheel = select(i, ...)
                tinsert(self.wheels, wheel)
            end
        else
            tinsert(self.wheels, TimerWheel(1, 100, 10))
            tinsert(self.wheels, TimerWheel(2, 100 * 10, 60))
            tinsert(self.wheels, TimerWheel(3, 100 * 10 * 60, 60))
            tinsert(self.wheels, TimerWheel(4, 100 * 10 * 60 * 60, 24))
            tinsert(self.wheels, TimerWheel(5, 100 * 10 * 60 * 60 * 24, 30))
        end

        for _, wheel in ipairs(self.wheels) do
            wheel.completeDelegate = oop.delegate(self, self.OnWheelComplete)
            wheel.soltTriggerDelegate = oop.delegate(self, self.OnWheelSoltTrigger)
        end

        self.wheel = self.wheels[1]

        self.handlers = {}
        self.elapseInMS = 0
    end
)

function HierarchicalTimer:ToString()
    local str =
        string.format('HierarchicalTimer:{uniqueIndex = %d, isPaused = %s,wheels={', self.uniqueIndex, self.isPaused)
    for i = 1, #(self.wheels), 1 do
        str = str .. self.wheels[i]:ToString()
    end
    str = str .. '}'
    return str
end

----public----
-- 添加定时器，定时器总时长结束后会自动删除
-- @param intervalInSec 定时器触发的周期
-- @param totalInSec 定时器的总时长
-- @param receiver 接收者
-- @param intervalFunc 定时器周期性触发时接收函数
-- @param endFunc 定时器结束时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimer:AddTimer(intervalInSec, totalInSec, receiver, intervalFunc, endFunc, userdata)
    self.uniqueIndex = self.uniqueIndex + 1

    local task = self.taskPool:Get()
    task:SetData(self.uniqueIndex, intervalInSec, totalInSec, receiver, intervalFunc, endFunc, userdata)

    local handler = self:AddTask(task, nil)

    return handler
end

----public----
-- 添加周期性的定时器,如需要停止需要调用RemoveTimer
-- @param intervalInSec 定时器触发的周期
-- @param receiver 接收者
-- @param intervalFunc 定时器周期性触发时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimer:AddIntervalTimer(intervalInSec, receiver, intervalFunc, userdata)
    return self:AddTimer(intervalInSec, 0, receiver, intervalFunc, nil, userdata)
end

function HierarchicalTimer:AddTickTimer(receiver, intervalFunc, userdata)
    return self:AddTimer(self.wheel:GetTickInMS() * 0.001, 0, receiver, intervalFunc, nil, userdata)
end

----public----
-- 添加定时器，达到指定时间后会触发,触发后会自动删除
-- @param totalInSec 定时器的总时长
-- @param receiver 接收者
-- @param endFunc 定时器结束时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimer:AddEndTimer(totalInSec, receiver, endFunc, userdata)
    return self:AddTimer(0, totalInSec, receiver, nil, endFunc, userdata)
end

----public----
-- 删除指定的定时器
-- @param timerIndex 定时器唯一标识
-- @return bool 返回是否成功删除定时器
function HierarchicalTimer:RemoveTimer(timerIndex)
    if not timerIndex then
        oop.error('Timer', 'the timerIndex is nil')
        return
    end

    local handler = self.handlers[timerIndex]
    if not handler then
        oop.warning('Timer', 'the index is error or the timer has been finished')
        return
    end

    self.handlers[timerIndex] = nil
    if handler:IsValid() then
        local task = self.wheels[handler:GetWheelIndex()]:RemoveTask(handler)
        handler:Clear()
        if task then
            self.taskPool:Release(task)
            return true
        end
    end
end

----internal----
-- 驱动多层时间轮进行轮转
-- @param deltaTime 流逝的时间
-- @return void
function HierarchicalTimer:DoUpdate()
    local deltaTime = CycleTime.GetDeltaTime()

    if self.isPaused then
        return
    end

    oop.info(self:ToString())

    if #(self.handlers) > 0 then
        self.elapseInMS = self.elapseInMS + mround(deltaTime * 1000)

        if self.elapseInMS >= self.wheel:GetTickInMS() then
            local count = math.floor(self.elapseInMS / self.wheel:GetTickInMS())
            self.wheel:DoPushWheel(count)

            self.elapseInMS = self.elapseInMS % self.wheel:GetTickInMS()
        end
    end
end

----public----
-- 终止时间轮的运行
-- @return void
function HierarchicalTimer:Pause()
    self.isPaused = true
end

----public----
-- 恢复时间轮的运行
-- @param void
function HierarchicalTimer:Resume()
    self.isPaused = false
end

----private----
-- 对应的level层的时间轮运行一周后的回调
-- @param level 时间轮的层级
-- @return void
function HierarchicalTimer:OnWheelComplete(level)
    local nextLevel = level + 1
    if nextLevel > #(self.wheels) then
        oop.error('Timer', 'Timer error')
        return
    end

    self.wheels[nextLevel]:DoPushWheel(1)
end

----private----
-- 某个时间轮上刻度上的定时任务开始执行,如果任务执行完毕，则否会直接删除任务，否则将会重新添加到时间轮上
-- @param tasks 当前刻度上的任务
-- @return void
function HierarchicalTimer:OnWheelSoltTrigger(tasks)
    if tasks and #tasks > 0 then
        for _, task in pairs(tasks) do
            local handler = self.handlers[task:GetIndex()]
            if handler then
                if handler:IsValid() then
                    if task:Trigger() then
                        handler:Clear()
                        self.handlers[task:GetIndex()] = nil
                        self.taskPool:Release(task)
                    else
                        self:AddTask(task, handler)
                    end
                else
                    self.handlers[task:GetIndex()] = nil
                    self.taskPool:Release(task)
                end
            else
                self.taskPool:Release(task)
            end
        end
    end
end

function HierarchicalTimer:AddTask(task, handler)
    local wheelIndex = -1
    local soltIndex = -1
    for i = 1, #(self.wheels) do
        local taskLeftTime = task:GetTriggerLeftInMS()
        local wheel = self.wheels[i]
        if wheel:GetTotalTickInMS() >= taskLeftTime then
            soltIndex = wheel:AddTask(task)
            wheelIndex = i
            break
        end
    end

    if not handler then
        handler = TimerHandler(task:GetIndex(), wheelIndex, soltIndex)
        self.handlers[task:GetIndex()] = handler
    else
        handler:SetWheelIndex(wheelIndex)
        handler:SetWheelSoltIndex(soltIndex)
    end
    return handler
end

return HierarchicalTimer
