require('DotLua/Class')

TimerData =
    Class(
    function(self)
    end
)

function TimerData:SetData(intervalInSec,totalInSec,receiver,intervalFunc,endFunc,userdata)
    self.intervalInSec = intervalInSec
    self.totalInSec = totalInSec
    self.receiver = receiver
    self.intervalFunc = intervalFunc
    self.endFunc = endFunc
    self.userdata = userdata

    self.elapseIntervalInSec = 0
    self.totalIntervalInSec = 0
end

function TimerData:GetInterval()
    return self.intervalInSec
end

function TimerData:GetTotal()
    return self.totalInSec
end

function TimerData:GetReceiver()
    return self.receiver
end

function TimerData:GetIntervalFunc()
    return self.intervalFunc
end

function TimerData:GetEndFunc()
    return self.endFunc
end

function TimerData:GetUserdata()
    return self.userdata
end

function TimerData:Tick(deltaTime)
    if self.intervalFunc then
        self.elapseIntervalInSec = self.elapseIntervalInSec + deltaTime

        if self.elapseIntervalInSec >= self.intervalInSec then
            self.elapseIntervalInSec = self.elapseIntervalInSec - self.intervalInSec
            self:InvokeInterval()
        end

    end

    if self.endFunc then
        self.elapseTotalInSec = self.elapseTotalInSec + deltaTime
        if self.elapseTotalInSec >= self.totalInSec then
            self:InvokeEnd()
            return false
        end
    end

    return true
end

function TimerData:InvokeInterval()
    if self.intervalFunc then
        if self.receiver then
            self.intervalFunc(self.receiver,self.userdata)
        else
            self.intervalFunc(self.userdata)
        end
    end
end

function TimerData:InvokeEnd()
    if self.endFunc then
        if self.receiver then
            self.endFunc(self.receiver,self.userdata)
        else
            self.endFunc(self.userdata)
        end
    end
end
