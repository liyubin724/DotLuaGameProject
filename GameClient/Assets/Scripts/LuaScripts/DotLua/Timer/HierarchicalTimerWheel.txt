require('DotLua/Class')
require('DotLua/Timer/TimerWheel')
require('DotLua/Pool/ObjectPool')
require('DotLua/Timer/TimerTask')
require('DotLua/Timer/TimerHandler')
require('DotLua/Delegate')

local DebugLog = DebugLog

----public----
-- 多层时间轮定时器
-- 通过Game.TimerMgr可以获得全局的定时器
HierarchicalTimerWheel =
    Class(
    function(self)
        self.uniqueIndex = 0
        self.taskPool = ObjectPool(TimerTask)

        self.isPaused = false

        local wheel0 = self:CreateWheel(1, 100, 10)
        local wheel1 = self:CreateWheel(2, 100 * 10, 60)
        local wheel2 = self:CreateWheel(3, 100 * 10 * 60, 60)
        local wheel3 = self:CreateWheel(4, 100 * 10 * 60 * 60, 24)
        local wheel4 = self:CreateWheel(5, 100 * 10 * 60 * 60 * 24, 30)

        self.wheels = {wheel0, wheel1, wheel2, wheel3, wheel4}

        self.wheel = wheel0

        self.handlers = {}
        self.elapseInMS = 0
    end
)

----private----
-- 创建一层的时间轮
-- @param level 时间轮的层级
-- @param tick 当前层上一格刻度的时间长度，单位毫秒
-- @param size 当前层上刻度数量
-- @return TimerWheel 返回时间轮
function HierarchicalTimerWheel:CreateWheel(level, tick, size)
    local wheel = TimerWheel(level, tick, size)
    wheel:AddCompleteDelegate(Delegate.CreateListener(self, HierarchicalTimerWheel.OnWheelComplete))
    wheel:AddSoltTriggerDelegate(Delegate.CreateListener(self, HierarchicalTimerWheel.OnWheelSoltTrigger))
    return wheel
end

----public----
-- 添加定时器，定时器总时长结束后会自动删除
-- @param intervalInSec 定时器触发的周期
-- @param totalInSec 定时器的总时长
-- @param receiver 接收者
-- @param intervalFunc 定时器周期性触发时接收函数
-- @param endFunc 定时器结束时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimerWheel:AddTimer(intervalInSec, totalInSec, receiver, intervalFunc, endFunc, userdata)
    self.uniqueIndex = self.uniqueIndex + 1

    local task = self.taskPool:Get()
    task:SetData(self.uniqueIndex, intervalInSec, totalInSec, receiver, intervalFunc, endFunc, userdata)

    return self:InnerAddTask(task)
end

----public----
-- 添加周期性的定时器,如需要停止需要调用RemoveTimer
-- @param intervalInSec 定时器触发的周期
-- @param receiver 接收者
-- @param intervalFunc 定时器周期性触发时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimerWheel:AddIntervalTimer(intervalInSec, receiver, intervalFunc, userdata)
    return self:AddTimer(intervalInSec, 0, receiver, intervalFunc, nil, userdata)
end

----public----
-- 添加定时器，达到指定时间后会触发,触发后会自动删除
-- @param totalInSec 定时器的总时长
-- @param receiver 接收者
-- @param endFunc 定时器结束时接收函数
-- @param userdata 自定义数据
-- @return TaskHandler 返回定时器唯一的标识（中止时使用)
function HierarchicalTimerWheel:AddEndTimer(totalInSec, receiver, endFunc, userdata)
    return self:AddTimer(0, totalInSec, receiver, nil, endFunc, userdata)
end

----public----
-- 删除指定的定时器
-- @param timerIndex 定时器唯一标识
-- @return bool 返回是否成功删除定时器
function HierarchicalTimerWheel:RemoveTask(taskHandler)
    if taskHandler and taskHandler:IsValid() then
        self.handlers[taskHandler:GetIndex()] = nil

        local task = self.wheels[taskHandler:GetWheelIndex()]:RemoveTask(taskHandler)
        taskHandler:Clear()
        if task then
            self.taskPool:Release(task)
            return true
        end
    end

    return false
end

----internal----
-- 驱动多层时间轮进行轮转
-- @param deltaTime 流逝的时间
-- @return void
function HierarchicalTimerWheel:DoUpdate(deltaTime)
    if #(self.handlers) > 0 then
        self.elapseInMS = self.elapseInMS + math.round(deltaTime * 1000)

        if self.elapseInMS >= self.wheel:GetTickInMS() then
            local count = math.floor(self.elapseInMS / self.wheel:GetTickInMS())
            self.wheel:DoPushWheel(count)

            self.elapseInMS = self.elapseInMS % self.wheel:GetTickInMS()
        end
    end
end

----public----
-- 终止时间轮的运行
-- @return void
function HierarchicalTimerWheel:Pause()
    self.isPaused = true
end

----public----
-- 恢复时间轮的运行
-- @param void
function HierarchicalTimerWheel:Resume()
    self.isPaused = false
end

----private----
-- 对应的level层的时间轮运行一周后的回调
-- @param level 时间轮的层级
-- @return void
function HierarchicalTimerWheel:OnWheelComplete(level)
    local nextLevel = level + 1
    if nextLevel > #(self.wheels) then
        DebugLog.Error('Timer', 'Timer error')
        return
    end

    self.wheels[nextLevel]:DoPushWheel(1)
end

----private----
-- 某个时间轮上刻度上的定时任务开始执行,如果任务执行完毕，则否会直接删除任务，否则将会重新添加到时间轮上
-- @param tasks 当前刻度上的任务
-- @return void
function HierarchicalTimerWheel:OnWheelSoltTrigger(tasks)
    if tasks and #(tasks) > 0 then
        for _, task in pairs(tasks) do
            if task:Trigger() then
                local handler = self.handlers[task:GetIndex()]
                handler:Clear()
                self.handlers[task:GetIndex()] = nil
                self.taskPool:Release(task)
            else
                self:InnerAddTask(task)
            end
        end
    end
end

function HierarchicalTimerWheel:InnerAddTask(task)
    local handler = self.handlers[task:GetIndex()]

    local wheelIndex = -1
    local soltIndex = -1
    for i = 1, #(self.wheels) do
        local taskLeftTime = task:GetTriggerLeftInMS()
        local wheel = self.wheels[i]
        if wheel:GetTotalTickInMS() >= taskLeftTime then
            soltIndex = wheel:AddTask(task)
            wheelIndex = i
            break
        end
    end

    if not handler then
        handler = TimerHandler(task:GetIndex(), wheelIndex, soltIndex)
        self.handlers[task:GetIndex()] = handler
    else
        handler:SetWheelIndex(wheelIndex)
        handler:SetWheelSoltIndex(soltIndex)
    end
    return handler
end
