require('DotLua/Class')
require('DotLua/Callback')

local DebugLog = DebugLog

TimerTask =
    Class(
    function(self)
        self.index = 0
        self.intervalInMS = 0
        self.totalInMS = 0

        self.intervalCallback = nil
        self.endCallback = nil
        self.userdata = nil

        self.triggerLeftInMS = 0
    end
)

function TimerTask:GetIndex()
    return self.index
end

function TimerTask:GetTriggerLeftInMS()
    return self.triggerLeftInMS
end

function TimerTask:SetTriggerLeftInMS(timeInMS)
    self.triggerLeftInMS = timeInMS
end

function TimerTask:SetData(index, intervalInSec, totalInSec, receiver, intervalFunc, endFunc, userdata)
    self.index = index

    if totalInSec > 0 then
        self.totalInMS = math.ceil(totalInSec * 1000)
    end
    if intervalInSec > 0 then
        self.intervalInMS = math.ceil(intervalInSec * 1000)
    end

    if self.intervalInMS > 0 then
        self.triggerLeftInMS = self.intervalInMS
    else
        self.triggerLeftInMS = self.totalInMS
    end

    if intervalFunc then
        self.intervalCallback = Callback(receiver, intervalFunc)
    end
    if endFunc then
        self.endCallback = Callback(receiver, endFunc)
    end
    self.userdata = userdata
end

function TimerTask:OnTaskInterval()
    if self.intervalCallback then
        self.intervalCallback:Invoke(self.userdata)
    end
end

function TimerTask:OnTaskEnd()
    if self.endCallback then
        self.endCallback:Invoke(self.userdata)
    end
end

function TimerTask:Reset()
    self.index = 0
    self.intervalInMS = 0
    self.totalInMS = 0

    self.intervalCallback = nil
    self.endCallback = nil
    self.userdata = nil

    self.triggerLeftInMS = 0
end
