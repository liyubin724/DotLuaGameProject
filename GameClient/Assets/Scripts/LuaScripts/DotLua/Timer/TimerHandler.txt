local oop = require('DotLua/OOP/oop')

local tostring = tostring

----public----
-- 添加Timer后得到对于任务的标识
local TimerHandler =
    oop.class(
    'TimerHandler',
    function(self, index, wheelIndex, slotIndex)
        self.index = index
        self.wheelIndex = wheelIndex
        self.wheelSlotIndex = slotIndex
    end
)

----private----
--只要Index相当则表示相同
TimerHandler.__eq = function(handler1, handler2)
    if handler1 and handler2 then
        return handler1.index == handler2.index
    end
    return false
end

----interval----
-- 定时任务的唯一标识
-- @return int
function TimerHandler:GetIndex()
    return self.index
end

----interval----
-- 定时任务的所在的时间轮序号
-- @return int
function TimerHandler:GetWheelIndex()
    return self.wheelIndex
end

----interval----
-- 重新设定定时任务所在的时间轮序号
-- @param index 时间轮序号
-- @return void
function TimerHandler:SetWheelIndex(index)
    self.wheelIndex = index
end

----interval----
-- 定时任务所在时间轮上刻度
-- @return int
function TimerHandler:GetWheelSoltIndex()
    return self.wheelSlotIndex
end

----interval----
-- 重新设定定时任务所在时间轮上的刻度
-- @param index 刻度
-- @return void
function TimerHandler:SetWheelSoltIndex(index)
    self.wheelSlotIndex = index
end

----interval----
-- 判断定时任务是否有效
-- @return bool
function TimerHandler:IsValid()
    return self.index > 0 and self.wheelIndex > 0 and self.wheelSlotIndex > 0
end

----interval----
-- 清理定时任务
-- @return void
function TimerHandler:Clear()
    self.index = -1
    self.wheelIndex = -1
    self.wheelSlotIndex = -1
end

function TimerHandler:ToString()
    return string.format(
        'TimerHandler:{index = %d,wheelIndex = %d,slotIndex = %d}',
        self.index,
        self.wheelIndex,
        self.wheelSlotIndex
    )
end

return TimerHandler
