function class(base, init,name)
    local c = {} -- a new class instance

    if not init and type(base) == 'function' then
        init = base
        base = nil
    elseif type(base) == 'table' then
        -- our new class is a shallow copy of the base class!
        for i, v in pairs(base) do
            c[i] = v
        end
        c._base = base
    end

    c.__index = c

    c._name = name

    c._init = function(obj, ...)
        if base and base._init then
            base._init(obj, ...)
        end

        if init then
            init(obj, ...)
        end
    end

    c.is_a = function(self, klass)
        local m = getmetatable(self)
        while m do
            if m == klass then
                return true
            end
            m = m._base
        end
        return false
    end

    -- expose a constructor which can be called by <classname>(<args>)
    local mt = {}
    mt.__index = mt
    mt.__call = function(class_tbl, ...)
        local obj = {}

        setmetatable(obj, class_tbl)

        class_tbl._init(obj, ...)

        return obj
    end

    setmetatable(c, mt)

    return c
end

