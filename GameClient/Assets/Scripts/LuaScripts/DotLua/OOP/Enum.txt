local ObjectType = require('DotLua/OOP/ObjectType')
local class = require('DotLua/OOP/class')

local tinsert = table.insert
local tkeys = table.keys
local sstartswith = string.startswith

local Enum =
    class(
    'Enum',
    function(self)
        self._isInstance = false
    end
)

Enum.__newindex = function(e, k, v)
    error('Enum', "can't add new key in to the Enum")
end

Enum._type = ObjectType.Enum

function Enum:GetNames()
    local names = {}

    local keys = tkeys(self)
    for i = 1, #keys, 1 do
        if not sstartswith(keys[i],"_") and rawget(self, keys[i]) then
            tinsert(names, keys[i])
        end
    end

    return names
end

function Enum:GetValues()
    local values = {}

    local names = self:GetNames()
    for i = 1, #names, 1 do
        tinsert(values, rawget(self, names[i]))
    end

    return values
end

function Enum:GetNameByValue(value)
    for k, v in pairs(self) do
        if v == value then
            return k
        end
    end

    return nil
end

function Enum:ToString()
    local str = string.format('%s:{', self:GetClassName())
    local names = self:GetNames()
    for i = 1, #names, 1 do
        str = str + string.format('%s = %s', names[i], tostring(rawget(self, names[i])))
    end
    str = str + '}'

    return str
end

return Enum
