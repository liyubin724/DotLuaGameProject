local Observer = require('DotLua/Framework/Observer/Observer')

local Controller =
    class(
    function(self, uniqueID)
        self.uniqueID = uniqueID

        self.view = nil

        self.commandCreatorMap = {}

        self:OnInitialized()
    end
)

function Controller:GetUniqueID()
    return self.uniqueID
end

function Controller:GetView()
    if not self.view then
        local Framework = require('DotLua/Framework/Framework')
        local facade = Framework.GetFacade(self.uniqueID)
        if facade then
            self.view = facade:GetView()
        else
            error('')
        end
    end
    return self.view
end

function Controller:OnInitialized()
end

function Controller:HasCommand(notificationName)
    return self.commandCreatorMap[notificationName] ~= nil
end

function Controller:RegisterCommand(notificationName, commandCreatorFunc)
    if notificationName and type(commandCreatorFunc) == 'function' then
        if not self:HasCommand(notificationName) then
            self:GetView():RegisterObserver(notificationName, Observer(self, self.ExecuteCommand))

            self.commandCreatorMap[notificationName] = commandCreatorFunc
        else
            error('')
        end
    else
        error('')
    end
end

function Controller:RemoveCommand(notificationName)
    if self.commandCreatorMap[notificationName] then
        self.commandCreatorMap[notificationName] = nil

        self:GetView():RemoveObserver(notificationName, self, self.ExecuteCommand)
    end
end

function Controller:ExecuteCommand(notification)
    local commandCreator = self.commandCreatorMap[notification:GetName()]
    if commandCreator then
        local command = commandCreator()
        command:OnInitialized(self.uniqueID)
        command:Execute(notification)
    else
        error('')
    end
end

return Controller
