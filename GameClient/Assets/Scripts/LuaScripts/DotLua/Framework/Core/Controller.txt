local Observer = require('DotLua/Framework/Observer/Observer')

local Controller =
    class(
    function(self, uniqueID, view)
        self.uniqueID = uniqueID

        self.view = view

        self.commandCreatorMap = {}
    end
)

function Controller:GetUniqueID()
    return self.uniqueID
end

function Controller:HasCommand(notificationName)
    return self.commandCreatorMap[notificationName] ~= nil
end

function Controller:RegisterCommand(notificationName, commandCreatorFunc)
    if notificationName and type(commandCreatorFunc) == 'function' then
        if not self:HasCommand(notificationName) then
            self.view:RegisterObserver(notificationName, self, self.ExecuteCommand)

            self.commandCreatorMap[notificationName] = commandCreatorFunc
        else
            error('')
        end
    else
        error('')
    end
end

function Controller:RemoveCommand(notificationName)
    if self.commandCreatorMap[notificationName] then
        self.commandCreatorMap[notificationName] = nil

        self.view:RemoveObserver(notificationName, self, self.ExecuteCommand)
    end
end

function Controller:ExecuteCommand(notification)
    local commandCreator = self.commandCreatorMap[notification:GetName()]
    if commandCreator then
        local command = commandCreator()
        command:OnInitialized(self:GetUniqueID())
        command:Execute(notification)
    else
        error('')
    end
end

return Controller
