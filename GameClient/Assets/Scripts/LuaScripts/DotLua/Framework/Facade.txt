local Notification = require("DotLua/Framework/Observer/Notification")
local Controller = require('DotLua/Framework/Core/Controller')
local Model = require('DotLua/Framework/Core/Model')
local View = require('DotLua/Framework/Core/View')
local Service = require('DotLua/Framework/Core/Service')

local Facade =
    class(
    function(self, uniqueID)
        self.uniqueID = uniqueID

        self.model = nil
        self.controller = nil
        self.view = nil
        self.service = nil

        self:OnInitialized()
    end
)

function Facade:GetUniqueID()
    return self.uniqueID
end

function Facade:GetView()
    return self.view
end

function Facade:OnInitialized()
    self:InitializeService()
    self:InitializeModel()
    self:InitializeController()
    self:InitializeView()
end

function Facade:InitializeService()
    self.service = Service(self.uniqueID)
end

function Facade:InitializeModel()
    self.model = Model(self.uniqueID)
end

function Facade:InitializeController()
    self.controller = Controller(self.uniqueID)
end

function Facade:InitializeView()
    self.view = View(self.uniqueID)
end

function Facade:HasServicer(servicerName)
    return self.service:HasServicer(servicerName)
end

function Facade:RegisterServicer(servicer)
    self.service:RegisterServicer(servicer)
end

function Facade:RetrieveServicer(servicerName)
    return self.service:RetrieveServicer(servicerName)
end

function Facade:RemoveServicer(servicerName)
    self.service:RemoveServicer(servicerName)
end

function Facade:HasCommand(notificationName)
    return self.controller:HasCommand(notificationName)
end

function Facade:RegisterCommand(notificationName,commandCreatorFunc)
    self.controller:RegisterCommand(notificationName,commandCreatorFunc)
end

function Facade:RemoveCommand(notificationName)
    self.controller:RemoveCommand(notificationName)
end

function Facade:HasProxy(proxyName)
    return self.model:HasProxy(proxyName)
end

function Facade:RegisterProxy(proxy)
    self.model:RegisterProxy(proxy)
end

function Facade:RetrieveProxy(proxyName)
    return self.model:RetrieveProxy(proxyName)
end

function Facade:RemoveProxy(proxyName)
    return self.model:RemoveProxy(proxyName)
end

function Facade:HasMediator(mediatorName)
    return self.view:HasMediator(mediatorName)
end

function Facade:RegisterMediator(mediator)
    self.view:RegisterMediator(mediator)
end

function Facade:RetrieveMediator(mediatorName)
    return self.view:RetrieveMediator(mediatorName)
end

function Facade:RemoveMediator(mediatorName)
    self.view:RemoveMediator(mediatorName)
end

function Facade:SendNotification(notificationName,body,userdata)
    self:NotifyObservers(Notification(notificationName,body,userdata))
end

function Facade:NotifyObservers(notification)
    self.view:NotifyObserver(notification)
end

function Facade:DoUpdate(deltaTime)
    self.service:DoUpdate(deltaTime)
end

function Facade:DoUnscaleUpdate(deltaTime)
    self.service:DoUnscaleUpdate(deltaTime)
end

function Facade:DoLateUpdate(deltaTime)
    self.service:DoLateUpdate(deltaTime)
end

function Facade:DoFixedUpdate(deltaTime)
    self.service:DoFixedUpdate(deltaTime)
end

function Facade:DoDispose()
end

return Facade
